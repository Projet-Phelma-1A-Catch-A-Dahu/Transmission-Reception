
Nucleo_F411RE_NRF24L01_TFT_Receiver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000230c  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  20000068  08006ccc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08006ccc  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df48  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00030230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e7  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dad8  00000000  00000000  00048cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a084  00000000  00000000  000567b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e083b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  000e088c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004930 	.word	0x08004930

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08004930 	.word	0x08004930

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f002 f9f7 	bl	80028e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f81b 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8e3 	bl	80006c4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004fe:	f000 f881 	bl	8000604 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000502:	f000 f8b5 	bl	8000670 <MX_USART2_UART_Init>

  /* Check the availability of adafruit 1.8" TFT shield on top of STM32NUCLEO
       board. This is done by reading the state of IO PB.00 pin (mapped to JoyStick
       available on adafruit 1.8" TFT shield). If the state of PB.00 is high then
       the adafruit 1.8" TFT shield is available. */
    if(TFT_ShieldDetect() == SHIELD_DETECTED)
 8000506:	f000 f9e7 	bl	80008d8 <TFT_ShieldDetect>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	d106      	bne.n	800051e <main+0x32>
    {
      /* Initialize the LCD */
    	uint8_t ret = BSP_LCD_Init();
 8000510:	f000 fd70 	bl	8000ff4 <BSP_LCD_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]

      TFT_DisplayMenu();
 8000518:	f000 fa0c 	bl	8000934 <TFT_DisplayMenu>
 800051c:	e001      	b.n	8000522 <main+0x36>

    }
    else /* Shield not mounted */
    {
      Error_Handler();
 800051e:	f000 fa25 	bl	800096c <Error_Handler>
    }

  HAL_Delay(1000);
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f002 fa4f 	bl	80029c8 <HAL_Delay>

  runRadio();
 800052a:	f000 faf5 	bl	8000b18 <runRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0x42>

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f9ee 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 80005a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005aa:	2308      	movs	r3, #8
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fe08 	bl	80031cc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9d3 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f86a 	bl	80036bc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ee:	f000 f9bd 	bl	800096c <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_SPI3_Init+0x64>)
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_SPI3_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_SPI3_Init+0x64>)
 8000610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000614:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_SPI3_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_SPI3_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_SPI3_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_SPI3_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_SPI3_Init+0x64>)
 8000630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000634:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_SPI3_Init+0x64>)
 8000638:	2208      	movs	r2, #8
 800063a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_SPI3_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_SPI3_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_SPI3_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_SPI3_Init+0x64>)
 8000650:	220a      	movs	r2, #10
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_SPI3_Init+0x64>)
 8000656:	f003 fa51 	bl	8003afc <HAL_SPI_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000660:	f000 f984 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084
 800066c:	40003c00 	.word	0x40003c00

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f003 fd54 	bl	8004154 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f95b 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000dc 	.word	0x200000dc
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b54      	ldr	r3, [pc, #336]	; (8000830 <MX_GPIO_Init+0x16c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a53      	ldr	r2, [pc, #332]	; (8000830 <MX_GPIO_Init+0x16c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b51      	ldr	r3, [pc, #324]	; (8000830 <MX_GPIO_Init+0x16c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <MX_GPIO_Init+0x16c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a4c      	ldr	r2, [pc, #304]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a45      	ldr	r2, [pc, #276]	; (8000830 <MX_GPIO_Init+0x16c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a3e      	ldr	r2, [pc, #248]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <MX_GPIO_Init+0x16c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2103      	movs	r1, #3
 800074e:	4839      	ldr	r0, [pc, #228]	; (8000834 <MX_GPIO_Init+0x170>)
 8000750:	f002 fcf0 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075a:	4837      	ldr	r0, [pc, #220]	; (8000838 <MX_GPIO_Init+0x174>)
 800075c:	f002 fcea 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2160      	movs	r1, #96	; 0x60
 8000764:	4835      	ldr	r0, [pc, #212]	; (800083c <MX_GPIO_Init+0x178>)
 8000766:	f002 fce5 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <MX_GPIO_Init+0x170>)
 8000782:	f002 fa57 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000786:	2303      	movs	r3, #3
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4825      	ldr	r0, [pc, #148]	; (8000834 <MX_GPIO_Init+0x170>)
 800079e:	f002 fa49 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80007a2:	2304      	movs	r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0x170>)
 80007b8:	f002 fa3c 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007cc:	2305      	movs	r3, #5
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_GPIO_Init+0x174>)
 80007d8:	f002 fa2c 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_GPIO_Init+0x174>)
 80007f6:	f002 fa1d 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <MX_GPIO_Init+0x178>)
 8000812:	f002 fa0f 	bl	8002c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2008      	movs	r0, #8
 800081c:	f002 f9d3 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000820:	2008      	movs	r0, #8
 8000822:	f002 f9ec 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400

08000840 <LED2_Blink>:
  * @brief  Blinks LED2 with two frequencies depending on User press button.
  * @param  None
  * @retval None
  */
static void LED2_Blink(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fa69 	bl	8001d1c <BSP_LED_Init>

  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800084a:	2101      	movs	r1, #1
 800084c:	2000      	movs	r0, #0
 800084e:	f001 faaf 	bl	8001db0 <BSP_PB_Init>

  /* Initiate BlinkSpeed variable */
  BlinkSpeed = 0;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <LED2_Blink+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while(1)
  {
    /* Test on blink speed */
    if(BlinkSpeed == 0)
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <LED2_Blink+0x5c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d107      	bne.n	8000870 <LED2_Blink+0x30>
    {
      BSP_LED_Toggle(LED2);
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fa91 	bl	8001d88 <BSP_LED_Toggle>
      /* Wait for 500ms */
      HAL_Delay(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086a:	f002 f8ad 	bl	80029c8 <HAL_Delay>
 800086e:	e7f3      	b.n	8000858 <LED2_Blink+0x18>
    }
    else if(BlinkSpeed == 1)
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <LED2_Blink+0x5c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d106      	bne.n	8000886 <LED2_Blink+0x46>
    {
      BSP_LED_Toggle(LED2);
 8000878:	2000      	movs	r0, #0
 800087a:	f001 fa85 	bl	8001d88 <BSP_LED_Toggle>
      /* Wait for 100ms */
      HAL_Delay(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f002 f8a2 	bl	80029c8 <HAL_Delay>
 8000884:	e7e8      	b.n	8000858 <LED2_Blink+0x18>
    }
    else if(BlinkSpeed == 2)
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <LED2_Blink+0x5c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d1e4      	bne.n	8000858 <LED2_Blink+0x18>
    {
      BSP_LED_Toggle(LED2);
 800088e:	2000      	movs	r0, #0
 8000890:	f001 fa7a 	bl	8001d88 <BSP_LED_Toggle>
      /* Wait for 50ms */
      HAL_Delay(50);
 8000894:	2032      	movs	r0, #50	; 0x32
 8000896:	f002 f897 	bl	80029c8 <HAL_Delay>
    if(BlinkSpeed == 0)
 800089a:	e7dd      	b.n	8000858 <LED2_Blink+0x18>
 800089c:	20000120 	.word	0x20000120

080008a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
  if(BlinkSpeed == 2)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d103      	bne.n	80008ba <HAL_GPIO_EXTI_Callback+0x1a>
  {
    BlinkSpeed = 0;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    BlinkSpeed ++;
  }
}
 80008b8:	e005      	b.n	80008c6 <HAL_GPIO_EXTI_Callback+0x26>
    BlinkSpeed ++;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000120 	.word	0x20000120

080008d8 <TFT_ShieldDetect>:
  * @param  None
  * @retval SHIELD_DETECTED: 1.8" TFT shield is available
  *         SHIELD_NOT_DETECTED: 1.8" TFT shield is not available
  */
static ShieldStatus TFT_ShieldDetect(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable GPIO clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <TFT_ShieldDetect+0x54>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <TFT_ShieldDetect+0x54>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <TFT_ShieldDetect+0x54>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fa:	2301      	movs	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000902:	2302      	movs	r3, #2
 8000904:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <TFT_ShieldDetect+0x58>)
 800090c:	f002 f992 	bl	8002c34 <HAL_GPIO_Init>

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) != 0)
 8000910:	2101      	movs	r1, #1
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <TFT_ShieldDetect+0x58>)
 8000914:	f002 fbf6 	bl	8003104 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <TFT_ShieldDetect+0x4a>
  {
    return SHIELD_DETECTED;
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <TFT_ShieldDetect+0x4c>
  }
  else
  {
    return SHIELD_NOT_DETECTED;
 8000922:	2300      	movs	r3, #0
  }
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400

08000934 <TFT_DisplayMenu>:
  * @brief  Displays demonstration menu.
  * @param  None
  * @retval None
  */
static void TFT_DisplayMenu(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fbcd 	bl	80010d8 <BSP_LCD_Clear>

  /* Set Menu font */
  BSP_LCD_SetFont(&Font12);
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <TFT_DisplayMenu+0x2c>)
 8000940:	f000 fbae 	bl	80010a0 <BSP_LCD_SetFont>

  /* Set Text color */
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000944:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000948:	f000 fb9a 	bl	8001080 <BSP_LCD_SetTextColor>
  /* Display message */
  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"   NUCLEO-F411RE    ");
 800094c:	4905      	ldr	r1, [pc, #20]	; (8000964 <TFT_DisplayMenu+0x30>)
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fcae 	bl	80012b0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)"       DEMO         ");
 8000954:	4904      	ldr	r1, [pc, #16]	; (8000968 <TFT_DisplayMenu+0x34>)
 8000956:	2002      	movs	r0, #2
 8000958:	f000 fcaa 	bl	80012b0 <BSP_LCD_DisplayStringAtLine>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000000c 	.word	0x2000000c
 8000964:	08004948 	.word	0x08004948
 8000968:	08004960 	.word	0x08004960

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

    LED2_Blink();
 8000970:	f7ff ff66 	bl	8000840 <LED2_Blink>

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2101      	movs	r1, #1
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <nRF24_CE_L+0x18>)
 8000982:	f002 fbd7 	bl	8003134 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000986:	2002      	movs	r0, #2
 8000988:	f002 f81e 	bl	80029c8 <HAL_Delay>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40020800 	.word	0x40020800

08000994 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <nRF24_CE_H+0x18>)
 800099e:	f002 fbc9 	bl	8003134 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f002 f810 	bl	80029c8 <HAL_Delay>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40020800 	.word	0x40020800

080009b0 <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 f805 	bl	80029c8 <HAL_Delay>
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart2;

void UART_SendChar(char b) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
 80009d2:	1df9      	adds	r1, r7, #7
 80009d4:	23c8      	movs	r3, #200	; 0xc8
 80009d6:	2201      	movs	r2, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <UART_SendChar+0x20>)
 80009da:	f003 fc08 	bl	80041ee <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000dc 	.word	0x200000dc

080009ec <UART_SendStr>:

void UART_SendStr(char *string) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fbef 	bl	80001d8 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	23c8      	movs	r3, #200	; 0xc8
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <UART_SendStr+0x24>)
 8000a04:	f003 fbf3 	bl	80041ee <HAL_UART_Transmit>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000dc 	.word	0x200000dc

08000a14 <Toggle_LED>:

void Toggle_LED() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4802      	ldr	r0, [pc, #8]	; (8000a24 <Toggle_LED+0x10>)
 8000a1c:	f002 fba3 	bl	8003166 <HAL_GPIO_TogglePin>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40020000 	.word	0x40020000

08000a28 <UART_SendBufHex>:
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	81fb      	strh	r3, [r7, #14]
 8000a38:	e018      	b.n	8000a6c <UART_SendBufHex+0x44>
        ch = *buf++;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <UART_SendBufHex+0x58>)
 8000a4e:	5c9b      	ldrb	r3, [r3, r2]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffb9 	bl	80009c8 <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <UART_SendBufHex+0x58>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffb1 	bl	80009c8 <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e2      	bcc.n	8000a3a <UART_SendBufHex+0x12>
    }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08004978 	.word	0x08004978

08000a84 <UART_SendInt>:
void UART_SendHex8(uint16_t num) {
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(int32_t num) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da05      	bge.n	8000aa2 <UART_SendInt+0x1e>
        UART_SendChar('-');
 8000a96:	202d      	movs	r0, #45	; 0x2d
 8000a98:	f7ff ff96 	bl	80009c8 <UART_SendChar>
        num *= -1;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <UART_SendInt+0x90>)
 8000aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aaa:	1099      	asrs	r1, r3, #2
 8000aac:	17d3      	asrs	r3, r2, #31
 8000aae:	1ac9      	subs	r1, r1, r3
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	1ad1      	subs	r1, r2, r3
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	1c59      	adds	r1, r3, #1
 8000ac0:	6179      	str	r1, [r7, #20]
 8000ac2:	3230      	adds	r2, #48	; 0x30
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	3318      	adds	r3, #24
 8000ac8:	443b      	add	r3, r7
 8000aca:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <UART_SendInt+0x90>)
 8000ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad6:	1092      	asrs	r2, r2, #2
 8000ad8:	17db      	asrs	r3, r3, #31
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dcde      	bgt.n	8000aa2 <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e00a      	b.n	8000b02 <UART_SendInt+0x7e>
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff66 	bl	80009c8 <UART_SendChar>
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	daf1      	bge.n	8000aec <UART_SendInt+0x68>
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	66666667 	.word	0x66666667

08000b18 <runRadio>:
}

#endif // DEMO_TX_


int runRadio(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
    UART_SendStr("\r\nSTM32F411RE Receiver is online.\r\n");
 8000b1e:	486b      	ldr	r0, [pc, #428]	; (8000ccc <runRadio+0x1b4>)
 8000b20:	f7ff ff64 	bl	80009ec <UART_SendStr>

    // RX/TX disabled
    nRF24_CE_L();
 8000b24:	f7ff ff28 	bl	8000978 <nRF24_CE_L>
	Delay_ms(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f7ff ff41 	bl	80009b0 <Delay_ms>

    // Configure the nRF24L01+
    UART_SendStr("nRF24L01+ check: ");
 8000b2e:	4868      	ldr	r0, [pc, #416]	; (8000cd0 <runRadio+0x1b8>)
 8000b30:	f7ff ff5c 	bl	80009ec <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	while (!nRF24_Check()) { // try indefinitely
 8000b34:	e007      	b.n	8000b46 <runRadio+0x2e>
		UART_SendStr("FAIL\r\n");
 8000b36:	4867      	ldr	r0, [pc, #412]	; (8000cd4 <runRadio+0x1bc>)
 8000b38:	f7ff ff58 	bl	80009ec <UART_SendStr>
		Toggle_LED();
 8000b3c:	f7ff ff6a 	bl	8000a14 <Toggle_LED>
		Delay_ms(50);
 8000b40:	2032      	movs	r0, #50	; 0x32
 8000b42:	f7ff ff35 	bl	80009b0 <Delay_ms>
	while (!nRF24_Check()) { // try indefinitely
 8000b46:	f001 fc3f 	bl	80023c8 <nRF24_Check>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f2      	beq.n	8000b36 <runRadio+0x1e>
	}

// #pragma clang diagnostic pop
    UART_SendStr("OK\r\n");
 8000b50:	4861      	ldr	r0, [pc, #388]	; (8000cd8 <runRadio+0x1c0>)
 8000b52:	f7ff ff4b 	bl	80009ec <UART_SendStr>

    // Initialize the nRF24L01 to its default state
    nRF24_Init();
 8000b56:	f001 fbea 	bl	800232e <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(CHANNEL_NUMBER);
 8000b5a:	2028      	movs	r0, #40	; 0x28
 8000b5c:	f001 fd0f 	bl	800257e <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_RATE);
 8000b60:	2008      	movs	r0, #8
 8000b62:	f001 fd90 	bl	8002686 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000b66:	200c      	movs	r0, #12
 8000b68:	f001 fce8 	bl	800253c <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f001 fd14 	bl	800259a <nRF24_SetAddrWidth>

    // Configure RX PIPE
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 8000b72:	495a      	ldr	r1, [pc, #360]	; (8000cdc <runRadio+0x1c4>)
 8000b74:	2001      	movs	r0, #1
 8000b76:	f001 fd21 	bl	80025bc <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f001 fd9c 	bl	80026bc <nRF24_SetRXPipe>

    // Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000b84:	2006      	movs	r0, #6
 8000b86:	f001 fd63 	bl	8002650 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 fc69 	bl	8002462 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000b90:	f001 fe03 	bl	800279a <nRF24_ClearIRQFlags>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f001 fc45 	bl	8002424 <nRF24_SetPowerMode>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f001 fc82 	bl	80024a4 <nRF24_SetDynamicPayloadLength>

    nRF24_SetPayloadWithAck(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fca9 	bl	80024f8 <nRF24_SetPayloadWithAck>


        // Put the transceiver to the RX mode
    nRF24_CE_H();
 8000ba6:	f7ff fef5 	bl	8000994 <nRF24_CE_H>


    // The main loop
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 fa94 	bl	80010d8 <BSP_LCD_Clear>
    /* Set Menu font */
    BSP_LCD_SetFont(&Font8);
 8000bb0:	484b      	ldr	r0, [pc, #300]	; (8000ce0 <runRadio+0x1c8>)
 8000bb2:	f000 fa75 	bl	80010a0 <BSP_LCD_SetFont>

    /* Set Text color */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000bb6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000bba:	f000 fa61 	bl	8001080 <BSP_LCD_SetTextColor>
    uint8_t nrow=0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        // Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
        //
        // This is far from best solution, but it's ok for testing purposes
        // More smart way is to use the IRQ pin :)
        //
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000bc4:	f001 fdce 	bl	8002764 <nRF24_GetStatus_RXFIFO>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d0fa      	beq.n	8000bc4 <runRadio+0xac>
            // Get a payload from the transceiver
            pipe = nRF24_ReadPayloadDpl(nRF24_payload, &payload_length);
 8000bce:	4945      	ldr	r1, [pc, #276]	; (8000ce4 <runRadio+0x1cc>)
 8000bd0:	4845      	ldr	r0, [pc, #276]	; (8000ce8 <runRadio+0x1d0>)
 8000bd2:	f001 fe53 	bl	800287c <nRF24_ReadPayloadDpl>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b44      	ldr	r3, [pc, #272]	; (8000cec <runRadio+0x1d4>)
 8000bdc:	701a      	strb	r2, [r3, #0]
            if(payload_length > 0) {
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <runRadio+0x1cc>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d006      	beq.n	8000bf4 <runRadio+0xdc>
                nRF24_WriteAckPayload(pipe, "aCk PaYlOaD",11);
 8000be6:	4b41      	ldr	r3, [pc, #260]	; (8000cec <runRadio+0x1d4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	220b      	movs	r2, #11
 8000bec:	4940      	ldr	r1, [pc, #256]	; (8000cf0 <runRadio+0x1d8>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fe53 	bl	800289a <nRF24_WriteAckPayload>
            }

            // Clear all pending IRQ flags
            nRF24_ClearIRQFlags();
 8000bf4:	f001 fdd1 	bl	800279a <nRF24_ClearIRQFlags>

            // Print a payload contents to UART
            UART_SendStr("RCV PIPE#");
 8000bf8:	483e      	ldr	r0, [pc, #248]	; (8000cf4 <runRadio+0x1dc>)
 8000bfa:	f7ff fef7 	bl	80009ec <UART_SendStr>
            UART_SendInt(pipe);
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <runRadio+0x1d4>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff3e 	bl	8000a84 <UART_SendInt>
            UART_SendStr(" PAYLOAD:>");
 8000c08:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <runRadio+0x1e0>)
 8000c0a:	f7ff feef 	bl	80009ec <UART_SendStr>
            Toggle_LED();
 8000c0e:	f7ff ff01 	bl	8000a14 <Toggle_LED>
            UART_SendBufHex((char *) nRF24_payload, payload_length);
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <runRadio+0x1cc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4833      	ldr	r0, [pc, #204]	; (8000ce8 <runRadio+0x1d0>)
 8000c1c:	f7ff ff04 	bl	8000a28 <UART_SendBufHex>
            UART_SendStr("<\r\n");
 8000c20:	4836      	ldr	r0, [pc, #216]	; (8000cfc <runRadio+0x1e4>)
 8000c22:	f7ff fee3 	bl	80009ec <UART_SendStr>

            uint8_t *buf=nRF24_payload;
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <runRadio+0x1d0>)
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t str[64]={0};
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	223c      	movs	r2, #60	; 0x3c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fe72 	bl	8004920 <memset>
            for (i = 0; i < payload_length; i++) {
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <runRadio+0x1e8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e026      	b.n	8000c92 <runRadio+0x17a>
                uint8_t ch = *buf++;
 8000c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	64ba      	str	r2, [r7, #72]	; 0x48
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                str[2*i  ]=HEX_CHARS[(ch >> 4) % 0x10];
 8000c50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <runRadio+0x1e8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <runRadio+0x1ec>)
 8000c62:	5c52      	ldrb	r2, [r2, r1]
 8000c64:	3350      	adds	r3, #80	; 0x50
 8000c66:	443b      	add	r3, r7
 8000c68:	f803 2c4c 	strb.w	r2, [r3, #-76]
                str[2*i+1]=HEX_CHARS[(ch & 0x0f) % 0x10];
 8000c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c70:	f003 020f 	and.w	r2, r3, #15
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <runRadio+0x1e8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4921      	ldr	r1, [pc, #132]	; (8000d04 <runRadio+0x1ec>)
 8000c7e:	5c8a      	ldrb	r2, [r1, r2]
 8000c80:	3350      	adds	r3, #80	; 0x50
 8000c82:	443b      	add	r3, r7
 8000c84:	f803 2c4c 	strb.w	r2, [r3, #-76]
            for (i = 0; i < payload_length; i++) {
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <runRadio+0x1e8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <runRadio+0x1e8>)
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <runRadio+0x1cc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <runRadio+0x1e8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8d1      	bhi.n	8000c44 <runRadio+0x12c>
            }

            /* Display message */
            BSP_LCD_DisplayStringAtLine(nrow++, (uint8_t*)str);
 8000ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	1d3a      	adds	r2, r7, #4
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fafd 	bl	80012b0 <BSP_LCD_DisplayStringAtLine>
            if (nrow>20) {
 8000cb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cba:	2b14      	cmp	r3, #20
 8000cbc:	d982      	bls.n	8000bc4 <runRadio+0xac>
            	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 fa0a 	bl	80010d8 <BSP_LCD_Clear>
            	nrow=0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000cca:	e77b      	b.n	8000bc4 <runRadio+0xac>
 8000ccc:	0800498c 	.word	0x0800498c
 8000cd0:	080049b0 	.word	0x080049b0
 8000cd4:	080049c4 	.word	0x080049c4
 8000cd8:	080049cc 	.word	0x080049cc
 8000cdc:	08004a04 	.word	0x08004a04
 8000ce0:	20000014 	.word	0x20000014
 8000ce4:	2000014c 	.word	0x2000014c
 8000ce8:	20000124 	.word	0x20000124
 8000cec:	20000144 	.word	0x20000144
 8000cf0:	080049d4 	.word	0x080049d4
 8000cf4:	080049e0 	.word	0x080049e0
 8000cf8:	080049ec 	.word	0x080049ec
 8000cfc:	080049f8 	.word	0x080049f8
 8000d00:	20000148 	.word	0x20000148
 8000d04:	08004978 	.word	0x08004978

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f001 ff32 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <HAL_SPI_MspInit+0xc4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d14b      	bne.n	8000e12 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_SPI_MspInit+0xc8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <HAL_SPI_MspInit+0xcc>)
 8000dec:	f001 ff22 	bl	8002c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000df0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e02:	2306      	movs	r3, #6
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_SPI_MspInit+0xd0>)
 8000e0e:	f001 ff11 	bl	8002c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40003c00 	.word	0x40003c00
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800

08000e2c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_SPI_MspDeInit+0x3c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10f      	bne.n	8000e5e <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_SPI_MspDeInit+0x40>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_SPI_MspDeInit+0x40>)
 8000e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <HAL_SPI_MspDeInit+0x44>)
 8000e50:	f002 f874 	bl	8002f3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 8000e54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_SPI_MspDeInit+0x48>)
 8000e5a:	f002 f86f 	bl	8002f3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40003c00 	.word	0x40003c00
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_UART_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_UART_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_UART_MspInit+0x8c>)
 8000eee:	f001 fea1 	bl	8002c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f001 fd14 	bl	8002988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f002 f917 	bl	800319c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd3 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f003 fc83 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fa8b 	bl	80004ec <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08006c64 	.word	0x08006c64
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000fe8:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000fec:	200007a4 	.word	0x200007a4

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <BSP_LCD_Init+0x48>)
 8001000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001004:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <BSP_LCD_Init+0x48>)
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <BSP_LCD_Init+0x4c>)
 800100a:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <BSP_LCD_Init+0x48>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
  
  lcd_drv = &st7735_drv;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <BSP_LCD_Init+0x50>)
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <BSP_LCD_Init+0x54>)
 8001016:	601a      	str	r2, [r3, #0]
  
  /* LCD Init */   
  lcd_drv->Init();
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <BSP_LCD_Init+0x50>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4798      	blx	r3
  
  /* Clear the LCD screen */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001020:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001024:	f000 f858 	bl	80010d8 <BSP_LCD_Clear>
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <BSP_LCD_Init+0x58>)
 800102a:	f000 f839 	bl	80010a0 <BSP_LCD_SetFont>
  
  ret = LCD_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000150 	.word	0x20000150
 8001040:	20000004 	.word	0x20000004
 8001044:	2000015c 	.word	0x2000015c
 8001048:	2000001c 	.word	0x2000001c
 800104c:	20000014 	.word	0x20000014

08001050 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <BSP_LCD_GetXSize+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000015c 	.word	0x2000015c

08001068 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <BSP_LCD_GetYSize+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4798      	blx	r3
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000015c 	.word	0x2000015c

08001080 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <BSP_LCD_SetTextColor+0x1c>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000150 	.word	0x20000150

080010a0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <BSP_LCD_SetFont+0x1c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6093      	str	r3, [r2, #8]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000150 	.word	0x20000150

080010c0 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <BSP_LCD_GetFont+0x14>)
 80010c6:	689b      	ldr	r3, [r3, #8]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000150 	.word	0x20000150

080010d8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <BSP_LCD_Clear+0x64>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <BSP_LCD_Clear+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e00d      	b.n	8001114 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	b29c      	uxth	r4, r3
 80010fc:	f7ff ffa8 	bl	8001050 <BSP_LCD_GetXSize>
 8001100:	4603      	mov	r3, r0
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	4621      	mov	r1, r4
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f905 	bl	8001318 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	f7ff ffa8 	bl	8001068 <BSP_LCD_GetYSize>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4293      	cmp	r3, r2
 800111e:	d3eb      	bcc.n	80010f8 <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <BSP_LCD_Clear+0x64>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <BSP_LCD_Clear+0x64>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffa7 	bl	8001080 <BSP_LCD_SetTextColor>
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	20000150 	.word	0x20000150

08001140 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	80bb      	strh	r3, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <BSP_LCD_DisplayChar+0x50>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <BSP_LCD_DisplayChar+0x50>)
 800115e:	6889      	ldr	r1, [r1, #8]
 8001160:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001162:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <BSP_LCD_DisplayChar+0x50>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	3307      	adds	r3, #7
 800116e:	2b00      	cmp	r3, #0
 8001170:	da00      	bge.n	8001174 <BSP_LCD_DisplayChar+0x34>
 8001172:	3307      	adds	r3, #7
 8001174:	10db      	asrs	r3, r3, #3
 8001176:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800117a:	441a      	add	r2, r3
 800117c:	88b9      	ldrh	r1, [r7, #4]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f971 	bl	8001468 <DrawChar>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000150 	.word	0x20000150

08001194 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	460b      	mov	r3, r1
 80011a4:	81bb      	strh	r3, [r7, #12]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80011aa:	2301      	movs	r3, #1
 80011ac:	83fb      	strh	r3, [r7, #30]
 80011ae:	2300      	movs	r3, #0
 80011b0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80011be:	e002      	b.n	80011c6 <BSP_LCD_DisplayStringAt+0x32>
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	617a      	str	r2, [r7, #20]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f6      	bne.n	80011c0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80011d2:	f7ff ff3d 	bl	8001050 <BSP_LCD_GetXSize>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	889b      	ldrh	r3, [r3, #4]
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d014      	beq.n	8001214 <BSP_LCD_DisplayStringAt+0x80>
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	dc23      	bgt.n	8001236 <BSP_LCD_DisplayStringAt+0xa2>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <BSP_LCD_DisplayStringAt+0x64>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d011      	beq.n	800121a <BSP_LCD_DisplayStringAt+0x86>
 80011f6:	e01e      	b.n	8001236 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 8001200:	6892      	ldr	r2, [r2, #8]
 8001202:	8892      	ldrh	r2, [r2, #4]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	085b      	lsrs	r3, r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	4413      	add	r3, r2
 8001210:	83fb      	strh	r3, [r7, #30]
      break;
 8001212:	e013      	b.n	800123c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	83fb      	strh	r3, [r7, #30]
      break;
 8001218:	e010      	b.n	800123c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	fb12 f303 	smulbb	r3, r2, r3
 800122c:	b29a      	uxth	r2, r3
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	83fb      	strh	r3, [r7, #30]
      break;
 8001234:	e002      	b.n	800123c <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	83fb      	strh	r3, [r7, #30]
      break;
 800123a:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800123c:	e012      	b.n	8001264 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	89b9      	ldrh	r1, [r7, #12]
 8001244:	8bfb      	ldrh	r3, [r7, #30]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff7a 	bl	8001140 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	889a      	ldrh	r2, [r3, #4]
 8001252:	8bfb      	ldrh	r3, [r7, #30]
 8001254:	4413      	add	r3, r2
 8001256:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3301      	adds	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
    i++;
 800125e:	8bbb      	ldrh	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2dc      	uxtb	r4, r3
 8001272:	f7ff feed 	bl	8001050 <BSP_LCD_GetXSize>
 8001276:	4601      	mov	r1, r0
 8001278:	8bbb      	ldrh	r3, [r7, #28]
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 800127c:	6892      	ldr	r2, [r2, #8]
 800127e:	8892      	ldrh	r2, [r2, #4]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <BSP_LCD_DisplayStringAt+0x118>)
 800128a:	6892      	ldr	r2, [r2, #8]
 800128c:	8892      	ldrh	r2, [r2, #4]
 800128e:	4293      	cmp	r3, r2
 8001290:	bf2c      	ite	cs
 8001292:	2301      	movcs	r3, #1
 8001294:	2300      	movcc	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4023      	ands	r3, r4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ce      	bne.n	800123e <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000150 	.word	0x20000150

080012b0 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0...5: if the Current fonts is Font24
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80012bc:	f7ff ff00 	bl	80010c0 <BSP_LCD_GetFont>
 80012c0:	4603      	mov	r3, r0
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	fb12 f303 	smulbb	r3, r2, r3
 80012ca:	b299      	uxth	r1, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff5f 	bl	8001194 <BSP_LCD_DisplayStringAt>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <BSP_LCD_DrawPixel+0x34>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <BSP_LCD_DrawPixel+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	88b9      	ldrh	r1, [r7, #4]
 8001306:	88f8      	ldrh	r0, [r7, #6]
 8001308:	4798      	blx	r3
  }
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000015c 	.word	0x2000015c

08001318 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	460b      	mov	r3, r1
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <BSP_LCD_DrawHLine+0x6c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00a      	beq.n	800134e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <BSP_LCD_DrawHLine+0x6c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a1c      	ldr	r4, [r3, #32]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <BSP_LCD_DrawHLine+0x70>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b298      	uxth	r0, r3
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	88ba      	ldrh	r2, [r7, #4]
 8001348:	88f9      	ldrh	r1, [r7, #6]
 800134a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800134c:	e015      	b.n	800137a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e00e      	b.n	8001372 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	b29a      	uxth	r2, r3
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <BSP_LCD_DrawHLine+0x70>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	b292      	uxth	r2, r2
 8001364:	88b9      	ldrh	r1, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffba 	bl	80012e0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3ec      	bcc.n	8001354 <BSP_LCD_DrawHLine+0x3c>
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	2000015c 	.word	0x2000015c
 8001388:	20000150 	.word	0x20000150

0800138c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	603a      	str	r2, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	460b      	mov	r3, r1
 800139a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3312      	adds	r3, #18
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3313      	adds	r3, #19
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	441a      	add	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3314      	adds	r3, #20
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	441a      	add	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3315      	adds	r3, #21
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	061b      	lsls	r3, r3, #24
 80013c8:	4413      	add	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3316      	adds	r3, #22
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3317      	adds	r3, #23
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	441a      	add	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3318      	adds	r3, #24
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	441a      	add	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3319      	adds	r3, #25
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  if(lcd_drv == &st7735_drv)
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <BSP_LCD_DrawBitmap+0xd4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <BSP_LCD_DrawBitmap+0xd8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10a      	bne.n	8001414 <BSP_LCD_DrawBitmap+0x88>
  {
    Ypos = BSP_LCD_GetYSize() - Ypos - height;
 80013fe:	f7ff fe33 	bl	8001068 <BSP_LCD_GetYSize>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	b29b      	uxth	r3, r3
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	80bb      	strh	r3, [r7, #4]
  }
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	88b9      	ldrh	r1, [r7, #4]
 800141e:	88f8      	ldrh	r0, [r7, #6]
 8001420:	f000 f914 	bl	800164c <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <BSP_LCD_DrawBitmap+0xd4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <BSP_LCD_DrawBitmap+0xb0>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <BSP_LCD_DrawBitmap+0xd4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	88b9      	ldrh	r1, [r7, #4]
 8001436:	88f8      	ldrh	r0, [r7, #6]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800143c:	f7ff fe08 	bl	8001050 <BSP_LCD_GetXSize>
 8001440:	4603      	mov	r3, r0
 8001442:	b29c      	uxth	r4, r3
 8001444:	f7ff fe10 	bl	8001068 <BSP_LCD_GetYSize>
 8001448:	4603      	mov	r3, r0
 800144a:	b29b      	uxth	r3, r3
 800144c:	4622      	mov	r2, r4
 800144e:	2100      	movs	r1, #0
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f8fb 	bl	800164c <SetDisplayWindow>
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	2000015c 	.word	0x2000015c
 8001464:	2000001c 	.word	0x2000001c

08001468 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	603a      	str	r2, [r7, #0]
 8001472:	80fb      	strh	r3, [r7, #6]
 8001474:	460b      	mov	r3, r1
 8001476:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	82fb      	strh	r3, [r7, #22]
 8001488:	2300      	movs	r3, #0
 800148a:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8001498:	4b63      	ldr	r3, [pc, #396]	; (8001628 <DrawChar+0x1c0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80014a0:	4b61      	ldr	r3, [pc, #388]	; (8001628 <DrawChar+0x1c0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	889b      	ldrh	r3, [r3, #4]
 80014a6:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80014a8:	8afa      	ldrh	r2, [r7, #22]
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	fb12 f303 	smulbb	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	331b      	adds	r3, #27
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <DrawChar+0x1c4>)
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	8aba      	ldrh	r2, [r7, #20]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	331b      	adds	r3, #27
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	141a      	asrs	r2, r3, #16
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <DrawChar+0x1c8>)
 80014ce:	b292      	uxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <DrawChar+0x1cc>)
 80014d4:	2236      	movs	r2, #54	; 0x36
 80014d6:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80014d8:	4a57      	ldr	r2, [pc, #348]	; (8001638 <DrawChar+0x1d0>)
 80014da:	8abb      	ldrh	r3, [r7, #20]
 80014dc:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	141a      	asrs	r2, r3, #16
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <DrawChar+0x1d4>)
 80014e4:	b292      	uxth	r2, r2
 80014e6:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80014e8:	4a55      	ldr	r2, [pc, #340]	; (8001640 <DrawChar+0x1d8>)
 80014ea:	8afb      	ldrh	r3, [r7, #22]
 80014ec:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80014ee:	8afb      	ldrh	r3, [r7, #22]
 80014f0:	141a      	asrs	r2, r3, #16
 80014f2:	4b54      	ldr	r3, [pc, #336]	; (8001644 <DrawChar+0x1dc>)
 80014f4:	b292      	uxth	r2, r2
 80014f6:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 80014f8:	8abb      	ldrh	r3, [r7, #20]
 80014fa:	3307      	adds	r3, #7
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da00      	bge.n	8001502 <DrawChar+0x9a>
 8001500:	3307      	adds	r3, #7
 8001502:	10db      	asrs	r3, r3, #3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	b2da      	uxtb	r2, r3
 800150a:	8abb      	ldrh	r3, [r7, #20]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
 8001516:	e078      	b.n	800160a <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8001518:	8abb      	ldrh	r3, [r7, #20]
 800151a:	3307      	adds	r3, #7
 800151c:	2b00      	cmp	r3, #0
 800151e:	da00      	bge.n	8001522 <DrawChar+0xba>
 8001520:	3307      	adds	r3, #7
 8001522:	10db      	asrs	r3, r3, #3
 8001524:	461a      	mov	r2, r3
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8001532:	8abb      	ldrh	r3, [r7, #20]
 8001534:	3b11      	subs	r3, #17
 8001536:	2b07      	cmp	r3, #7
 8001538:	d80c      	bhi.n	8001554 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4313      	orrs	r3, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	3202      	adds	r2, #2
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	4313      	orrs	r3, r2
 8001552:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8001554:	8abb      	ldrh	r3, [r7, #20]
 8001556:	3b09      	subs	r3, #9
 8001558:	2b07      	cmp	r3, #7
 800155a:	d807      	bhi.n	800156c <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	3201      	adds	r2, #1
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 800156c:	8abb      	ldrh	r3, [r7, #20]
 800156e:	3b01      	subs	r3, #1
 8001570:	2b07      	cmp	r3, #7
 8001572:	d802      	bhi.n	800157a <DrawChar+0x112>
    {
      line =  pchar[0];
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
 800157e:	e03d      	b.n	80015fc <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8001580:	8afa      	ldrh	r2, [r7, #22]
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	8aba      	ldrh	r2, [r7, #20]
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	4413      	add	r3, r2
 8001592:	331b      	adds	r3, #27
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8001598:	8aba      	ldrh	r2, [r7, #20]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	4413      	add	r3, r2
 80015a2:	3b01      	subs	r3, #1
 80015a4:	2201      	movs	r2, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d010      	beq.n	80015d6 <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <DrawChar+0x1c0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <DrawChar+0x1e0>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	460a      	mov	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <DrawChar+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0a1a      	lsrs	r2, r3, #8
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2d1      	uxtb	r1, r2
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <DrawChar+0x1e0>)
 80015d2:	54d1      	strb	r1, [r2, r3]
 80015d4:	e00f      	b.n	80015f6 <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <DrawChar+0x1c0>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	b2d9      	uxtb	r1, r3
 80015dc:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <DrawChar+0x1e0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4413      	add	r3, r2
 80015e2:	460a      	mov	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <DrawChar+0x1c0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0a1a      	lsrs	r2, r3, #8
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2d1      	uxtb	r1, r2
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <DrawChar+0x1e0>)
 80015f4:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	3301      	adds	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	8abb      	ldrh	r3, [r7, #20]
 80015fe:	6a3a      	ldr	r2, [r7, #32]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3bd      	bcc.n	8001580 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3301      	adds	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	8afb      	ldrh	r3, [r7, #22]
 800160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160e:	429a      	cmp	r2, r3
 8001610:	d382      	bcc.n	8001518 <DrawChar+0xb0>
      } 
    }
  }
  
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8001612:	88b9      	ldrh	r1, [r7, #4]
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <DrawChar+0x1e0>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff feb7 	bl	800138c <BSP_LCD_DrawBitmap>
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000150 	.word	0x20000150
 800162c:	20000162 	.word	0x20000162
 8001630:	20000164 	.word	0x20000164
 8001634:	2000016a 	.word	0x2000016a
 8001638:	20000172 	.word	0x20000172
 800163c:	20000174 	.word	0x20000174
 8001640:	20000176 	.word	0x20000176
 8001644:	20000178 	.word	0x20000178
 8001648:	20000160 	.word	0x20000160

0800164c <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4604      	mov	r4, r0
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	4603      	mov	r3, r0
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <SetDisplayWindow+0x40>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SetDisplayWindow+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69dc      	ldr	r4, [r3, #28]
 800167a:	883b      	ldrh	r3, [r7, #0]
 800167c:	887a      	ldrh	r2, [r7, #2]
 800167e:	88b9      	ldrh	r1, [r7, #4]
 8001680:	88f8      	ldrh	r0, [r7, #6]
 8001682:	47a0      	blx	r4
  }  
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	2000015c 	.word	0x2000015c

08001690 <st7735_Init>:
  * @brief  Initialize the ST7735 LCD Component.
  * @param  None
  * @retval None
  */
void st7735_Init(void)
{    
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
  
  /* Initialize ST7735 low level bus layer -----------------------------------*/
  LCD_IO_Init();
 800169a:	f000 fca1 	bl	8001fe0 <LCD_IO_Init>
  /* Out of sleep mode, 0 args, no delay */
  st7735_WriteReg(LCD_REG_17, 0x00); 
 800169e:	2100      	movs	r1, #0
 80016a0:	2011      	movs	r0, #17
 80016a2:	f000 f9e6 	bl	8001a72 <st7735_WriteReg>
  /* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
  LCD_IO_WriteReg(LCD_REG_177);
 80016a6:	20b1      	movs	r0, #177	; 0xb1
 80016a8:	f000 fce2 	bl	8002070 <LCD_IO_WriteReg>
  data = 0x01;
 80016ac:	2301      	movs	r3, #1
 80016ae:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fcfd 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = 0x2C;
 80016ba:	232c      	movs	r3, #44	; 0x2c
 80016bc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fcf6 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = 0x2D;
 80016c8:	232d      	movs	r3, #45	; 0x2d
 80016ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	2101      	movs	r1, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fcef 	bl	80020b4 <LCD_IO_WriteMultipleData>
  /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */    
  st7735_WriteReg(LCD_REG_178, 0x01);
 80016d6:	2101      	movs	r1, #1
 80016d8:	20b2      	movs	r0, #178	; 0xb2
 80016da:	f000 f9ca 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2C);
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	20b2      	movs	r0, #178	; 0xb2
 80016e2:	f000 f9c6 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2D);
 80016e6:	212d      	movs	r1, #45	; 0x2d
 80016e8:	20b2      	movs	r0, #178	; 0xb2
 80016ea:	f000 f9c2 	bl	8001a72 <st7735_WriteReg>
  /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */ 
  st7735_WriteReg(LCD_REG_179, 0x01);
 80016ee:	2101      	movs	r1, #1
 80016f0:	20b3      	movs	r0, #179	; 0xb3
 80016f2:	f000 f9be 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	20b3      	movs	r0, #179	; 0xb3
 80016fa:	f000 f9ba 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 80016fe:	212d      	movs	r1, #45	; 0x2d
 8001700:	20b3      	movs	r0, #179	; 0xb3
 8001702:	f000 f9b6 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x01);
 8001706:	2101      	movs	r1, #1
 8001708:	20b3      	movs	r0, #179	; 0xb3
 800170a:	f000 f9b2 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	20b3      	movs	r0, #179	; 0xb3
 8001712:	f000 f9ae 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 8001716:	212d      	movs	r1, #45	; 0x2d
 8001718:	20b3      	movs	r0, #179	; 0xb3
 800171a:	f000 f9aa 	bl	8001a72 <st7735_WriteReg>
  /* Display inversion ctrl, 1 arg, no delay: No inversion */
  st7735_WriteReg(LCD_REG_180, 0x07);
 800171e:	2107      	movs	r1, #7
 8001720:	20b4      	movs	r0, #180	; 0xb4
 8001722:	f000 f9a6 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 3 args, no delay: -4.6V , AUTO mode */
  st7735_WriteReg(LCD_REG_192, 0xA2);
 8001726:	21a2      	movs	r1, #162	; 0xa2
 8001728:	20c0      	movs	r0, #192	; 0xc0
 800172a:	f000 f9a2 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x02);
 800172e:	2102      	movs	r1, #2
 8001730:	20c0      	movs	r0, #192	; 0xc0
 8001732:	f000 f99e 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x84);
 8001736:	2184      	movs	r1, #132	; 0x84
 8001738:	20c0      	movs	r0, #192	; 0xc0
 800173a:	f000 f99a 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
  st7735_WriteReg(LCD_REG_193, 0xC5);
 800173e:	21c5      	movs	r1, #197	; 0xc5
 8001740:	20c1      	movs	r0, #193	; 0xc1
 8001742:	f000 f996 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 2 args, no delay: Opamp current small, Boost frequency */ 
  st7735_WriteReg(LCD_REG_194, 0x0A);
 8001746:	210a      	movs	r1, #10
 8001748:	20c2      	movs	r0, #194	; 0xc2
 800174a:	f000 f992 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_194, 0x00);
 800174e:	2100      	movs	r1, #0
 8001750:	20c2      	movs	r0, #194	; 0xc2
 8001752:	f000 f98e 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */  
  st7735_WriteReg(LCD_REG_195, 0x8A);
 8001756:	218a      	movs	r1, #138	; 0x8a
 8001758:	20c3      	movs	r0, #195	; 0xc3
 800175a:	f000 f98a 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_195, 0x2A);
 800175e:	212a      	movs	r1, #42	; 0x2a
 8001760:	20c3      	movs	r0, #195	; 0xc3
 8001762:	f000 f986 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 2 args, no delay */
  st7735_WriteReg(LCD_REG_196, 0x8A);
 8001766:	218a      	movs	r1, #138	; 0x8a
 8001768:	20c4      	movs	r0, #196	; 0xc4
 800176a:	f000 f982 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_196, 0xEE);
 800176e:	21ee      	movs	r1, #238	; 0xee
 8001770:	20c4      	movs	r0, #196	; 0xc4
 8001772:	f000 f97e 	bl	8001a72 <st7735_WriteReg>
  /* Power control, 1 arg, no delay */
  st7735_WriteReg(LCD_REG_197, 0x0E);
 8001776:	210e      	movs	r1, #14
 8001778:	20c5      	movs	r0, #197	; 0xc5
 800177a:	f000 f97a 	bl	8001a72 <st7735_WriteReg>
  /* Don't invert display, no args, no delay */
  LCD_IO_WriteReg(LCD_REG_32);
 800177e:	2020      	movs	r0, #32
 8001780:	f000 fc76 	bl	8002070 <LCD_IO_WriteReg>
  /* Set color mode, 1 arg, no delay: 16-bit color */
  st7735_WriteReg(LCD_REG_58, 0x05);
 8001784:	2105      	movs	r1, #5
 8001786:	203a      	movs	r0, #58	; 0x3a
 8001788:	f000 f973 	bl	8001a72 <st7735_WriteReg>
  /* Column addr set, 4 args, no delay: XSTART = 0, XEND = 127 */
  LCD_IO_WriteReg(LCD_REG_42);
 800178c:	202a      	movs	r0, #42	; 0x2a
 800178e:	f000 fc6f 	bl	8002070 <LCD_IO_WriteReg>
  data = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	2101      	movs	r1, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fc8a 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fc85 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	2101      	movs	r1, #1
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fc80 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = 0x7F;
 80017b4:	237f      	movs	r3, #127	; 0x7f
 80017b6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	2101      	movs	r1, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fc79 	bl	80020b4 <LCD_IO_WriteMultipleData>
  /* Row addr set, 4 args, no delay: YSTART = 0, YEND = 159 */
  LCD_IO_WriteReg(LCD_REG_43);
 80017c2:	202b      	movs	r0, #43	; 0x2b
 80017c4:	f000 fc54 	bl	8002070 <LCD_IO_WriteReg>
  data = 0x00;
 80017c8:	2300      	movs	r3, #0
 80017ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	2101      	movs	r1, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fc6f 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fc6a 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	2101      	movs	r1, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc65 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = 0x9F;
 80017ea:	239f      	movs	r3, #159	; 0x9f
 80017ec:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	2101      	movs	r1, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fc5e 	bl	80020b4 <LCD_IO_WriteMultipleData>
  /* Magical unicorn dust, 16 args, no delay */
  st7735_WriteReg(LCD_REG_224, 0x02); 
 80017f8:	2102      	movs	r1, #2
 80017fa:	20e0      	movs	r0, #224	; 0xe0
 80017fc:	f000 f939 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x1c);  
 8001800:	211c      	movs	r1, #28
 8001802:	20e0      	movs	r0, #224	; 0xe0
 8001804:	f000 f935 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x07); 
 8001808:	2107      	movs	r1, #7
 800180a:	20e0      	movs	r0, #224	; 0xe0
 800180c:	f000 f931 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x12);
 8001810:	2112      	movs	r1, #18
 8001812:	20e0      	movs	r0, #224	; 0xe0
 8001814:	f000 f92d 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x37);  
 8001818:	2137      	movs	r1, #55	; 0x37
 800181a:	20e0      	movs	r0, #224	; 0xe0
 800181c:	f000 f929 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x32);  
 8001820:	2132      	movs	r1, #50	; 0x32
 8001822:	20e0      	movs	r0, #224	; 0xe0
 8001824:	f000 f925 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);  
 8001828:	2129      	movs	r1, #41	; 0x29
 800182a:	20e0      	movs	r0, #224	; 0xe0
 800182c:	f000 f921 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2d);
 8001830:	212d      	movs	r1, #45	; 0x2d
 8001832:	20e0      	movs	r0, #224	; 0xe0
 8001834:	f000 f91d 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);  
 8001838:	2129      	movs	r1, #41	; 0x29
 800183a:	20e0      	movs	r0, #224	; 0xe0
 800183c:	f000 f919 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x25);  
 8001840:	2125      	movs	r1, #37	; 0x25
 8001842:	20e0      	movs	r0, #224	; 0xe0
 8001844:	f000 f915 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2B);  
 8001848:	212b      	movs	r1, #43	; 0x2b
 800184a:	20e0      	movs	r0, #224	; 0xe0
 800184c:	f000 f911 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x39);  
 8001850:	2139      	movs	r1, #57	; 0x39
 8001852:	20e0      	movs	r0, #224	; 0xe0
 8001854:	f000 f90d 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x00);  
 8001858:	2100      	movs	r1, #0
 800185a:	20e0      	movs	r0, #224	; 0xe0
 800185c:	f000 f909 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x01);  
 8001860:	2101      	movs	r1, #1
 8001862:	20e0      	movs	r0, #224	; 0xe0
 8001864:	f000 f905 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x03);  
 8001868:	2103      	movs	r1, #3
 800186a:	20e0      	movs	r0, #224	; 0xe0
 800186c:	f000 f901 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x10);
 8001870:	2110      	movs	r1, #16
 8001872:	20e0      	movs	r0, #224	; 0xe0
 8001874:	f000 f8fd 	bl	8001a72 <st7735_WriteReg>
  /* Sparkles and rainbows, 16 args, no delay */
  st7735_WriteReg(LCD_REG_225, 0x03);
 8001878:	2103      	movs	r1, #3
 800187a:	20e1      	movs	r0, #225	; 0xe1
 800187c:	f000 f8f9 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x1d);  
 8001880:	211d      	movs	r1, #29
 8001882:	20e1      	movs	r0, #225	; 0xe1
 8001884:	f000 f8f5 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x07);  
 8001888:	2107      	movs	r1, #7
 800188a:	20e1      	movs	r0, #225	; 0xe1
 800188c:	f000 f8f1 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x06);
 8001890:	2106      	movs	r1, #6
 8001892:	20e1      	movs	r0, #225	; 0xe1
 8001894:	f000 f8ed 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 8001898:	212e      	movs	r1, #46	; 0x2e
 800189a:	20e1      	movs	r0, #225	; 0xe1
 800189c:	f000 f8e9 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2C);  
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	20e1      	movs	r0, #225	; 0xe1
 80018a4:	f000 f8e5 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x29);  
 80018a8:	2129      	movs	r1, #41	; 0x29
 80018aa:	20e1      	movs	r0, #225	; 0xe1
 80018ac:	f000 f8e1 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2D);
 80018b0:	212d      	movs	r1, #45	; 0x2d
 80018b2:	20e1      	movs	r0, #225	; 0xe1
 80018b4:	f000 f8dd 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 80018b8:	212e      	movs	r1, #46	; 0x2e
 80018ba:	20e1      	movs	r0, #225	; 0xe1
 80018bc:	f000 f8d9 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 80018c0:	212e      	movs	r1, #46	; 0x2e
 80018c2:	20e1      	movs	r0, #225	; 0xe1
 80018c4:	f000 f8d5 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x37);  
 80018c8:	2137      	movs	r1, #55	; 0x37
 80018ca:	20e1      	movs	r0, #225	; 0xe1
 80018cc:	f000 f8d1 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x3F);  
 80018d0:	213f      	movs	r1, #63	; 0x3f
 80018d2:	20e1      	movs	r0, #225	; 0xe1
 80018d4:	f000 f8cd 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);  
 80018d8:	2100      	movs	r1, #0
 80018da:	20e1      	movs	r0, #225	; 0xe1
 80018dc:	f000 f8c9 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);  
 80018e0:	2100      	movs	r1, #0
 80018e2:	20e1      	movs	r0, #225	; 0xe1
 80018e4:	f000 f8c5 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x02);  
 80018e8:	2102      	movs	r1, #2
 80018ea:	20e1      	movs	r0, #225	; 0xe1
 80018ec:	f000 f8c1 	bl	8001a72 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x10);
 80018f0:	2110      	movs	r1, #16
 80018f2:	20e1      	movs	r0, #225	; 0xe1
 80018f4:	f000 f8bd 	bl	8001a72 <st7735_WriteReg>
  /* Normal display on, no args, no delay */
  st7735_WriteReg(LCD_REG_19, 0x00);
 80018f8:	2100      	movs	r1, #0
 80018fa:	2013      	movs	r0, #19
 80018fc:	f000 f8b9 	bl	8001a72 <st7735_WriteReg>
  /* Main screen turn on, no delay */
  st7735_WriteReg(LCD_REG_41, 0x00);
 8001900:	2100      	movs	r1, #0
 8001902:	2029      	movs	r0, #41	; 0x29
 8001904:	f000 f8b5 	bl	8001a72 <st7735_WriteReg>
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 8001908:	21c0      	movs	r1, #192	; 0xc0
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f000 f8b1 	bl	8001a72 <st7735_WriteReg>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <st7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOn(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8001922:	2013      	movs	r0, #19
 8001924:	f000 fba4 	bl	8002070 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001928:	200a      	movs	r0, #10
 800192a:	f000 fc27 	bl	800217c <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_41);
 800192e:	2029      	movs	r0, #41	; 0x29
 8001930:	f000 fb9e 	bl	8002070 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f000 fc21 	bl	800217c <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 800193a:	2036      	movs	r0, #54	; 0x36
 800193c:	f000 fb98 	bl	8002070 <LCD_IO_WriteReg>
  data = 0xC0;
 8001940:	23c0      	movs	r3, #192	; 0xc0
 8001942:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fbb3 	bl	80020b4 <LCD_IO_WriteMultipleData>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <st7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOff(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8001960:	2013      	movs	r0, #19
 8001962:	f000 fb85 	bl	8002070 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f000 fc08 	bl	800217c <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_40);
 800196c:	2028      	movs	r0, #40	; 0x28
 800196e:	f000 fb7f 	bl	8002070 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001972:	200a      	movs	r0, #10
 8001974:	f000 fc02 	bl	800217c <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 8001978:	2036      	movs	r0, #54	; 0x36
 800197a:	f000 fb79 	bl	8002070 <LCD_IO_WriteReg>
  data = 0xC0;
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fb94 	bl	80020b4 <LCD_IO_WriteMultipleData>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <st7735_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void st7735_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	460a      	mov	r2, r1
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	4613      	mov	r3, r2
 80019a2:	80bb      	strh	r3, [r7, #4]
  uint8_t data = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteReg(LCD_REG_42);
 80019a8:	202a      	movs	r0, #42	; 0x2a
 80019aa:	f000 fb61 	bl	8002070 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019b8:	f107 030f 	add.w	r3, r7, #15
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fb78 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019ca:	f107 030f 	add.w	r3, r7, #15
 80019ce:	2101      	movs	r1, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb6f 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_43); 
 80019d6:	202b      	movs	r0, #43	; 0x2b
 80019d8:	f000 fb4a 	bl	8002070 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	2101      	movs	r1, #1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb61 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019f8:	f107 030f 	add.w	r3, r7, #15
 80019fc:	2101      	movs	r1, #1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fb58 	bl	80020b4 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_44);
 8001a04:	202c      	movs	r0, #44	; 0x2c
 8001a06:	f000 fb33 	bl	8002070 <LCD_IO_WriteReg>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <st7735_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void st7735_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	80bb      	strh	r3, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	807b      	strh	r3, [r7, #2]
  uint8_t data = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
  if((Xpos >= ST7735_LCD_PIXEL_WIDTH) || (Ypos >= ST7735_LCD_PIXEL_HEIGHT)) 
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a2c:	d81d      	bhi.n	8001a6a <st7735_WritePixel+0x58>
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	2b9f      	cmp	r3, #159	; 0x9f
 8001a32:	d81a      	bhi.n	8001a6a <st7735_WritePixel+0x58>
  {
    return;
  }
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 8001a34:	88ba      	ldrh	r2, [r7, #4]
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ffaa 	bl	8001994 <st7735_SetCursor>
  
  data = RGBCode >> 8;
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001a4a:	f107 030f 	add.w	r3, r7, #15
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fb2f 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = RGBCode;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001a5c:	f107 030f 	add.w	r3, r7, #15
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fb26 	bl	80020b4 <LCD_IO_WriteMultipleData>
 8001a68:	e000      	b.n	8001a6c <st7735_WritePixel+0x5a>
    return;
 8001a6a:	bf00      	nop
}  
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <st7735_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: value to write to the selected register.
  * @retval None
  */
void st7735_WriteReg(uint8_t LCDReg, uint8_t LCDRegValue)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	71bb      	strb	r3, [r7, #6]
  LCD_IO_WriteReg(LCDReg);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 faf3 	bl	8002070 <LCD_IO_WriteReg>
  LCD_IO_WriteMultipleData(&LCDRegValue, 1);
 8001a8a:	1dbb      	adds	r3, r7, #6
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fb10 	bl	80020b4 <LCD_IO_WriteMultipleData>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <st7735_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void st7735_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	803b      	strh	r3, [r7, #0]
  uint8_t data = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  LCD_IO_WriteReg(LCD_REG_42);
 8001abe:	202a      	movs	r0, #42	; 0x2a
 8001ac0:	f000 fad6 	bl	8002070 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001ace:	f107 030f 	add.w	r3, r7, #15
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 faed 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001ae0:	f107 030f 	add.w	r3, r7, #15
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fae4 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) >> 8;
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	4413      	add	r3, r2
 8001af2:	3b01      	subs	r3, #1
 8001af4:	121b      	asrs	r3, r3, #8
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001afa:	f107 030f 	add.w	r3, r7, #15
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fad7 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) & 0xFF;
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fac8 	bl	80020b4 <LCD_IO_WriteMultipleData>
  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  LCD_IO_WriteReg(LCD_REG_43);
 8001b24:	202b      	movs	r0, #43	; 0x2b
 8001b26:	f000 faa3 	bl	8002070 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b34:	f107 030f 	add.w	r3, r7, #15
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 faba 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b46:	f107 030f 	add.w	r3, r7, #15
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fab1 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) >> 8;
 8001b52:	88ba      	ldrh	r2, [r7, #4]
 8001b54:	883b      	ldrh	r3, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	121b      	asrs	r3, r3, #8
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b60:	f107 030f 	add.w	r3, r7, #15
 8001b64:	2101      	movs	r1, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 faa4 	bl	80020b4 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) & 0xFF;
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b7e:	f107 030f 	add.w	r3, r7, #15
 8001b82:	2101      	movs	r1, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fa95 	bl	80020b4 <LCD_IO_WriteMultipleData>
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
	...

08001b94 <st7735_DrawHLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	80fb      	strh	r3, [r7, #6]
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80bb      	strh	r3, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	807b      	strh	r3, [r7, #2]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 8001bb6:	88ba      	ldrh	r2, [r7, #4]
 8001bb8:	883b      	ldrh	r3, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	2b80      	cmp	r3, #128	; 0x80
 8001bbe:	dc1c      	bgt.n	8001bfa <st7735_DrawHLine+0x66>
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fee4 	bl	8001994 <st7735_SetCursor>
  
  for(counter = 0; counter < Length; counter++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e007      	b.n	8001be2 <st7735_DrawHLine+0x4e>
  {
    ArrayRGB[counter] = RGBCode;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	490b      	ldr	r1, [pc, #44]	; (8001c04 <st7735_DrawHLine+0x70>)
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	883a      	ldrh	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f2      	bhi.n	8001bd2 <st7735_DrawHLine+0x3e>
  }
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001bec:	883b      	ldrh	r3, [r7, #0]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <st7735_DrawHLine+0x70>)
 8001bf4:	f000 fa5e 	bl	80020b4 <LCD_IO_WriteMultipleData>
 8001bf8:	e000      	b.n	8001bfc <st7735_DrawHLine+0x68>
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 8001bfa:	bf00      	nop
}
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200004c8 	.word	0x200004c8

08001c08 <st7735_DrawVLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	80fb      	strh	r3, [r7, #6]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80bb      	strh	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	883b      	ldrh	r3, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	2ba0      	cmp	r3, #160	; 0xa0
 8001c32:	dc15      	bgt.n	8001c60 <st7735_DrawVLine+0x58>
  for(counter = 0; counter < Length; counter++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e00c      	b.n	8001c54 <st7735_DrawVLine+0x4c>
  {
    st7735_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	4413      	add	r3, r2
 8001c42:	b299      	uxth	r1, r3
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fee2 	bl	8001a12 <st7735_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	883a      	ldrh	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d8ed      	bhi.n	8001c3a <st7735_DrawVLine+0x32>
 8001c5e:	e000      	b.n	8001c62 <st7735_DrawVLine+0x5a>
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8001c60:	bf00      	nop
  }   
}
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <st7735_GetLcdPixelWidth>:
  * @brief  Gets the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t st7735_GetLcdPixelWidth(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_WIDTH;
 8001c6c:	2380      	movs	r3, #128	; 0x80
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <st7735_GetLcdPixelHeight>:
  * @brief  Gets the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t st7735_GetLcdPixelHeight(void)
{                          
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_HEIGHT;
 8001c7c:	23a0      	movs	r3, #160	; 0xa0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <st7735_DrawBitmap>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void st7735_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	603a      	str	r2, [r7, #0]
 8001c92:	80fb      	strh	r3, [r7, #6]
 8001c94:	460b      	mov	r3, r1
 8001c96:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3304      	adds	r3, #4
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	330a      	adds	r3, #10
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	603b      	str	r3, [r7, #0]
  
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 0, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0x40);
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	2036      	movs	r0, #54	; 0x36
 8001cee:	f7ff fec0 	bl	8001a72 <st7735_WriteReg>

  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);  
 8001cf2:	88ba      	ldrh	r2, [r7, #4]
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe4b 	bl	8001994 <st7735_SetCursor>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f000 f9d5 	bl	80020b4 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 8001d0a:	21c0      	movs	r1, #192	; 0xc0
 8001d0c:	2036      	movs	r0, #54	; 0x36
 8001d0e:	f7ff feb0 	bl	8001a72 <st7735_WriteReg>
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BSP_LED_Init+0x64>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <BSP_LED_Init+0x64>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <BSP_LED_Init+0x64>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001d42:	2320      	movs	r3, #32
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BSP_LED_Init+0x68>)
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	f107 020c 	add.w	r2, r7, #12
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 ff67 	bl	8002c34 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <BSP_LED_Init+0x68>)
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	2120      	movs	r1, #32
 8001d70:	2200      	movs	r2, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f9de 	bl	8003134 <HAL_GPIO_WritePin>
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	20000054 	.word	0x20000054

08001d88 <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a05      	ldr	r2, [pc, #20]	; (8001dac <BSP_LED_Toggle+0x24>)
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 f9e1 	bl	8003166 <HAL_GPIO_TogglePin>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000054 	.word	0x20000054

08001db0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	460a      	mov	r2, r1
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <BSP_PB_Init+0xa4>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <BSP_PB_Init+0xa4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <BSP_PB_Init+0xa4>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d112      	bne.n	8001e08 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dec:	2302      	movs	r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <BSP_PB_Init+0xa8>)
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	f107 020c 	add.w	r2, r7, #12
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 ff16 	bl	8002c34 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11d      	bne.n	8001e4a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e1c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <BSP_PB_Init+0xa8>)
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	f107 020c 	add.w	r2, r7, #12
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 ff01 	bl	8002c34 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001e32:	2328      	movs	r3, #40	; 0x28
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	210f      	movs	r1, #15
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fec3 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001e40:	2328      	movs	r3, #40	; 0x28
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 feda 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	20000058 	.word	0x20000058

08001e5c <SPIx_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8001eac:	2305      	movs	r3, #5
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4816      	ldr	r0, [pc, #88]	; (8001f10 <SPIx_MspInit+0xb4>)
 8001eb8:	f000 febc 	bl	8002c34 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4810      	ldr	r0, [pc, #64]	; (8001f10 <SPIx_MspInit+0xb4>)
 8001ed0:	f000 feb0 	bl	8002c34 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480b      	ldr	r0, [pc, #44]	; (8001f10 <SPIx_MspInit+0xb4>)
 8001ee4:	f000 fea6 	bl	8002c34 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SPIx_MspInit+0xb0>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <SPIx_Init>:

/**
  * @brief  Initializes SPI HAL.
  */
static void SPIx_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001f18:	4819      	ldr	r0, [pc, #100]	; (8001f80 <SPIx_Init+0x6c>)
 8001f1a:	f002 f842 	bl	8003fa2 <HAL_SPI_GetState>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d12b      	bne.n	8001f7c <SPIx_Init+0x68>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <SPIx_Init+0x6c>)
 8001f26:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <SPIx_Init+0x70>)
 8001f28:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 100 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <SPIx_Init+0x6c>)
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	61da      	str	r2, [r3, #28]
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <SPIx_Init+0x6c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <SPIx_Init+0x6c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	615a      	str	r2, [r3, #20]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <SPIx_Init+0x6c>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <SPIx_Init+0x6c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <SPIx_Init+0x6c>)
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <SPIx_Init+0x6c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <SPIx_Init+0x6c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <SPIx_Init+0x6c>)
 8001f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f60:	619a      	str	r2, [r3, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLED;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <SPIx_Init+0x6c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SPIx_Init+0x6c>)
 8001f6a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f6e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&hnucleo_Spi);
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <SPIx_Init+0x6c>)
 8001f72:	f7ff ff73 	bl	8001e5c <SPIx_MspInit>
    HAL_SPI_Init(&hnucleo_Spi);
 8001f76:	4802      	ldr	r0, [pc, #8]	; (8001f80 <SPIx_Init+0x6c>)
 8001f78:	f001 fdc0 	bl	8003afc <HAL_SPI_Init>
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000748 	.word	0x20000748
 8001f84:	40013000 	.word	0x40013000

08001f88 <SPIx_Write>:
/**
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint8_t Value)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) &Value, &data, 1, SpixTimeout);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <SPIx_Write+0x38>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f107 020e 	add.w	r2, r7, #14
 8001f9e:	1df9      	adds	r1, r7, #7
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <SPIx_Write+0x3c>)
 8001fa6:	f001 fe5a 	bl	8003c5e <HAL_SPI_TransmitReceive>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
    
  /* Check the communication status */
  if(status != HAL_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SPIx_Write+0x30>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8001fb4:	f000 f808 	bl	8001fc8 <SPIx_Error>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2000005c 	.word	0x2000005c
 8001fc4:	20000748 	.word	0x20000748

08001fc8 <SPIx_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPIx_Error (void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <SPIx_Error+0x14>)
 8001fce:	f001 fe1e 	bl	8003c0e <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001fd2:	f7ff ff9f 	bl	8001f14 <SPIx_Init>
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000748 	.word	0x20000748

08001fe0 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes the LCD.
  */
void LCD_IO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
   
  /* LCD_CS_GPIO and LCD_DC_GPIO Periph clock enable */
  LCD_CS_GPIO_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <LCD_IO_Init+0x84>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <LCD_IO_Init+0x84>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <LCD_IO_Init+0x84>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  LCD_DC_GPIO_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <LCD_IO_Init+0x84>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <LCD_IO_Init+0x84>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <LCD_IO_Init+0x84>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  
  /* Configure LCD_CS_PIN pin: LCD Card CS pin */
  GPIO_InitStruct.Pin = LCD_CS_PIN;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <LCD_IO_Init+0x88>)
 8002036:	f000 fdfd 	bl	8002c34 <HAL_GPIO_Init>

  /* Configure LCD_DC_PIN pin: LCD Card DC pin */
  GPIO_InitStruct.Pin = LCD_DC_PIN;
 800203a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <LCD_IO_Init+0x8c>)
 8002048:	f000 fdf4 	bl	8002c34 <HAL_GPIO_Init>
  
  /* LCD chip select high */
  LCD_CS_HIGH();
 800204c:	2201      	movs	r2, #1
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <LCD_IO_Init+0x88>)
 8002052:	f001 f86f 	bl	8003134 <HAL_GPIO_WritePin>
  
  /* LCD SPI Config */
  SPIx_Init();
 8002056:	f7ff ff5d 	bl	8001f14 <SPIx_Init>
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40020400 	.word	0x40020400
 800206c:	40020000 	.word	0x40020000

08002070 <LCD_IO_WriteReg>:
/**
  * @brief  Writes command to select the LCD register.
  * @param  LCDReg: Address of the selected register.
  */
void LCD_IO_WriteReg(uint8_t LCDReg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Reset LCD control line CS */
  LCD_CS_LOW();
 800207a:	2200      	movs	r2, #0
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	480b      	ldr	r0, [pc, #44]	; (80020ac <LCD_IO_WriteReg+0x3c>)
 8002080:	f001 f858 	bl	8003134 <HAL_GPIO_WritePin>
  
  /* Set LCD data/command line DC to Low */
  LCD_DC_LOW();
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208a:	4809      	ldr	r0, [pc, #36]	; (80020b0 <LCD_IO_WriteReg+0x40>)
 800208c:	f001 f852 	bl	8003134 <HAL_GPIO_WritePin>
    
  /* Send Command */
  SPIx_Write(LCDReg);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff78 	bl	8001f88 <SPIx_Write>
  
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8002098:	2201      	movs	r2, #1
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <LCD_IO_WriteReg+0x3c>)
 800209e:	f001 f849 	bl	8003134 <HAL_GPIO_WritePin>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020000 	.word	0x40020000

080020b4 <LCD_IO_WriteMultipleData>:
  * @brief  Writes register value.
  * @param  pData: Pointer on the register value
  * @param  Size: Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t data = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  
  /* Reset LCD control line CS */
  LCD_CS_LOW();
 80020c6:	2200      	movs	r2, #0
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	4829      	ldr	r0, [pc, #164]	; (8002170 <LCD_IO_WriteMultipleData+0xbc>)
 80020cc:	f001 f832 	bl	8003134 <HAL_GPIO_WritePin>
  
  /* Set LCD data/command line DC to High */
  LCD_DC_HIGH();
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d6:	4827      	ldr	r0, [pc, #156]	; (8002174 <LCD_IO_WriteMultipleData+0xc0>)
 80020d8:	f001 f82c 	bl	8003134 <HAL_GPIO_WritePin>

  if (Size == 1)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <LCD_IO_WriteMultipleData+0x3a>
  {
    /* Only 1 byte to be sent to LCD - general interface can be used */
    /* Send Data */
    SPIx_Write(*pData);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff4e 	bl	8001f88 <SPIx_Write>
 80020ec:	e032      	b.n	8002154 <LCD_IO_WriteMultipleData+0xa0>
  }
  else
  {
    /* Several data should be sent in a raw */
    /* Direct SPI accesses for optimization */
    for (counter = Size; counter != 0; counter--)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e024      	b.n	800213e <LCD_IO_WriteMultipleData+0x8a>
    {
      while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 80020f4:	bf00      	nop
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d1f8      	bne.n	80020f6 <LCD_IO_WriteMultipleData+0x42>
      {
      }
      /* Need to invert bytes for LCD*/
      *((__IO uint8_t*)&hnucleo_Spi.Instance->DR) = *(pData+1);
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	7852      	ldrb	r2, [r2, #1]
 800210e:	701a      	strb	r2, [r3, #0]
      
      while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8002110:	bf00      	nop
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d1f8      	bne.n	8002112 <LCD_IO_WriteMultipleData+0x5e>
      {
      }
      *((__IO uint8_t*)&hnucleo_Spi.Instance->DR) = *pData;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	330c      	adds	r3, #12
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
      counter--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      pData += 2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3302      	adds	r3, #2
 8002136:	607b      	str	r3, [r7, #4]
    for (counter = Size; counter != 0; counter--)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1d7      	bne.n	80020f4 <LCD_IO_WriteMultipleData+0x40>
      }
  
    /* Wait until the bus is ready before releasing Chip select */ 
    while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8002144:	bf00      	nop
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f8      	bne.n	8002146 <LCD_IO_WriteMultipleData+0x92>
    {
    } 
  } 

  /* Empty the Rx fifo */
  data = *(&hnucleo_Spi.Instance->DR);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LCD_IO_WriteMultipleData+0xc4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	60bb      	str	r3, [r7, #8]
  UNUSED(data);
 800215c:	68bb      	ldr	r3, [r7, #8]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800215e:	2201      	movs	r2, #1
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <LCD_IO_WriteMultipleData+0xbc>)
 8002164:	f000 ffe6 	bl	8003134 <HAL_GPIO_WritePin>
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020400 	.word	0x40020400
 8002174:	40020000 	.word	0x40020000
 8002178:	20000748 	.word	0x20000748

0800217c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fc1f 	bl	80029c8 <HAL_Delay>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	2102      	movs	r1, #2
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <nRF24_CSN_L+0x18>)
 800219e:	f000 ffc9 	bl	8003134 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80021a2:	2002      	movs	r0, #2
 80021a4:	f000 fc10 	bl	80029c8 <HAL_Delay>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020800 	.word	0x40020800

080021b0 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2102      	movs	r1, #2
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <nRF24_CSN_H+0x18>)
 80021ba:	f000 ffbb 	bl	8003134 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80021be:	2002      	movs	r0, #2
 80021c0:	f000 fc02 	bl	80029c8 <HAL_Delay>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40020800 	.word	0x40020800

080021cc <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 80021d6:	f107 020f 	add.w	r2, r7, #15
 80021da:	1df9      	adds	r1, r7, #7
 80021dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	4806      	ldr	r0, [pc, #24]	; (8002200 <nRF24_LL_RW+0x34>)
 80021e6:	f001 fd3a 	bl	8003c5e <HAL_SPI_TransmitReceive>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <nRF24_LL_RW+0x28>
        Error_Handler();
 80021f0:	f7fe fbbc 	bl	800096c <Error_Handler>
    return result;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000084 	.word	0x20000084

08002204 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800220e:	f7ff ffc1 	bl	8002194 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffd6 	bl	80021cc <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002220:	20ff      	movs	r0, #255	; 0xff
 8002222:	f7ff ffd3 	bl	80021cc <nRF24_LL_RW>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800222a:	f7ff ffc1 	bl	80021b0 <nRF24_CSN_H>

	return value;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002248:	f7ff ffa4 	bl	8002194 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b1f      	cmp	r3, #31
 8002250:	d810      	bhi.n	8002274 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	b25b      	sxtb	r3, r3
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	b25b      	sxtb	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ffb1 	bl	80021cc <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ffad 	bl	80021cc <nRF24_LL_RW>
 8002272:	e013      	b.n	800229c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ffa8 	bl	80021cc <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2be1      	cmp	r3, #225	; 0xe1
 8002280:	d00c      	beq.n	800229c <nRF24_WriteReg+0x64>
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2be2      	cmp	r3, #226	; 0xe2
 8002286:	d009      	beq.n	800229c <nRF24_WriteReg+0x64>
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2be3      	cmp	r3, #227	; 0xe3
 800228c:	d006      	beq.n	800229c <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2bff      	cmp	r3, #255	; 0xff
 8002292:	d003      	beq.n	800229c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff98 	bl	80021cc <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800229c:	f7ff ff88 	bl	80021b0 <nRF24_CSN_H>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80022b8:	f7ff ff6c 	bl	8002194 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff84 	bl	80021cc <nRF24_LL_RW>
	while (count--) {
 80022c4:	e007      	b.n	80022d6 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80022c6:	683c      	ldr	r4, [r7, #0]
 80022c8:	1c63      	adds	r3, r4, #1
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	20ff      	movs	r0, #255	; 0xff
 80022ce:	f7ff ff7d 	bl	80021cc <nRF24_LL_RW>
 80022d2:	4603      	mov	r3, r0
 80022d4:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	71ba      	strb	r2, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f2      	bne.n	80022c6 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80022e0:	f7ff ff66 	bl	80021b0 <nRF24_CSN_H>
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}

080022ec <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80022fc:	f7ff ff4a 	bl	8002194 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff62 	bl	80021cc <nRF24_LL_RW>
	while (count--) {
 8002308:	e006      	b.n	8002318 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	603a      	str	r2, [r7, #0]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff5a 	bl	80021cc <nRF24_LL_RW>
	while (count--) {
 8002318:	79bb      	ldrb	r3, [r7, #6]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	71ba      	strb	r2, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f3      	bne.n	800230a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002322:	f7ff ff45 	bl	80021b0 <nRF24_CSN_H>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8002332:	2108      	movs	r1, #8
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff ff7f 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800233a:	213f      	movs	r1, #63	; 0x3f
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff ff7b 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8002342:	2103      	movs	r1, #3
 8002344:	2002      	movs	r0, #2
 8002346:	f7ff ff77 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800234a:	2103      	movs	r1, #3
 800234c:	2003      	movs	r0, #3
 800234e:	f7ff ff73 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002352:	2103      	movs	r1, #3
 8002354:	2004      	movs	r0, #4
 8002356:	f7ff ff6f 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800235a:	2102      	movs	r1, #2
 800235c:	2005      	movs	r0, #5
 800235e:	f7ff ff6b 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002362:	210e      	movs	r1, #14
 8002364:	2006      	movs	r0, #6
 8002366:	f7ff ff67 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800236a:	2100      	movs	r1, #0
 800236c:	2007      	movs	r0, #7
 800236e:	f7ff ff63 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002372:	2100      	movs	r1, #0
 8002374:	2011      	movs	r0, #17
 8002376:	f7ff ff5f 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800237a:	2100      	movs	r1, #0
 800237c:	2012      	movs	r0, #18
 800237e:	f7ff ff5b 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002382:	2100      	movs	r1, #0
 8002384:	2013      	movs	r0, #19
 8002386:	f7ff ff57 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800238a:	2100      	movs	r1, #0
 800238c:	2014      	movs	r0, #20
 800238e:	f7ff ff53 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002392:	2100      	movs	r1, #0
 8002394:	2015      	movs	r0, #21
 8002396:	f7ff ff4f 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800239a:	2100      	movs	r1, #0
 800239c:	2016      	movs	r0, #22
 800239e:	f7ff ff4b 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80023a2:	2100      	movs	r1, #0
 80023a4:	201c      	movs	r0, #28
 80023a6:	f7ff ff47 	bl	8002238 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80023aa:	2100      	movs	r1, #0
 80023ac:	201d      	movs	r0, #29
 80023ae:	f7ff ff43 	bl	8002238 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80023b2:	f000 f9ea 	bl	800278a <nRF24_FlushRX>
	nRF24_FlushTX();
 80023b6:	f000 f9e0 	bl	800277a <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80023ba:	f000 f9ee 	bl	800279a <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80023be:	f7ff fef7 	bl	80021b0 <nRF24_CSN_H>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <nRF24_Check+0x58>)
 80023d0:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80023d2:	2205      	movs	r2, #5
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	2030      	movs	r0, #48	; 0x30
 80023d8:	f7ff ff88 	bl	80022ec <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80023dc:	463b      	mov	r3, r7
 80023de:	2205      	movs	r2, #5
 80023e0:	4619      	mov	r1, r3
 80023e2:	2010      	movs	r0, #16
 80023e4:	f7ff ff60 	bl	80022a8 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e00f      	b.n	800240e <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	3310      	adds	r3, #16
 80023f2:	443b      	add	r3, r7
 80023f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <nRF24_Check+0x40>
 8002404:	2300      	movs	r3, #0
 8002406:	e006      	b.n	8002416 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d9ec      	bls.n	80023ee <nRF24_Check+0x26>
	}

	return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	080049fc 	.word	0x080049fc

08002424 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff fee8 	bl	8002204 <nRF24_ReadReg>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d104      	bne.n	8002448 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4619      	mov	r1, r3
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff feef 	bl	8002238 <nRF24_WriteReg>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff fec9 	bl	8002204 <nRF24_ReadReg>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	b25a      	sxtb	r2, r3
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4313      	orrs	r3, r2
 800248e:	b25b      	sxtb	r3, r3
 8002490:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	4619      	mov	r1, r3
 8002496:	2000      	movs	r0, #0
 8002498:	f7ff fece 	bl	8002238 <nRF24_WriteReg>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80024ae:	201d      	movs	r0, #29
 80024b0:	f7ff fea8 	bl	8002204 <nRF24_ReadReg>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	201d      	movs	r0, #29
 80024ca:	f7ff feb5 	bl	8002238 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 80024ce:	211f      	movs	r1, #31
 80024d0:	201c      	movs	r0, #28
 80024d2:	f7ff feb1 	bl	8002238 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 80024d6:	e00b      	b.n	80024f0 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	201d      	movs	r0, #29
 80024e4:	f7ff fea8 	bl	8002238 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 80024e8:	2100      	movs	r1, #0
 80024ea:	201c      	movs	r0, #28
 80024ec:	f7ff fea4 	bl	8002238 <nRF24_WriteReg>
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8002502:	201d      	movs	r0, #29
 8002504:	f7ff fe7e 	bl	8002204 <nRF24_ReadReg>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	201d      	movs	r0, #29
 800251e:	f7ff fe8b 	bl	8002238 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8002522:	e007      	b.n	8002534 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	f023 0302 	bic.w	r3, r3, #2
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	201d      	movs	r0, #29
 8002530:	f7ff fe82 	bl	8002238 <nRF24_WriteReg>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff fe5c 	bl	8002204 <nRF24_ReadReg>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	f023 030c 	bic.w	r3, r3, #12
 8002556:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	b25a      	sxtb	r2, r3
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4313      	orrs	r3, r2
 8002568:	b25b      	sxtb	r3, r3
 800256a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4619      	mov	r1, r3
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff fe61 	bl	8002238 <nRF24_WriteReg>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4619      	mov	r1, r3
 800258c:	2005      	movs	r0, #5
 800258e:	f7ff fe53 	bl	8002238 <nRF24_WriteReg>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3b02      	subs	r3, #2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	2003      	movs	r0, #3
 80025ae:	f7ff fe43 	bl	8002238 <nRF24_WriteReg>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d00a      	beq.n	80025e4 <nRF24_SetAddr+0x28>
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	dc36      	bgt.n	8002640 <nRF24_SetAddr+0x84>
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	dc02      	bgt.n	80025dc <nRF24_SetAddr+0x20>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da04      	bge.n	80025e4 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80025da:	e031      	b.n	8002640 <nRF24_SetAddr+0x84>
 80025dc:	3b02      	subs	r3, #2
	switch (pipe) {
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d82e      	bhi.n	8002640 <nRF24_SetAddr+0x84>
 80025e2:	e023      	b.n	800262c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80025e4:	2003      	movs	r0, #3
 80025e6:	f7ff fe0d 	bl	8002204 <nRF24_ReadReg>
 80025ea:	4603      	mov	r3, r0
 80025ec:	3301      	adds	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80025f8:	f7ff fdcc 	bl	8002194 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <nRF24_SetAddr+0x90>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	f043 0320 	orr.w	r3, r3, #32
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fddf 	bl	80021cc <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	603a      	str	r2, [r7, #0]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fdd8 	bl	80021cc <nRF24_LL_RW>
			} while (addr_width--);
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	73fa      	strb	r2, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f3      	bne.n	800260e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8002626:	f7ff fdc3 	bl	80021b0 <nRF24_CSN_H>
			break;
 800262a:	e00a      	b.n	8002642 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <nRF24_SetAddr+0x90>)
 8002630:	5cd2      	ldrb	r2, [r2, r3]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7ff fdfd 	bl	8002238 <nRF24_WriteReg>
			break;
 800263e:	e000      	b.n	8002642 <nRF24_SetAddr+0x86>
			break;
 8002640:	bf00      	nop
	}
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	08006c4c 	.word	0x08006c4c

08002650 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800265a:	2006      	movs	r0, #6
 800265c:	f7ff fdd2 	bl	8002204 <nRF24_ReadReg>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f023 0306 	bic.w	r3, r3, #6
 800266a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4313      	orrs	r3, r2
 8002672:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	4619      	mov	r1, r3
 8002678:	2006      	movs	r0, #6
 800267a:	f7ff fddd 	bl	8002238 <nRF24_WriteReg>
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002690:	2006      	movs	r0, #6
 8002692:	f7ff fdb7 	bl	8002204 <nRF24_ReadReg>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80026a0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	4619      	mov	r1, r3
 80026ae:	2006      	movs	r0, #6
 80026b0:	f7ff fdc2 	bl	8002238 <nRF24_WriteReg>
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	460b      	mov	r3, r1
 80026c8:	71bb      	strb	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7ff fd98 	bl	8002204 <nRF24_ReadReg>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b25a      	sxtb	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ec:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7ff fda0 	bl	8002238 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <nRF24_SetRXPipe+0xa4>)
 80026fc:	5cd2      	ldrb	r2, [r2, r3]
 80026fe:	797b      	ldrb	r3, [r7, #5]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7ff fd95 	bl	8002238 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff fd78 	bl	8002204 <nRF24_ReadReg>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002718:	79bb      	ldrb	r3, [r7, #6]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10a      	bne.n	8002734 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2201      	movs	r2, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	b25a      	sxtb	r2, r3
 8002728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272c:	4313      	orrs	r3, r2
 800272e:	b25b      	sxtb	r3, r3
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e00b      	b.n	800274c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2201      	movs	r2, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	b25b      	sxtb	r3, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	b25a      	sxtb	r2, r3
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4013      	ands	r3, r2
 8002748:	b25b      	sxtb	r3, r3
 800274a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	4619      	mov	r1, r3
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff fd71 	bl	8002238 <nRF24_WriteReg>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	08006c44 	.word	0x08006c44

08002764 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002768:	2017      	movs	r0, #23
 800276a:	f7ff fd4b 	bl	8002204 <nRF24_ReadReg>
 800276e:	4603      	mov	r3, r0
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	b2db      	uxtb	r3, r3
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}

0800277a <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800277e:	21ff      	movs	r1, #255	; 0xff
 8002780:	20e1      	movs	r0, #225	; 0xe1
 8002782:	f7ff fd59 	bl	8002238 <nRF24_WriteReg>
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}

0800278a <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800278e:	21ff      	movs	r1, #255	; 0xff
 8002790:	20e2      	movs	r0, #226	; 0xe2
 8002792:	f7ff fd51 	bl	8002238 <nRF24_WriteReg>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80027a0:	2007      	movs	r0, #7
 80027a2:	f7ff fd2f 	bl	8002204 <nRF24_ReadReg>
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80027b0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4619      	mov	r1, r3
 80027b6:	2007      	movs	r0, #7
 80027b8:	f7ff fd3e 	bl	8002238 <nRF24_WriteReg>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80027ca:	f7ff fce3 	bl	8002194 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80027ce:	2060      	movs	r0, #96	; 0x60
 80027d0:	f7ff fcfc 	bl	80021cc <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80027d4:	20ff      	movs	r0, #255	; 0xff
 80027d6:	f7ff fcf9 	bl	80021cc <nRF24_LL_RW>
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80027de:	f7ff fce7 	bl	80021b0 <nRF24_CSN_H>

	return value;
 80027e2:	79fb      	ldrb	r3, [r7, #7]

}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80027fa:	2007      	movs	r0, #7
 80027fc:	f7ff fd02 	bl	8002204 <nRF24_ReadReg>
 8002800:	4603      	mov	r3, r0
 8002802:	105b      	asrs	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d829      	bhi.n	8002866 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00f      	beq.n	8002838 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8002818:	f7ff ffd4 	bl	80027c4 <nRF24_GetRxDplPayloadWidth>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b20      	cmp	r3, #32
 800282a:	d90f      	bls.n	800284c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8002832:	f7ff ffaa 	bl	800278a <nRF24_FlushRX>
 8002836:	e009      	b.n	800284c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <nRF24_ReadPayloadGeneric+0x8c>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fce0 	bl	8002204 <nRF24_ReadReg>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	2061      	movs	r0, #97	; 0x61
 800285e:	f7ff fd23 	bl	80022a8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	e003      	b.n	800286e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800286c:	23ff      	movs	r3, #255	; 0xff
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	08006c44 	.word	0x08006c44

0800287c <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8002886:	2201      	movs	r2, #1
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffae 	bl	80027ec <nRF24_ReadPayloadGeneric>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <nRF24_WriteAckPayload>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, char *payload, uint8_t length) {
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	6039      	str	r1, [r7, #0]
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	4613      	mov	r3, r2
 80028a8:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80028aa:	f7ff fc73 	bl	8002194 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f063 0357 	orn	r3, r3, #87	; 0x57
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc88 	bl	80021cc <nRF24_LL_RW>
	while (length--) {
 80028bc:	e006      	b.n	80028cc <nRF24_WriteAckPayload+0x32>
		nRF24_LL_RW((uint8_t) *payload++);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	603a      	str	r2, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fc80 	bl	80021cc <nRF24_LL_RW>
	while (length--) {
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	1e5a      	subs	r2, r3, #1
 80028d0:	71ba      	strb	r2, [r7, #6]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f3      	bne.n	80028be <nRF24_WriteAckPayload+0x24>
	}
	nRF24_CSN_H();
 80028d6:	f7ff fc6b 	bl	80021b0 <nRF24_CSN_H>

}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_Init+0x40>)
 80028ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_Init+0x40>)
 80028fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_Init+0x40>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800290c:	2003      	movs	r0, #3
 800290e:	f000 f94f 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002912:	2000      	movs	r0, #0
 8002914:	f000 f808 	bl	8002928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002918:	f7fe f9f6 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00

08002928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_InitTick+0x54>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_InitTick+0x58>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f967 	bl	8002c1a <HAL_SYSTICK_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00e      	b.n	8002974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b0f      	cmp	r3, #15
 800295a:	d80a      	bhi.n	8002972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295c:	2200      	movs	r2, #0
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f000 f92f 	bl	8002bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <HAL_InitTick+0x5c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000000 	.word	0x20000000
 8002980:	20000064 	.word	0x20000064
 8002984:	20000060 	.word	0x20000060

08002988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x20>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x24>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4413      	add	r3, r2
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_IncTick+0x24>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000064 	.word	0x20000064
 80029ac:	200007a0 	.word	0x200007a0

080029b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTick;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetTick+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	200007a0 	.word	0x200007a0

080029c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff ffee 	bl	80029b0 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d005      	beq.n	80029ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_Delay+0x44>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ee:	bf00      	nop
 80029f0:	f7ff ffde 	bl	80029b0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8f7      	bhi.n	80029f0 <HAL_Delay+0x28>
  {
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000064 	.word	0x20000064

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f7ff ff8e 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff29 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff3e 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff8e 	bl	8002b04 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5d 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff31 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa2 	bl	8002b6c <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e159      	b.n	8002f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 8148 	bne.w	8002efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d005      	beq.n	8002c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d130      	bne.n	8002ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d017      	beq.n	8002d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d123      	bne.n	8002d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a2 	beq.w	8002efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <HAL_GPIO_Init+0x2e8>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a56      	ldr	r2, [pc, #344]	; (8002f1c <HAL_GPIO_Init+0x2e8>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <HAL_GPIO_Init+0x2e8>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd6:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_GPIO_Init+0x2ec>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a49      	ldr	r2, [pc, #292]	; (8002f24 <HAL_GPIO_Init+0x2f0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d019      	beq.n	8002e36 <HAL_GPIO_Init+0x202>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a48      	ldr	r2, [pc, #288]	; (8002f28 <HAL_GPIO_Init+0x2f4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_GPIO_Init+0x1fe>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a47      	ldr	r2, [pc, #284]	; (8002f2c <HAL_GPIO_Init+0x2f8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00d      	beq.n	8002e2e <HAL_GPIO_Init+0x1fa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a46      	ldr	r2, [pc, #280]	; (8002f30 <HAL_GPIO_Init+0x2fc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <HAL_GPIO_Init+0x1f6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a45      	ldr	r2, [pc, #276]	; (8002f34 <HAL_GPIO_Init+0x300>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_GPIO_Init+0x1f2>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e008      	b.n	8002e38 <HAL_GPIO_Init+0x204>
 8002e26:	2307      	movs	r3, #7
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x204>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e004      	b.n	8002e38 <HAL_GPIO_Init+0x204>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_Init+0x204>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_GPIO_Init+0x204>
 8002e36:	2300      	movs	r3, #0
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f002 0203 	and.w	r2, r2, #3
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	4093      	lsls	r3, r2
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e48:	4935      	ldr	r1, [pc, #212]	; (8002f20 <HAL_GPIO_Init+0x2ec>)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eaa:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	f67f aea2 	bls.w	8002c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	40020800 	.word	0x40020800
 8002f30:	40020c00 	.word	0x40020c00
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40013c00 	.word	0x40013c00

08002f3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e0bb      	b.n	80030d0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	f040 80ab 	bne.w	80030ca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f74:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_GPIO_DeInit+0x1ac>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a54      	ldr	r2, [pc, #336]	; (80030ec <HAL_GPIO_DeInit+0x1b0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_DeInit+0x96>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a53      	ldr	r2, [pc, #332]	; (80030f0 <HAL_GPIO_DeInit+0x1b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_DeInit+0x92>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_GPIO_DeInit+0x1b8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_DeInit+0x8e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_GPIO_DeInit+0x1bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_DeInit+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a50      	ldr	r2, [pc, #320]	; (80030fc <HAL_GPIO_DeInit+0x1c0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_DeInit+0x86>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_DeInit+0x98>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_DeInit+0x98>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_DeInit+0x98>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_DeInit+0x98>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_DeInit+0x98>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d132      	bne.n	800304a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	4944      	ldr	r1, [pc, #272]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4941      	ldr	r1, [pc, #260]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	493d      	ldr	r1, [pc, #244]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 800300a:	4013      	ands	r3, r2
 800300c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	493a      	ldr	r1, [pc, #232]	; (8003100 <HAL_GPIO_DeInit+0x1c4>)
 8003018:	4013      	ands	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800302c:	4a2e      	ldr	r2, [pc, #184]	; (80030e8 <HAL_GPIO_DeInit+0x1ac>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	43da      	mvns	r2, r3
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <HAL_GPIO_DeInit+0x1ac>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	400a      	ands	r2, r1
 8003044:	3302      	adds	r3, #2
 8003046:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2103      	movs	r1, #3
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	08d2      	lsrs	r2, r2, #3
 8003080:	4019      	ands	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2103      	movs	r1, #3
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	2101      	movs	r1, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2103      	movs	r1, #3
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3301      	adds	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	f67f af40 	bls.w	8002f58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40013800 	.word	0x40013800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40020800 	.word	0x40020800
 80030f8:	40020c00 	.word	0x40020c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e001      	b.n	8003126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43d9      	mvns	r1, r3
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d006      	beq.n	80031c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fb70 	bl	80008a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e267      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d075      	beq.n	80032d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b85      	ldr	r3, [pc, #532]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b7e      	ldr	r3, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e242      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x74>
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6c      	ldr	r2, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003264:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a68      	ldr	r2, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7ff fb94 	bl	80029b0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7ff fb90 	bl	80029b0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e207      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xc0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7ff fb80 	bl	80029b0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7ff fb7c 	bl	80029b0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1f3      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c7      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7ff fb35 	bl	80029b0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7ff fb31 	bl	80029b0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a8      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4925      	ldr	r1, [pc, #148]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7ff fb14 	bl	80029b0 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338c:	f7ff fb10 	bl	80029b0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e187      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d036      	beq.n	8003424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7ff faf4 	bl	80029b0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033cc:	f7ff faf0 	bl	80029b0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e167      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x200>
 80033ea:	e01b      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7ff fadd 	bl	80029b0 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e00e      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7ff fad9 	bl	80029b0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d907      	bls.n	8003418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e150      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800340c:	40023800 	.word	0x40023800
 8003410:	42470000 	.word	0x42470000
 8003414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ea      	bne.n	80033fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8097 	beq.w	8003560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	4b7d      	ldr	r3, [pc, #500]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a7c      	ldr	r2, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b77      	ldr	r3, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b74      	ldr	r3, [pc, #464]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a73      	ldr	r2, [pc, #460]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7ff fa99 	bl	80029b0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7ff fa95 	bl	80029b0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e10c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2ea>
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a63      	ldr	r2, [pc, #396]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x30c>
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a5b      	ldr	r2, [pc, #364]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034d8:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b55      	ldr	r3, [pc, #340]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a54      	ldr	r2, [pc, #336]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7ff fa5a 	bl	80029b0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7ff fa56 	bl	80029b0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0cb      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ee      	beq.n	8003500 <HAL_RCC_OscConfig+0x334>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7ff fa44 	bl	80029b0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7ff fa40 	bl	80029b0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e0b5      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ee      	bne.n	800352c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a1 	beq.w	80036ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d05c      	beq.n	8003630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d141      	bne.n	8003602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7ff fa14 	bl	80029b0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7ff fa10 	bl	80029b0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e087      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7ff f9e9 	bl	80029b0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7ff f9e5 	bl	80029b0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e05c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x416>
 8003600:	e054      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff f9d2 	bl	80029b0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7ff f9ce 	bl	80029b0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e045      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
 800362e:	e03d      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e038      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d028      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d11a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cc      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d90c      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a58      	ldr	r2, [pc, #352]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	494d      	ldr	r1, [pc, #308]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d044      	beq.n	80037dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d003      	beq.n	800377a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003776:	2b03      	cmp	r3, #3
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e067      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4934      	ldr	r1, [pc, #208]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ac:	f7ff f900 	bl	80029b0 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7ff f8fc 	bl	80029b0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d20c      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e032      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	490e      	ldr	r1, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003842:	f000 f821 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f860 	bl	8002928 <HAL_InitTick>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023c00 	.word	0x40023c00
 8003878:	40023800 	.word	0x40023800
 800387c:	08004a08 	.word	0x08004a08
 8003880:	20000000 	.word	0x20000000
 8003884:	20000060 	.word	0x20000060

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b094      	sub	sp, #80	; 0x50
 800388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
 8003894:	2300      	movs	r3, #0
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	2300      	movs	r3, #0
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a0:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d00d      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x40>
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	f200 80e1 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x34>
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ba:	e0db      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038c0:	e0db      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c2:	4b73      	ldr	r3, [pc, #460]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80038c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c6:	e0d8      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d2:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b6a      	ldr	r3, [pc, #424]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	2200      	movs	r2, #0
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
 80038f2:	2300      	movs	r3, #0
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0159      	lsls	r1, r3, #5
 8003908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390c:	0150      	lsls	r0, r2, #5
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4621      	mov	r1, r4
 8003914:	1a51      	subs	r1, r2, r1
 8003916:	6139      	str	r1, [r7, #16]
 8003918:	4629      	mov	r1, r5
 800391a:	eb63 0301 	sbc.w	r3, r3, r1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800392c:	4659      	mov	r1, fp
 800392e:	018b      	lsls	r3, r1, #6
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003936:	4651      	mov	r1, sl
 8003938:	018a      	lsls	r2, r1, #6
 800393a:	4651      	mov	r1, sl
 800393c:	ebb2 0801 	subs.w	r8, r2, r1
 8003940:	4659      	mov	r1, fp
 8003942:	eb63 0901 	sbc.w	r9, r3, r1
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800395a:	4690      	mov	r8, r2
 800395c:	4699      	mov	r9, r3
 800395e:	4623      	mov	r3, r4
 8003960:	eb18 0303 	adds.w	r3, r8, r3
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	462b      	mov	r3, r5
 8003968:	eb49 0303 	adc.w	r3, r9, r3
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800397a:	4629      	mov	r1, r5
 800397c:	024b      	lsls	r3, r1, #9
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003984:	4621      	mov	r1, r4
 8003986:	024a      	lsls	r2, r1, #9
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	2200      	movs	r2, #0
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003998:	f7fc fc26 	bl	80001e8 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a4:	e058      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	2200      	movs	r2, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	4611      	mov	r1, r2
 80039b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
 80039bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	f04f 0000 	mov.w	r0, #0
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	0159      	lsls	r1, r3, #5
 80039ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d2:	0150      	lsls	r0, r2, #5
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4641      	mov	r1, r8
 80039da:	ebb2 0a01 	subs.w	sl, r2, r1
 80039de:	4649      	mov	r1, r9
 80039e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f8:	ebb2 040a 	subs.w	r4, r2, sl
 80039fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	00eb      	lsls	r3, r5, #3
 8003a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0e:	00e2      	lsls	r2, r4, #3
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	18e3      	adds	r3, r4, r3
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	eb45 0303 	adc.w	r3, r5, r3
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2e:	4629      	mov	r1, r5
 8003a30:	028b      	lsls	r3, r1, #10
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a38:	4621      	mov	r1, r4
 8003a3a:	028a      	lsls	r2, r1, #10
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	2200      	movs	r2, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	61fa      	str	r2, [r7, #28]
 8003a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4c:	f7fc fbcc 	bl	80001e8 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3750      	adds	r7, #80	; 0x50
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000000 	.word	0x20000000

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab0:	f7ff fff0 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	0a9b      	lsrs	r3, r3, #10
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	08004a18 	.word	0x08004a18

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad8:	f7ff ffdc 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0b5b      	lsrs	r3, r3, #13
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	08004a18 	.word	0x08004a18

08003afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07b      	b.n	8003c06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d009      	beq.n	8003b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	e005      	b.n	8003b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd f902 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	f003 0104 	and.w	r1, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0210 	and.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e01a      	b.n	8003c56 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd f8f7 	bl	8000e2c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b08c      	sub	sp, #48	; 0x30
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x26>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e18a      	b.n	8003f9a <HAL_SPI_TransmitReceive+0x33c>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8c:	f7fe fe90 	bl	80029b0 <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d00f      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x70>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb4:	d107      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x68>
 8003cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ccc:	e15b      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x82>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x82>
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ce6:	e14e      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d003      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	887a      	ldrh	r2, [r7, #2]
 8003d1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d007      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d58:	d178      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x10a>
 8003d62:	8b7b      	ldrh	r3, [r7, #26]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d166      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8c:	e053      	b.n	8003e36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x176>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x176>
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d113      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d119      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x1b8>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d014      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	b292      	uxth	r2, r2
 8003df8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e12:	2301      	movs	r3, #1
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e16:	f7fe fdcb 	bl	80029b0 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d807      	bhi.n	8003e36 <HAL_SPI_TransmitReceive+0x1d8>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d003      	beq.n	8003e36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e34:	e0a7      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1a6      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x130>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1a1      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x130>
 8003e4a:	e07c      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_TransmitReceive+0x1fc>
 8003e54:	8b7b      	ldrh	r3, [r7, #26]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d16b      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e80:	e057      	b.n	8003f32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11c      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x26c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d017      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x26c>
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d114      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d119      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x2ae>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d014      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f0c:	f7fe fd50 	bl	80029b0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d803      	bhi.n	8003f24 <HAL_SPI_TransmitReceive+0x2c6>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d102      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x2cc>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f30:	e029      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1a2      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x224>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d19d      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8c0 	bl	80040d0 <SPI_EndRxTxTransaction>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f62:	e010      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	e000      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3730      	adds	r7, #48	; 0x30
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd0:	f7fe fcee 	bl	80029b0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe0:	f7fe fce6 	bl	80029b0 <HAL_GetTick>
 8003fe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	015b      	lsls	r3, r3, #5
 8003fec:	0d1b      	lsrs	r3, r3, #20
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	e054      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d050      	beq.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004000:	f7fe fcd6 	bl	80029b0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	429a      	cmp	r2, r3
 800400e:	d902      	bls.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13d      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d111      	bne.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d004      	beq.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d107      	bne.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405c:	d10f      	bne.n	800407e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e017      	b.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3b01      	subs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d19b      	bne.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <SPI_EndRxTxTransaction+0x7c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <SPI_EndRxTxTransaction+0x80>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0d5b      	lsrs	r3, r3, #21
 80040e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d112      	bne.n	8004122 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff ff5a 	bl	8003fc0 <SPI_WaitFlagStateUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00f      	b.n	8004142 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3b01      	subs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d0f2      	beq.n	8004122 <SPI_EndRxTxTransaction+0x52>
 800413c:	e000      	b.n	8004140 <SPI_EndRxTxTransaction+0x70>
        break;
 800413e:	bf00      	nop
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000000 	.word	0x20000000
 8004150:	165e9f81 	.word	0x165e9f81

08004154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e03f      	b.n	80041e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fe7c 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	; 0x24
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f929 	bl	80043f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b08a      	sub	sp, #40	; 0x28
 80041f2:	af02      	add	r7, sp, #8
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	d17c      	bne.n	8004308 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_UART_Transmit+0x2c>
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e075      	b.n	800430a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_UART_Transmit+0x3e>
 8004228:	2302      	movs	r3, #2
 800422a:	e06e      	b.n	800430a <HAL_UART_Transmit+0x11c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004242:	f7fe fbb5 	bl	80029b0 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d108      	bne.n	8004270 <HAL_UART_Transmit+0x82>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e003      	b.n	8004278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004280:	e02a      	b.n	80042d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f840 	bl	8004312 <UART_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e036      	b.n	800430a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3302      	adds	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e007      	b.n	80042ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3301      	adds	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1cf      	bne.n	8004282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2140      	movs	r1, #64	; 0x40
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f810 	bl	8004312 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b090      	sub	sp, #64	; 0x40
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004322:	e050      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d04c      	beq.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800432c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x30>
 8004332:	f7fe fb3d 	bl	80029b0 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800433e:	429a      	cmp	r2, r3
 8004340:	d241      	bcs.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004362:	637a      	str	r2, [r7, #52]	; 0x34
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	613b      	str	r3, [r7, #16]
   return(result);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004396:	623a      	str	r2, [r7, #32]
 8004398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	69f9      	ldr	r1, [r7, #28]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e00f      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d09f      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3740      	adds	r7, #64	; 0x40
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f4:	b0c0      	sub	sp, #256	; 0x100
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	68d9      	ldr	r1, [r3, #12]
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	ea40 0301 	orr.w	r3, r0, r1
 8004418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	431a      	orrs	r2, r3
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004448:	f021 010c 	bic.w	r1, r1, #12
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004456:	430b      	orrs	r3, r1
 8004458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	6999      	ldr	r1, [r3, #24]
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	ea40 0301 	orr.w	r3, r0, r1
 8004476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b8f      	ldr	r3, [pc, #572]	; (80046bc <UART_SetConfig+0x2cc>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d005      	beq.n	8004490 <UART_SetConfig+0xa0>
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b8d      	ldr	r3, [pc, #564]	; (80046c0 <UART_SetConfig+0x2d0>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d104      	bne.n	800449a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7ff fb20 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8004494:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004498:	e003      	b.n	80044a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449a:	f7ff fb07 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 800449e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ac:	f040 810c 	bne.w	80046c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	1891      	adds	r1, r2, r2
 80044c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ca:	415b      	adcs	r3, r3
 80044cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044d2:	4621      	mov	r1, r4
 80044d4:	eb12 0801 	adds.w	r8, r2, r1
 80044d8:	4629      	mov	r1, r5
 80044da:	eb43 0901 	adc.w	r9, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f2:	4690      	mov	r8, r2
 80044f4:	4699      	mov	r9, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb18 0303 	adds.w	r3, r8, r3
 80044fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004500:	462b      	mov	r3, r5
 8004502:	eb49 0303 	adc.w	r3, r9, r3
 8004506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004516:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800451a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800451e:	460b      	mov	r3, r1
 8004520:	18db      	adds	r3, r3, r3
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
 8004524:	4613      	mov	r3, r2
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
 800452c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004534:	f7fb fe58 	bl	80001e8 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b61      	ldr	r3, [pc, #388]	; (80046c4 <UART_SetConfig+0x2d4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011c      	lsls	r4, r3, #4
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004550:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004560:	415b      	adcs	r3, r3
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004568:	4641      	mov	r1, r8
 800456a:	eb12 0a01 	adds.w	sl, r2, r1
 800456e:	4649      	mov	r1, r9
 8004570:	eb43 0b01 	adc.w	fp, r3, r1
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004588:	4692      	mov	sl, r2
 800458a:	469b      	mov	fp, r3
 800458c:	4643      	mov	r3, r8
 800458e:	eb1a 0303 	adds.w	r3, sl, r3
 8004592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004596:	464b      	mov	r3, r9
 8004598:	eb4b 0303 	adc.w	r3, fp, r3
 800459c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045b4:	460b      	mov	r3, r1
 80045b6:	18db      	adds	r3, r3, r3
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
 80045ba:	4613      	mov	r3, r2
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ca:	f7fb fe0d 	bl	80001e8 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <UART_SetConfig+0x2d4>)
 80045d6:	fba3 2301 	umull	r2, r3, r3, r1
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2264      	movs	r2, #100	; 0x64
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	1acb      	subs	r3, r1, r3
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <UART_SetConfig+0x2d4>)
 80045ec:	fba3 2302 	umull	r2, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f8:	441c      	add	r4, r3
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004604:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	63b9      	str	r1, [r7, #56]	; 0x38
 8004614:	415b      	adcs	r3, r3
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6339      	str	r1, [r7, #48]	; 0x30
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004668:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800466c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004670:	460b      	mov	r3, r1
 8004672:	18db      	adds	r3, r3, r3
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
 8004676:	4613      	mov	r3, r2
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004686:	f7fb fdaf 	bl	80001e8 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <UART_SetConfig+0x2d4>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	; 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <UART_SetConfig+0x2d4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 0207 	and.w	r2, r3, #7
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4422      	add	r2, r4
 80046b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b8:	e105      	b.n	80048c6 <UART_SetConfig+0x4d6>
 80046ba:	bf00      	nop
 80046bc:	40011000 	.word	0x40011000
 80046c0:	40011400 	.word	0x40011400
 80046c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	1891      	adds	r1, r2, r2
 80046e0:	6239      	str	r1, [r7, #32]
 80046e2:	415b      	adcs	r3, r3
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ea:	4641      	mov	r1, r8
 80046ec:	1854      	adds	r4, r2, r1
 80046ee:	4649      	mov	r1, r9
 80046f0:	eb43 0501 	adc.w	r5, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	00eb      	lsls	r3, r5, #3
 80046fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004702:	00e2      	lsls	r2, r4, #3
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	4643      	mov	r3, r8
 800470a:	18e3      	adds	r3, r4, r3
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004710:	464b      	mov	r3, r9
 8004712:	eb45 0303 	adc.w	r3, r5, r3
 8004716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004736:	4629      	mov	r1, r5
 8004738:	008b      	lsls	r3, r1, #2
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004740:	4621      	mov	r1, r4
 8004742:	008a      	lsls	r2, r1, #2
 8004744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004748:	f7fb fd4e 	bl	80001e8 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4b60      	ldr	r3, [pc, #384]	; (80048d4 <UART_SetConfig+0x4e4>)
 8004752:	fba3 2302 	umull	r2, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	011c      	lsls	r4, r3, #4
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	61b9      	str	r1, [r7, #24]
 8004774:	415b      	adcs	r3, r3
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6139      	str	r1, [r7, #16]
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b0:	464b      	mov	r3, r9
 80047b2:	460a      	mov	r2, r1
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047d4:	4649      	mov	r1, r9
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	4641      	mov	r1, r8
 80047da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047de:	4641      	mov	r1, r8
 80047e0:	008a      	lsls	r2, r1, #2
 80047e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047e6:	f7fb fcff 	bl	80001e8 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <UART_SetConfig+0x4e4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <UART_SetConfig+0x4e4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480e:	441c      	add	r4, r3
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	2200      	movs	r2, #0
 8004816:	673b      	str	r3, [r7, #112]	; 0x70
 8004818:	677a      	str	r2, [r7, #116]	; 0x74
 800481a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	1891      	adds	r1, r2, r2
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	415b      	adcs	r3, r3
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800482e:	4641      	mov	r1, r8
 8004830:	1851      	adds	r1, r2, r1
 8004832:	6039      	str	r1, [r7, #0]
 8004834:	4649      	mov	r1, r9
 8004836:	414b      	adcs	r3, r1
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004846:	4659      	mov	r1, fp
 8004848:	00cb      	lsls	r3, r1, #3
 800484a:	4651      	mov	r1, sl
 800484c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004850:	4651      	mov	r1, sl
 8004852:	00ca      	lsls	r2, r1, #3
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	4603      	mov	r3, r0
 800485a:	4642      	mov	r2, r8
 800485c:	189b      	adds	r3, r3, r2
 800485e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	663b      	str	r3, [r7, #96]	; 0x60
 8004874:	667a      	str	r2, [r7, #100]	; 0x64
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004882:	4649      	mov	r1, r9
 8004884:	008b      	lsls	r3, r1, #2
 8004886:	4641      	mov	r1, r8
 8004888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488c:	4641      	mov	r1, r8
 800488e:	008a      	lsls	r2, r1, #2
 8004890:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004894:	f7fb fca8 	bl	80001e8 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <UART_SetConfig+0x4e4>)
 800489e:	fba3 1302 	umull	r1, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2164      	movs	r1, #100	; 0x64
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <UART_SetConfig+0x4e4>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4422      	add	r2, r4
 80048c4:	609a      	str	r2, [r3, #8]
}
 80048c6:	bf00      	nop
 80048c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	51eb851f 	.word	0x51eb851f

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4d0d      	ldr	r5, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1b64      	subs	r4, r4, r5
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2600      	movs	r6, #0
 80048e4:	42a6      	cmp	r6, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4d0b      	ldr	r5, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 f820 	bl	8004930 <_init>
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2600      	movs	r6, #0
 80048f6:	42a6      	cmp	r6, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004900:	4798      	blx	r3
 8004902:	3601      	adds	r6, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f855 3b04 	ldr.w	r3, [r5], #4
 800490a:	4798      	blx	r3
 800490c:	3601      	adds	r6, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	08006c5c 	.word	0x08006c5c
 8004914:	08006c5c 	.word	0x08006c5c
 8004918:	08006c5c 	.word	0x08006c5c
 800491c:	08006c60 	.word	0x08006c60

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
