
Disco_F746G_NRF24L01_LCD_Receiver_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010334  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000276c  080104fc  080104fc  000204fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c68  08012c68  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012c68  08012c68  00022c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c70  08012c70  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c70  08012c70  00022c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c74  08012c74  00022c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08012c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a4  08012d1c  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000144  08012dbc  00030144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001200  200001e4  08012e5c  000301e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200013e4  08012e5c  000313e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038fee  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b52  00000000  00000000  00069202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d20  00000000  00000000  0006fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002a70  00000000  00000000  00072a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033c8f  00000000  00000000  000754e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a44a  00000000  00000000  000a9177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001245d6  00000000  00000000  000e35c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00207b97  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c3d8  00000000  00000000  00207be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e4 	.word	0x200001e4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080104e4 	.word	0x080104e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e8 	.word	0x200001e8
 8000204:	080104e4 	.word	0x080104e4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f003 ff79 	bl	8004416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f85a 	bl	80005dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000528:	f000 f8ca 	bl	80006c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f001 f866 	bl	80015fc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000530:	f000 f8f8 	bl	8000724 <MX_ADC3_Init>
  MX_CRC_Init();
 8000534:	f000 f948 	bl	80007c8 <MX_CRC_Init>
  MX_DCMI_Init();
 8000538:	f000 f968 	bl	800080c <MX_DCMI_Init>
  MX_DMA2D_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000540:	f000 f9ca 	bl	80008d8 <MX_ETH_Init>
  MX_FMC_Init();
 8000544:	f001 f80a 	bl	800155c <MX_FMC_Init>
  MX_I2C1_Init();
 8000548:	f000 fa14 	bl	8000974 <MX_I2C1_Init>
  MX_I2C3_Init();
 800054c:	f000 fa52 	bl	80009f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000550:	f000 fa90 	bl	8000a74 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000554:	f000 fb10 	bl	8000b78 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000558:	f000 fb3a 	bl	8000bd0 <MX_RTC_Init>
  MX_SAI2_Init();
 800055c:	f000 fbdc 	bl	8000d18 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000560:	f000 fc82 	bl	8000e68 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000564:	f000 fcb0 	bl	8000ec8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000568:	f000 fcec 	bl	8000f44 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056c:	f000 fd96 	bl	800109c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 fe0a 	bl	8001188 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000574:	f000 fe80 	bl	8001278 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000578:	f000 fef6 	bl	8001368 <MX_TIM8_Init>
  MX_TIM12_Init();
 800057c:	f000 ff48 	bl	8001410 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000580:	f000 ff8c 	bl	800149c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000584:	f000 ffba 	bl	80014fc <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000588:	f00f fb70 	bl	800fc6c <MX_USB_HOST_Init>
	//LTDC_Init(FRAME_BUFFER, 0, 0, 480, 272);
	//LCD_DisplayOff(); // mandatory to avoid parasites on the LCD screen

    /*##-1- LCD Initialization #################################################*/
    /* Initialize the LCD */
    BSP_LCD_Init();
 800058c:	f002 fcd0 	bl	8002f30 <BSP_LCD_Init>

    //set the layer buffer address into SDRAM
    BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000590:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000594:	2001      	movs	r0, #1
 8000596:	f002 fd63 	bl	8003060 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);//select on whil layer we write
 800059a:	2001      	movs	r0, #1
 800059c:	f002 fdc0 	bl	8003120 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();//turn on LCD
 80005a0:	f002 ffc4 	bl	800352c <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0xb8>)
 80005a6:	f002 fe2d 	bl	8003204 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0xb8>)
 80005ac:	f002 fde0 	bl	8003170 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f002 fdc4 	bl	8003140 <BSP_LCD_SetTextColor>
    //write text
    BSP_LCD_DisplayStringAtLine(0,(uint8_t*) "NRF Receiver");
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <main+0xbc>)
 80005ba:	2000      	movs	r0, #0
 80005bc:	f002 ff56 	bl	800346c <BSP_LCD_DisplayStringAtLine>
//        	snprintf(msg, 20, "%d", nr);
//        	BSP_LCD_DisplayStringAtLine(nr%10, (uint8_t*) msg);
//        	HAL_Delay(1);
//        }

        HAL_Delay(2000);
 80005c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c4:	f003 ff84 	bl	80044d0 <HAL_Delay>

        runRadio();
 80005c8:	f001 fac2 	bl	8001b50 <runRadio>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005cc:	f00f fb74 	bl	800fcb8 <MX_USB_HOST_Process>
 80005d0:	e7fc      	b.n	80005cc <main+0xb0>
 80005d2:	bf00      	nop
 80005d4:	ff0000ff 	.word	0xff0000ff
 80005d8:	080104fc 	.word	0x080104fc

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00f fe74 	bl	80102d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f008 f8b4 	bl	800876c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <SystemClock_Config+0xdc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xdc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xe0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <SystemClock_Config+0xe0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000634:	2309      	movs	r3, #9
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800064c:	2319      	movs	r3, #25
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000650:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800065a:	2309      	movs	r3, #9
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f008 f9a4 	bl	80089b0 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f001 f99b 	bl	80019a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000672:	f008 f88b 	bl	800878c <HAL_PWREx_EnableOverDrive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800067c:	f001 f994 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2106      	movs	r1, #6
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 fc2a 	bl	8008ef8 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006aa:	f001 f97d 	bl	80019a8 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a2      	sub	sp, #136	; 0x88
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2284      	movs	r2, #132	; 0x84
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00f fe03 	bl	80102d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <PeriphCommonClock_Config+0x60>)
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80006dc:	2305      	movs	r3, #5
 80006de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006e4:	2303      	movs	r3, #3
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80006f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f008 fddc 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000712:	f001 f949 	bl	80019a8 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3788      	adds	r7, #136	; 0x88
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	00b00008 	.word	0x00b00008

08000724 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC3_Init+0x98>)
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_ADC3_Init+0x9c>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC3_Init+0x98>)
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000742:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC3_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC3_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC3_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC3_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_ADC3_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_ADC3_Init+0x98>)
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_ADC3_Init+0xa0>)
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC3_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC3_Init+0x98>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_ADC3_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_ADC3_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC3_Init+0x98>)
 8000786:	f003 fec7 	bl	8004518 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000790:	f001 f90a 	bl	80019a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_ADC3_Init+0x98>)
 80007a6:	f003 fefb 	bl	80045a0 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007b0:	f001 f8fa 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000238 	.word	0x20000238
 80007c0:	40012200 	.word	0x40012200
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_CRC_Init+0x40>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_CRC_Init+0x3c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_CRC_Init+0x3c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_CRC_Init+0x3c>)
 80007f2:	f004 fa37 	bl	8004c64 <HAL_CRC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007fc:	f001 f8d4 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000280 	.word	0x20000280
 8000808:	40023000 	.word	0x40023000

0800080c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_DCMI_Init+0x60>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_DCMI_Init+0x64>)
 8000814:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DCMI_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_DCMI_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_DCMI_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DCMI_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DCMI_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DCMI_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DCMI_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_DCMI_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_DCMI_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_DCMI_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_DCMI_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_DCMI_Init+0x60>)
 800085a:	f004 faed 	bl	8004e38 <HAL_DCMI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000864:	f001 f8a0 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200002a4 	.word	0x200002a4
 8000870:	50050000 	.word	0x50050000

08000874 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <MX_DMA2D_Init+0x60>)
 800087c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 80008aa:	f004 fcfd 	bl	80052a8 <HAL_DMA2D_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008b4:	f001 f878 	bl	80019a8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008b8:	2101      	movs	r1, #1
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_DMA2D_Init+0x5c>)
 80008bc:	f004 ff62 	bl	8005784 <HAL_DMA2D_ConfigLayer>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008c6:	f001 f86f 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002f4 	.word	0x200002f4
 80008d4:	4002b000 	.word	0x4002b000

080008d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ETH_Init+0x84>)
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_ETH_Init+0x88>)
 80008e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_ETH_Init+0x8c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_ETH_Init+0x8c>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ETH_Init+0x8c>)
 80008f0:	22e1      	movs	r2, #225	; 0xe1
 80008f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_ETH_Init+0x8c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ETH_Init+0x8c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_ETH_Init+0x8c>)
 8000902:	2200      	movs	r2, #0
 8000904:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_ETH_Init+0x84>)
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <MX_ETH_Init+0x8c>)
 800090a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ETH_Init+0x84>)
 800090e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000912:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ETH_Init+0x84>)
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <MX_ETH_Init+0x90>)
 8000918:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_ETH_Init+0x84>)
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_ETH_Init+0x94>)
 800091e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_ETH_Init+0x84>)
 8000922:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000926:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_ETH_Init+0x84>)
 800092a:	f005 f859 	bl	80059e0 <HAL_ETH_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000934:	f001 f838 	bl	80019a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000938:	2238      	movs	r2, #56	; 0x38
 800093a:	2100      	movs	r1, #0
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_ETH_Init+0x98>)
 800093e:	f00f fccb 	bl	80102d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_ETH_Init+0x98>)
 8000944:	2221      	movs	r2, #33	; 0x21
 8000946:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_ETH_Init+0x98>)
 800094a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800094e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_ETH_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000334 	.word	0x20000334
 8000960:	40028000 	.word	0x40028000
 8000964:	20000a64 	.word	0x20000a64
 8000968:	20000144 	.word	0x20000144
 800096c:	200000a4 	.word	0x200000a4
 8000970:	20000200 	.word	0x20000200

08000974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C1_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009b0:	f007 fa3c 	bl	8007e2c <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fff5 	bl	80019a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009c2:	f007 fac3 	bl	8007f4c <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 ffec 	bl	80019a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009d4:	f007 fb05 	bl	8007fe2 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 ffe3 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200003e4 	.word	0x200003e4
 80009ec:	40005400 	.word	0x40005400
 80009f0:	00c0eaff 	.word	0x00c0eaff

080009f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C3_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C3_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C3_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a30:	f007 f9fc 	bl	8007e2c <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 ffb5 	bl	80019a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a42:	f007 fa83 	bl	8007f4c <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 ffac 	bl	80019a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C3_Init+0x74>)
 8000a54:	f007 fac5 	bl	8007fe2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 ffa3 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000438 	.word	0x20000438
 8000a6c:	40005c00 	.word	0x40005c00
 8000a70:	00c0eaff 	.word	0x00c0eaff

08000a74 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2234      	movs	r2, #52	; 0x34
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f00f fc29 	bl	80102d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <MX_LTDC_Init+0x100>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a9e:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000aac:	2209      	movs	r2, #9
 8000aae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ab2:	2235      	movs	r2, #53	; 0x35
 8000ab4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ab8:	220b      	movs	r2, #11
 8000aba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000abe:	f240 2215 	movw	r2, #533	; 0x215
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ac6:	f240 121b 	movw	r2, #283	; 0x11b
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ace:	f240 2235 	movw	r2, #565	; 0x235
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ad6:	f240 121d 	movw	r2, #285	; 0x11d
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000af4:	481e      	ldr	r0, [pc, #120]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000af6:	f007 fac1 	bl	800807c <HAL_LTDC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b00:	f000 ff52 	bl	80019a8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b0c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b16:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b1c:	23ff      	movs	r3, #255	; 0xff
 8000b1e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b28:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b2e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_LTDC_Init+0xfc>)
 8000b5a:	f007 fc21 	bl	80083a0 <HAL_LTDC_ConfigLayer>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b64:	f000 ff20 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000048c 	.word	0x2000048c
 8000b74:	40016800 	.word	0x40016800

08000b78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <MX_QUADSPI_Init+0x54>)
 8000b80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b90:	2210      	movs	r2, #16
 8000b92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b96:	2218      	movs	r2, #24
 8000b98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000b9c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000ba0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_QUADSPI_Init+0x50>)
 8000bb6:	f007 fe39 	bl	800882c <HAL_QSPI_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f000 fef2 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000534 	.word	0x20000534
 8000bcc:	a0001000 	.word	0xa0001000

08000bd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2228      	movs	r2, #40	; 0x28
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f00f fb71 	bl	80102d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bf6:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <MX_RTC_Init+0x140>)
 8000bf8:	4a46      	ldr	r2, [pc, #280]	; (8000d14 <MX_RTC_Init+0x144>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <MX_RTC_Init+0x140>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c04:	227f      	movs	r2, #127	; 0x7f
 8000c06:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c14:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c20:	483b      	ldr	r0, [pc, #236]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c22:	f009 f883 	bl	8009d2c <HAL_RTC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 febc 	bl	80019a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	482f      	ldr	r0, [pc, #188]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c54:	f009 f8ee 	bl	8009e34 <HAL_RTC_SetTime>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 fea3 	bl	80019a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4619      	mov	r1, r3
 8000c82:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_RTC_Init+0x140>)
 8000c84:	f009 f970 	bl	8009f68 <HAL_RTC_SetDate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000c8e:	f000 fe8b 	bl	80019a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_RTC_Init+0x140>)
 8000cca:	f009 f9d1 	bl	800a070 <HAL_RTC_SetAlarm>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000cd4:	f000 fe68 	bl	80019a8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_RTC_Init+0x140>)
 8000ce6:	f009 f9c3 	bl	800a070 <HAL_RTC_SetAlarm>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000cf0:	f000 fe5a 	bl	80019a8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_RTC_Init+0x140>)
 8000cfa:	f009 fb85 	bl	800a408 <HAL_RTCEx_SetTimeStamp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000d04:	f000 fe50 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3740      	adds	r7, #64	; 0x40
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000580 	.word	0x20000580
 8000d14:	40002800 	.word	0x40002800

08000d18 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d1e:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <MX_SAI2_Init+0x140>)
 8000d20:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d28:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d34:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d52:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d58:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d5a:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <MX_SAI2_Init+0x144>)
 8000d5c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d64:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d78:	2208      	movs	r2, #8
 8000d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000dac:	4829      	ldr	r0, [pc, #164]	; (8000e54 <MX_SAI2_Init+0x13c>)
 8000dae:	f009 fb93 	bl	800a4d8 <HAL_SAI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000db8:	f000 fdf6 	bl	80019a8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dbe:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <MX_SAI2_Init+0x14c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dd0:	2240      	movs	r2, #64	; 0x40
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_SAI2_Init+0x148>)
 8000e42:	f009 fb49 	bl	800a4d8 <HAL_SAI_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e4c:	f000 fdac 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200005a0 	.word	0x200005a0
 8000e58:	40015c04 	.word	0x40015c04
 8000e5c:	0002ee00 	.word	0x0002ee00
 8000e60:	20000624 	.word	0x20000624
 8000e64:	40015c24 	.word	0x40015c24

08000e68 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e6e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e72:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_SPDIFRX_Init+0x5c>)
 8000eb2:	f009 fd59 	bl	800a968 <HAL_SPDIFRX_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f000 fd74 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200006a8 	.word	0x200006a8

08000ec8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_SPI2_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000ee2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000efe:	2218      	movs	r2, #24
 8000f00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_SPI2_Init+0x74>)
 8000f28:	f009 fd7a 	bl	800aa20 <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 fd39 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200006f4 	.word	0x200006f4
 8000f40:	40003800 	.word	0x40003800

08000f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09a      	sub	sp, #104	; 0x68
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00f f9aa 	bl	80102d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f84:	4b43      	ldr	r3, [pc, #268]	; (8001094 <MX_TIM1_Init+0x150>)
 8000f86:	4a44      	ldr	r2, [pc, #272]	; (8001098 <MX_TIM1_Init+0x154>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8a:	4b42      	ldr	r3, [pc, #264]	; (8001094 <MX_TIM1_Init+0x150>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <MX_TIM1_Init+0x150>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f96:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <MX_TIM1_Init+0x150>)
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb0:	4838      	ldr	r0, [pc, #224]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fb2:	f00a f97b 	bl	800b2ac <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 fcf4 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4831      	ldr	r0, [pc, #196]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fce:	f00a fb2f 	bl	800b630 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fd8:	f000 fce6 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fdc:	482d      	ldr	r0, [pc, #180]	; (8001094 <MX_TIM1_Init+0x150>)
 8000fde:	f00a f9bc 	bl	800b35a <HAL_TIM_PWM_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fe8:	f000 fcde 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4825      	ldr	r0, [pc, #148]	; (8001094 <MX_TIM1_Init+0x150>)
 8001000:	f00a ff78 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800100a:	f000 fccd 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	; 0x60
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4818      	ldr	r0, [pc, #96]	; (8001094 <MX_TIM1_Init+0x150>)
 8001034:	f00a f9e8 	bl	800b408 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800103e:	f000 fcb3 	bl	80019a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_TIM1_Init+0x150>)
 8001078:	f00a ffca 	bl	800c010 <HAL_TIMEx_ConfigBreakDeadTime>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001082:	f000 fc91 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM1_Init+0x150>)
 8001088:	f001 fbfe 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3768      	adds	r7, #104	; 0x68
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000758 	.word	0x20000758
 8001098:	40010000 	.word	0x40010000

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f6:	4823      	ldr	r0, [pc, #140]	; (8001184 <MX_TIM2_Init+0xe8>)
 80010f8:	f00a f8d8 	bl	800b2ac <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001102:	f000 fc51 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001110:	4619      	mov	r1, r3
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <MX_TIM2_Init+0xe8>)
 8001114:	f00a fa8c 	bl	800b630 <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800111e:	f000 fc43 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <MX_TIM2_Init+0xe8>)
 8001124:	f00a f919 	bl	800b35a <HAL_TIM_PWM_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800112e:	f000 fc3b 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <MX_TIM2_Init+0xe8>)
 8001142:	f00a fed7 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800114c:	f000 fc2c 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001150:	2360      	movs	r3, #96	; 0x60
 8001152:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM2_Init+0xe8>)
 8001168:	f00a f94e 	bl	800b408 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001172:	f000 fc19 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM2_Init+0xe8>)
 8001178:	f001 fb86 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3738      	adds	r7, #56	; 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200007a4 	.word	0x200007a4

08001188 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011bc:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <MX_TIM3_Init+0xec>)
 80011be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011e2:	f00a f863 	bl	800b2ac <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011ec:	f000 fbdc 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	4619      	mov	r1, r3
 80011fc:	481c      	ldr	r0, [pc, #112]	; (8001270 <MX_TIM3_Init+0xe8>)
 80011fe:	f00a fa17 	bl	800b630 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001208:	f000 fbce 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_TIM3_Init+0xe8>)
 800120e:	f00a f8a4 	bl	800b35a <HAL_TIM_PWM_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001218:	f000 fbc6 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_TIM3_Init+0xe8>)
 800122c:	f00a fe62 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001236:	f000 fbb7 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM3_Init+0xe8>)
 8001252:	f00a f8d9 	bl	800b408 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800125c:	f000 fba4 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM3_Init+0xe8>)
 8001262:	f001 fb11 	bl	8002888 <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3738      	adds	r7, #56	; 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200007f0 	.word	0x200007f0
 8001274:	40000400 	.word	0x40000400

08001278 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012ac:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_TIM5_Init+0xec>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012be:	f04f 32ff 	mov.w	r2, #4294967295
 80012c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012d2:	f009 ffeb 	bl	800b2ac <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012dc:	f000 fb64 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012ee:	f00a f99f 	bl	800b630 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80012f8:	f000 fb56 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM5_Init+0xe8>)
 80012fe:	f00a f82c 	bl	800b35a <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001308:	f000 fb4e 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_TIM5_Init+0xe8>)
 800131c:	f00a fdea 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fb3f 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	220c      	movs	r2, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM5_Init+0xe8>)
 8001342:	f00a f861 	bl	800b408 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800134c:	f000 fb2c 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM5_Init+0xe8>)
 8001352:	f001 fa99 	bl	8002888 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000083c 	.word	0x2000083c
 8001364:	40000c00 	.word	0x40000c00

08001368 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM8_Init+0xa0>)
 8001388:	4a20      	ldr	r2, [pc, #128]	; (800140c <MX_TIM8_Init+0xa4>)
 800138a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM8_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM8_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM8_Init+0xa0>)
 800139a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013b4:	f009 ff7a 	bl	800b2ac <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013be:	f000 faf3 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013d0:	f00a f92e 	bl	800b630 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80013da:	f000 fae5 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM8_Init+0xa0>)
 80013f0:	f00a fd80 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80013fa:	f000 fad5 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000888 	.word	0x20000888
 800140c:	40010400 	.word	0x40010400

08001410 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM12_Init+0x84>)
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_TIM12_Init+0x88>)
 800142c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_TIM12_Init+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM12_Init+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_TIM12_Init+0x84>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_TIM12_Init+0x84>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_TIM12_Init+0x84>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_TIM12_Init+0x84>)
 8001450:	f009 ff83 	bl	800b35a <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800145a:	f000 faa5 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_TIM12_Init+0x84>)
 8001476:	f009 ffc7 	bl	800b408 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001480:	f000 fa92 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_TIM12_Init+0x84>)
 8001486:	f001 f9ff 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200008d4 	.word	0x200008d4
 8001498:	40001800 	.word	0x40001800

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <MX_USART1_UART_Init+0x5c>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART1_UART_Init+0x58>)
 80014e0:	f00a fe14 	bl	800c10c <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014ea:	f000 fa5d 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000920 	.word	0x20000920
 80014f8:	40011000 	.word	0x40011000

080014fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <MX_USART6_UART_Init+0x5c>)
 8001504:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART6_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART6_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART6_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART6_UART_Init+0x58>)
 8001540:	f00a fde4 	bl	800c10c <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 fa2d 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200009a8 	.word	0x200009a8
 8001558:	40011400 	.word	0x40011400

0800155c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_FMC_Init+0x98>)
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <MX_FMC_Init+0x9c>)
 8001578:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_FMC_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_FMC_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_FMC_Init+0x98>)
 8001588:	2204      	movs	r2, #4
 800158a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_FMC_Init+0x98>)
 800158e:	2210      	movs	r2, #16
 8001590:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_FMC_Init+0x98>)
 8001594:	2240      	movs	r2, #64	; 0x40
 8001596:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_FMC_Init+0x98>)
 800159a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800159e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_FMC_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_FMC_Init+0x98>)
 80015a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_FMC_Init+0x98>)
 80015b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_FMC_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015c0:	2307      	movs	r3, #7
 80015c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015c8:	2307      	movs	r3, #7
 80015ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015cc:	2303      	movs	r3, #3
 80015ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_FMC_Init+0x98>)
 80015de:	f009 f931 	bl	800a844 <HAL_SDRAM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015e8:	f000 f9de 	bl	80019a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000a30 	.word	0x20000a30
 80015f8:	a0000140 	.word	0xa0000140

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	4bb0      	ldr	r3, [pc, #704]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4aaf      	ldr	r2, [pc, #700]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4bad      	ldr	r3, [pc, #692]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800162a:	4baa      	ldr	r3, [pc, #680]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4aa9      	ldr	r2, [pc, #676]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4ba7      	ldr	r3, [pc, #668]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4ba4      	ldr	r3, [pc, #656]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4aa3      	ldr	r2, [pc, #652]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4ba1      	ldr	r3, [pc, #644]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a9d      	ldr	r2, [pc, #628]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b9b      	ldr	r3, [pc, #620]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b98      	ldr	r3, [pc, #608]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a97      	ldr	r2, [pc, #604]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b95      	ldr	r3, [pc, #596]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a91      	ldr	r2, [pc, #580]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016a2:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a8b      	ldr	r2, [pc, #556]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ba:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a85      	ldr	r2, [pc, #532]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016d2:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a7f      	ldr	r2, [pc, #508]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a73      	ldr	r2, [pc, #460]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2120      	movs	r1, #32
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <MX_GPIO_Init+0x2dc>)
 8001720:	f004 fe30 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	210c      	movs	r1, #12
 8001728:	486c      	ldr	r0, [pc, #432]	; (80018dc <MX_GPIO_Init+0x2e0>)
 800172a:	f004 fe2b 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2108      	movs	r1, #8
 8001732:	486b      	ldr	r0, [pc, #428]	; (80018e0 <MX_GPIO_Init+0x2e4>)
 8001734:	f004 fe26 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173e:	4867      	ldr	r0, [pc, #412]	; (80018dc <MX_GPIO_Init+0x2e0>)
 8001740:	f004 fe20 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174a:	4866      	ldr	r0, [pc, #408]	; (80018e4 <MX_GPIO_Init+0x2e8>)
 800174c:	f004 fe1a 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	21c8      	movs	r1, #200	; 0xc8
 8001754:	4864      	ldr	r0, [pc, #400]	; (80018e8 <MX_GPIO_Init+0x2ec>)
 8001756:	f004 fe15 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NRF_CSN_Pin|NRF_CE_Pin|NRF_IRQ_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001760:	4862      	ldr	r0, [pc, #392]	; (80018ec <MX_GPIO_Init+0x2f0>)
 8001762:	f004 fe0f 	bl	8006384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001766:	2308      	movs	r3, #8
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	485d      	ldr	r0, [pc, #372]	; (80018f0 <MX_GPIO_Init+0x2f4>)
 800177a:	f004 fc57 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800177e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001790:	230a      	movs	r3, #10
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001798:	4619      	mov	r1, r3
 800179a:	4856      	ldr	r0, [pc, #344]	; (80018f4 <MX_GPIO_Init+0x2f8>)
 800179c:	f004 fc46 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4850      	ldr	r0, [pc, #320]	; (80018f8 <MX_GPIO_Init+0x2fc>)
 80017b6:	f004 fc39 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4842      	ldr	r0, [pc, #264]	; (80018d8 <MX_GPIO_Init+0x2dc>)
 80017d0:	f004 fc2c 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	483b      	ldr	r0, [pc, #236]	; (80018d8 <MX_GPIO_Init+0x2dc>)
 80017ec:	f004 fc1e 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80017f0:	f241 030c 	movw	r3, #4108	; 0x100c
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	4834      	ldr	r0, [pc, #208]	; (80018dc <MX_GPIO_Init+0x2e0>)
 800180a:	f004 fc0f 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001820:	4619      	mov	r1, r3
 8001822:	4836      	ldr	r0, [pc, #216]	; (80018fc <MX_GPIO_Init+0x300>)
 8001824:	f004 fc02 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001828:	2308      	movs	r3, #8
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4828      	ldr	r0, [pc, #160]	; (80018e0 <MX_GPIO_Init+0x2e4>)
 8001840:	f004 fbf4 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001844:	2310      	movs	r3, #16
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <MX_GPIO_Init+0x2dc>)
 8001858:	f004 fbe8 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800185c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	481c      	ldr	r0, [pc, #112]	; (80018e4 <MX_GPIO_Init+0x2e8>)
 8001872:	f004 fbdb 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	4815      	ldr	r0, [pc, #84]	; (80018e4 <MX_GPIO_Init+0x2e8>)
 8001890:	f004 fbcc 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800189a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_GPIO_Init+0x2e0>)
 80018ac:	f004 fbbe 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80018b0:	2310      	movs	r3, #16
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018c0:	230a      	movs	r3, #10
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_GPIO_Init+0x2e8>)
 80018cc:	f004 fbae 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018d0:	23c8      	movs	r3, #200	; 0xc8
 80018d2:	e015      	b.n	8001900 <MX_GPIO_Init+0x304>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40022800 	.word	0x40022800
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40021400 	.word	0x40021400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40022400 	.word	0x40022400
 80018fc:	40020800 	.word	0x40020800
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	4820      	ldr	r0, [pc, #128]	; (8001998 <MX_GPIO_Init+0x39c>)
 8001916:	f004 fb89 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin|NRF_IRQ_Pin;
 800191a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	481a      	ldr	r0, [pc, #104]	; (800199c <MX_GPIO_Init+0x3a0>)
 8001934:	f004 fb7a 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001938:	2305      	movs	r3, #5
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001948:	230a      	movs	r3, #10
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	4813      	ldr	r0, [pc, #76]	; (80019a0 <MX_GPIO_Init+0x3a4>)
 8001954:	f004 fb6a 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001958:	2304      	movs	r3, #4
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001968:	4619      	mov	r1, r3
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <MX_GPIO_Init+0x39c>)
 800196c:	f004 fb5e 	bl	800602c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001970:	2328      	movs	r3, #40	; 0x28
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001980:	230a      	movs	r3, #10
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_GPIO_Init+0x3a8>)
 800198c:	f004 fb4e 	bl	800602c <HAL_GPIO_Init>

}
 8001990:	bf00      	nop
 8001992:	3740      	adds	r7, #64	; 0x40
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021800 	.word	0x40021800
 800199c:	40021400 	.word	0x40021400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020000 	.word	0x40020000

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <Error_Handler+0x8>
	...

080019b4 <nRF24_CE_L>:


#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi2;

static inline void nRF24_CE_L() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <nRF24_CE_L+0x18>)
 80019be:	f004 fce1 	bl	8006384 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f002 fd84 	bl	80044d0 <HAL_Delay>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021400 	.word	0x40021400

080019d0 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	2140      	movs	r1, #64	; 0x40
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <nRF24_CE_H+0x18>)
 80019da:	f004 fcd3 	bl	8006384 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80019de:	2002      	movs	r0, #2
 80019e0:	f002 fd76 	bl	80044d0 <HAL_Delay>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021400 	.word	0x40021400

080019ec <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f002 fd6b 	bl	80044d0 <HAL_Delay>
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart6;

void UART_SendChar(char b) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart6, (uint8_t *) &b, 1, 200);
 8001a0e:	1df9      	adds	r1, r7, #7
 8001a10:	23c8      	movs	r3, #200	; 0xc8
 8001a12:	2201      	movs	r2, #1
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <UART_SendChar+0x20>)
 8001a16:	f00a fbc7 	bl	800c1a8 <HAL_UART_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200009a8 	.word	0x200009a8

08001a28 <UART_SendStr>:

void UART_SendStr(char *string) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7fe fbe9 	bl	8000208 <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	23c8      	movs	r3, #200	; 0xc8
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <UART_SendStr+0x24>)
 8001a40:	f00a fbb2 	bl	800c1a8 <HAL_UART_Transmit>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200009a8 	.word	0x200009a8

08001a50 <Toggle_LED>:

void Toggle_LED() {
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
//    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <UART_SendBufHex>:
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81fb      	strh	r3, [r7, #14]
 8001a70:	e018      	b.n	8001aa4 <UART_SendBufHex+0x44>
        ch = *buf++;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8001a7c:	7b7b      	ldrb	r3, [r7, #13]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <UART_SendBufHex+0x58>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffbb 	bl	8001a04 <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <UART_SendBufHex+0x58>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ffb3 	bl	8001a04 <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	81fb      	strh	r3, [r7, #14]
 8001aa4:	89fa      	ldrh	r2, [r7, #14]
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d3e2      	bcc.n	8001a72 <UART_SendBufHex+0x12>
    }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0801050c 	.word	0x0801050c

08001abc <UART_SendInt>:
void UART_SendHex8(uint16_t num) {
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(int32_t num) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da05      	bge.n	8001ada <UART_SendInt+0x1e>
        UART_SendChar('-');
 8001ace:	202d      	movs	r0, #45	; 0x2d
 8001ad0:	f7ff ff98 	bl	8001a04 <UART_SendChar>
        num *= -1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <UART_SendInt+0x90>)
 8001ade:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae2:	1099      	asrs	r1, r3, #2
 8001ae4:	17d3      	asrs	r3, r2, #31
 8001ae6:	1ac9      	subs	r1, r1, r3
 8001ae8:	460b      	mov	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	1ad1      	subs	r1, r2, r3
 8001af2:	b2ca      	uxtb	r2, r1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	6179      	str	r1, [r7, #20]
 8001afa:	3230      	adds	r2, #48	; 0x30
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	3318      	adds	r3, #24
 8001b00:	443b      	add	r3, r7
 8001b02:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <UART_SendInt+0x90>)
 8001b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0e:	1092      	asrs	r2, r2, #2
 8001b10:	17db      	asrs	r3, r3, #31
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	dcde      	bgt.n	8001ada <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e00a      	b.n	8001b3a <UART_SendInt+0x7e>
 8001b24:	f107 0208 	add.w	r2, r7, #8
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff68 	bl	8001a04 <UART_SendChar>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	daf1      	bge.n	8001b24 <UART_SendInt+0x68>
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	66666667 	.word	0x66666667

08001b50 <runRadio>:
}

#endif // DEMO_TX_


int runRadio(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	; 0x50
 8001b54:	af00      	add	r7, sp, #0
    UART_SendStr("\r\nSTM32F411RE Receiver is online.\r\n");
 8001b56:	486e      	ldr	r0, [pc, #440]	; (8001d10 <runRadio+0x1c0>)
 8001b58:	f7ff ff66 	bl	8001a28 <UART_SendStr>

    // RX/TX disabled
    nRF24_CE_L();
 8001b5c:	f7ff ff2a 	bl	80019b4 <nRF24_CE_L>
    Delay_ms(100);
 8001b60:	2064      	movs	r0, #100	; 0x64
 8001b62:	f7ff ff43 	bl	80019ec <Delay_ms>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8001b66:	486b      	ldr	r0, [pc, #428]	; (8001d14 <runRadio+0x1c4>)
 8001b68:	f7ff ff5e 	bl	8001a28 <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	while (!nRF24_Check()) { // try indefinitely
 8001b6c:	e007      	b.n	8001b7e <runRadio+0x2e>
		UART_SendStr("FAIL\r\n");
 8001b6e:	486a      	ldr	r0, [pc, #424]	; (8001d18 <runRadio+0x1c8>)
 8001b70:	f7ff ff5a 	bl	8001a28 <UART_SendStr>
		Toggle_LED();
 8001b74:	f7ff ff6c 	bl	8001a50 <Toggle_LED>
		Delay_ms(50);
 8001b78:	2032      	movs	r0, #50	; 0x32
 8001b7a:	f7ff ff37 	bl	80019ec <Delay_ms>
	while (!nRF24_Check()) { // try indefinitely
 8001b7e:	f002 f9bd 	bl	8003efc <nRF24_Check>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f2      	beq.n	8001b6e <runRadio+0x1e>
	}
    
// #pragma clang diagnostic pop
    UART_SendStr("OK\r\n");
 8001b88:	4864      	ldr	r0, [pc, #400]	; (8001d1c <runRadio+0x1cc>)
 8001b8a:	f7ff ff4d 	bl	8001a28 <UART_SendStr>

    // Initialize the nRF24L01 to its default state
    nRF24_Init();
 8001b8e:	f002 f968 	bl	8003e62 <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(CHANNEL_NUMBER);
 8001b92:	2028      	movs	r0, #40	; 0x28
 8001b94:	f002 fa8d 	bl	80040b2 <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_RATE);
 8001b98:	2008      	movs	r0, #8
 8001b9a:	f002 fb0e 	bl	80041ba <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001b9e:	200c      	movs	r0, #12
 8001ba0:	f002 fa66 	bl	8004070 <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f002 fa92 	bl	80040ce <nRF24_SetAddrWidth>

    // Configure RX PIPE
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 8001baa:	495d      	ldr	r1, [pc, #372]	; (8001d20 <runRadio+0x1d0>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f002 fa9f 	bl	80040f0 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 8001bb2:	220a      	movs	r2, #10
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f002 fb1a 	bl	80041f0 <nRF24_SetRXPipe>

    // Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8001bbc:	2006      	movs	r0, #6
 8001bbe:	f002 fae1 	bl	8004184 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f002 f9e7 	bl	8003f96 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8001bc8:	f002 fb81 	bl	80042ce <nRF24_ClearIRQFlags>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8001bcc:	2002      	movs	r0, #2
 8001bce:	f002 f9c3 	bl	8003f58 <nRF24_SetPowerMode>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f002 fa00 	bl	8003fd8 <nRF24_SetDynamicPayloadLength>

    nRF24_SetPayloadWithAck(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f002 fa27 	bl	800402c <nRF24_SetPayloadWithAck>


        // Put the transceiver to the RX mode
    nRF24_CE_H();
 8001bde:	f7ff fef7 	bl	80019d0 <nRF24_CE_H>

    // The main loop
    j = 0;
 8001be2:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <runRadio+0x1d4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001be8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bec:	f001 fb0a 	bl	8003204 <BSP_LCD_Clear>
    /* Set Menu font */
    BSP_LCD_SetFont(&Font16);
 8001bf0:	484d      	ldr	r0, [pc, #308]	; (8001d28 <runRadio+0x1d8>)
 8001bf2:	f001 fad7 	bl	80031a4 <BSP_LCD_SetFont>

    /* Set Text color */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	f001 faa1 	bl	8003140 <BSP_LCD_SetTextColor>
    uint8_t nrow=0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        // Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
        //
        // This is far from best solution, but it's ok for testing purposes
        // More smart way is to use the IRQ pin :)
        //
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8001c04:	f002 fb48 	bl	8004298 <nRF24_GetStatus_RXFIFO>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d0fa      	beq.n	8001c04 <runRadio+0xb4>
            // Get a payload from the transceiver
            pipe = nRF24_ReadPayloadDpl(nRF24_payload, &payload_length);
 8001c0e:	4947      	ldr	r1, [pc, #284]	; (8001d2c <runRadio+0x1dc>)
 8001c10:	4847      	ldr	r0, [pc, #284]	; (8001d30 <runRadio+0x1e0>)
 8001c12:	f002 fbcd 	bl	80043b0 <nRF24_ReadPayloadDpl>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <runRadio+0x1e4>)
 8001c1c:	701a      	strb	r2, [r3, #0]
            if(payload_length > 0) {
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <runRadio+0x1dc>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <runRadio+0xe4>
                nRF24_WriteAckPayload(pipe, "aCk PaYlOaD",11);
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <runRadio+0x1e4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	220b      	movs	r2, #11
 8001c2c:	4942      	ldr	r1, [pc, #264]	; (8001d38 <runRadio+0x1e8>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fbcd 	bl	80043ce <nRF24_WriteAckPayload>
            }

            // Clear all pending IRQ flags
            nRF24_ClearIRQFlags();
 8001c34:	f002 fb4b 	bl	80042ce <nRF24_ClearIRQFlags>

            // Print a payload contents to UART
            UART_SendStr("RCV PIPE#");
 8001c38:	4840      	ldr	r0, [pc, #256]	; (8001d3c <runRadio+0x1ec>)
 8001c3a:	f7ff fef5 	bl	8001a28 <UART_SendStr>
            UART_SendInt(pipe);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <runRadio+0x1e4>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff3a 	bl	8001abc <UART_SendInt>
            UART_SendStr(" PAYLOAD:>");
 8001c48:	483d      	ldr	r0, [pc, #244]	; (8001d40 <runRadio+0x1f0>)
 8001c4a:	f7ff feed 	bl	8001a28 <UART_SendStr>
            Toggle_LED();
 8001c4e:	f7ff feff 	bl	8001a50 <Toggle_LED>
            UART_SendBufHex((char *) nRF24_payload, payload_length);
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <runRadio+0x1dc>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4835      	ldr	r0, [pc, #212]	; (8001d30 <runRadio+0x1e0>)
 8001c5c:	f7ff ff00 	bl	8001a60 <UART_SendBufHex>
            UART_SendStr("<\r\n");
 8001c60:	4838      	ldr	r0, [pc, #224]	; (8001d44 <runRadio+0x1f4>)
 8001c62:	f7ff fee1 	bl	8001a28 <UART_SendStr>

            uint8_t *buf=nRF24_payload;
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <runRadio+0x1e0>)
 8001c68:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t str[64]={0};
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	223c      	movs	r2, #60	; 0x3c
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00e fb2e 	bl	80102d8 <memset>
            for (i = 0; i < payload_length; i++) {
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <runRadio+0x1f8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e026      	b.n	8001cd2 <runRadio+0x182>
                uint8_t ch = *buf++;
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	64ba      	str	r2, [r7, #72]	; 0x48
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                str[2*i  ]=HEX_CHARS[(ch >> 4) % 0x10];
 8001c90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <runRadio+0x1f8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <runRadio+0x1fc>)
 8001ca2:	5c52      	ldrb	r2, [r2, r1]
 8001ca4:	3350      	adds	r3, #80	; 0x50
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f803 2c4c 	strb.w	r2, [r3, #-76]
                str[2*i+1]=HEX_CHARS[(ch & 0x0f) % 0x10];
 8001cac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <runRadio+0x1f8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4923      	ldr	r1, [pc, #140]	; (8001d4c <runRadio+0x1fc>)
 8001cbe:	5c8a      	ldrb	r2, [r1, r2]
 8001cc0:	3350      	adds	r3, #80	; 0x50
 8001cc2:	443b      	add	r3, r7
 8001cc4:	f803 2c4c 	strb.w	r2, [r3, #-76]
            for (i = 0; i < payload_length; i++) {
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <runRadio+0x1f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <runRadio+0x1f8>)
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <runRadio+0x1dc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <runRadio+0x1f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8d1      	bhi.n	8001c84 <runRadio+0x134>
            }

            /* Display message */
            if (nrow>=20) {
 8001ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ce4:	2b13      	cmp	r3, #19
 8001ce6:	d906      	bls.n	8001cf6 <runRadio+0x1a6>
            	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001ce8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cec:	f001 fa8a 	bl	8003204 <BSP_LCD_Clear>
            	nrow=0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            BSP_LCD_DisplayStringAtLine(nrow++, (uint8_t*)str);
 8001cf6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	1d3a      	adds	r2, r7, #4
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fbb0 	bl	800346c <BSP_LCD_DisplayStringAtLine>
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8001d0c:	e77a      	b.n	8001c04 <runRadio+0xb4>
 8001d0e:	bf00      	nop
 8001d10:	08010520 	.word	0x08010520
 8001d14:	08010544 	.word	0x08010544
 8001d18:	08010558 	.word	0x08010558
 8001d1c:	08010560 	.word	0x08010560
 8001d20:	0801059c 	.word	0x0801059c
 8001d24:	20000a94 	.word	0x20000a94
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	20000a98 	.word	0x20000a98
 8001d30:	20000a6c 	.word	0x20000a6c
 8001d34:	20000a8c 	.word	0x20000a8c
 8001d38:	08010568 	.word	0x08010568
 8001d3c:	08010574 	.word	0x08010574
 8001d40:	08010580 	.word	0x08010580
 8001d44:	0801058c 	.word	0x0801058c
 8001d48:	20000a90 	.word	0x20000a90
 8001d4c:	0801050c 	.word	0x0801050c

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_MspInit+0x44>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_MspInit+0x44>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_MspInit+0x44>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_MspInit+0x44>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_MspInit+0x44>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_MspInit+0x44>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <HAL_ADC_MspInit+0xa4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d13c      	bne.n	8001e34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_ADC_MspInit+0xa8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin;
 8001e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	; (8001e44 <HAL_ADC_MspInit+0xac>)
 8001e18:	f004 f908 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_ADC_MspInit+0xb0>)
 8001e30:	f004 f8fc 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012200 	.word	0x40012200
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_CRC_MspInit+0x38>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10b      	bne.n	8001e76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_CRC_MspInit+0x3c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_CRC_MspInit+0x3c>)
 8001e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_CRC_MspInit+0x3c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023000 	.word	0x40023000
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a50      	ldr	r2, [pc, #320]	; (8001fec <HAL_DCMI_MspInit+0x160>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 809a 	bne.w	8001fe4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6353      	str	r3, [r2, #52]	; 0x34
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a3c      	ldr	r2, [pc, #240]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_DCMI_MspInit+0x164>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001f40:	2360      	movs	r3, #96	; 0x60
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f50:	230d      	movs	r3, #13
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4826      	ldr	r0, [pc, #152]	; (8001ff4 <HAL_DCMI_MspInit+0x168>)
 8001f5c:	f004 f866 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001f60:	2308      	movs	r3, #8
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f70:	230d      	movs	r3, #13
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <HAL_DCMI_MspInit+0x16c>)
 8001f7c:	f004 f856 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f92:	230d      	movs	r3, #13
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <HAL_DCMI_MspInit+0x170>)
 8001f9e:	f004 f845 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001fa2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fb4:	230d      	movs	r3, #13
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <HAL_DCMI_MspInit+0x174>)
 8001fc0:	f004 f834 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001fc4:	2350      	movs	r3, #80	; 0x50
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fd4:	230d      	movs	r3, #13
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <HAL_DCMI_MspInit+0x178>)
 8001fe0:	f004 f824 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3738      	adds	r7, #56	; 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	50050000 	.word	0x50050000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40021c00 	.word	0x40021c00
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_DMA2D_MspInit+0x44>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d113      	bne.n	8002042 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_DMA2D_MspInit+0x48>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_DMA2D_MspInit+0x48>)
 8002020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_DMA2D_MspInit+0x48>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	205a      	movs	r0, #90	; 0x5a
 8002038:	f002 fddd 	bl	8004bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800203c:	205a      	movs	r0, #90	; 0x5a
 800203e:	f002 fdf6 	bl	8004c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	4002b000 	.word	0x4002b000
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3f      	ldr	r2, [pc, #252]	; (8002170 <HAL_ETH_MspInit+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d178      	bne.n	8002168 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002076:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_ETH_MspInit+0x120>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a3e      	ldr	r2, [pc, #248]	; (8002174 <HAL_ETH_MspInit+0x120>)
 800207c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_ETH_MspInit+0x120>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_ETH_MspInit+0x120>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a38      	ldr	r2, [pc, #224]	; (8002174 <HAL_ETH_MspInit+0x120>)
 8002094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_ETH_MspInit+0x120>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_ETH_MspInit+0x120>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002106:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002118:	230b      	movs	r3, #11
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4815      	ldr	r0, [pc, #84]	; (8002178 <HAL_ETH_MspInit+0x124>)
 8002124:	f003 ff82 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002128:	2332      	movs	r3, #50	; 0x32
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002138:	230b      	movs	r3, #11
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4619      	mov	r1, r3
 8002142:	480e      	ldr	r0, [pc, #56]	; (800217c <HAL_ETH_MspInit+0x128>)
 8002144:	f003 ff72 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002148:	2386      	movs	r3, #134	; 0x86
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002158:	230b      	movs	r3, #11
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <HAL_ETH_MspInit+0x12c>)
 8002164:	f003 ff62 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3738      	adds	r7, #56	; 0x38
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40028000 	.word	0x40028000
 8002174:	40023800 	.word	0x40023800
 8002178:	40021800 	.word	0x40021800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0ac      	sub	sp, #176	; 0xb0
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	2284      	movs	r2, #132	; 0x84
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00e f897 	bl	80102d8 <memset>
  if(hi2c->Instance==I2C1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <HAL_I2C_MspInit+0x13c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d13d      	bne.n	8002230 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f007 f87e 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021ce:	f7ff fbeb 	bl	80019a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80021ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002204:	2304      	movs	r3, #4
 8002206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800220e:	4619      	mov	r1, r3
 8002210:	482d      	ldr	r0, [pc, #180]	; (80022c8 <HAL_I2C_MspInit+0x144>)
 8002212:	f003 ff0b 	bl	800602c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 800221c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800222e:	e042      	b.n	80022b6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_I2C_MspInit+0x148>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d13d      	bne.n	80022b6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800223a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800223e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002246:	f107 0318 	add.w	r3, r7, #24
 800224a:	4618      	mov	r0, r3
 800224c:	f007 f83a 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002256:	f7ff fba7 	bl	80019a8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002272:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227a:	2312      	movs	r3, #18
 800227c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002280:	2301      	movs	r3, #1
 8002282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800228c:	2304      	movs	r3, #4
 800228e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002292:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002296:	4619      	mov	r1, r3
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <HAL_I2C_MspInit+0x14c>)
 800229a:	f003 fec7 	bl	800602c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80022a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_I2C_MspInit+0x140>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
}
 80022b6:	bf00      	nop
 80022b8:	37b0      	adds	r7, #176	; 0xb0
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40005400 	.word	0x40005400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40005c00 	.word	0x40005c00
 80022d0:	40021c00 	.word	0x40021c00

080022d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a55      	ldr	r2, [pc, #340]	; (8002448 <HAL_LTDC_MspInit+0x174>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	f040 80a3 	bne.w	800243e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022f8:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_LTDC_MspInit+0x178>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	4a53      	ldr	r2, [pc, #332]	; (800244c <HAL_LTDC_MspInit+0x178>)
 80022fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002302:	6453      	str	r3, [r2, #68]	; 0x44
 8002304:	4b51      	ldr	r3, [pc, #324]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002310:	4b4e      	ldr	r3, [pc, #312]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6313      	str	r3, [r2, #48]	; 0x30
 800231c:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002328:	4b48      	ldr	r3, [pc, #288]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a47      	ldr	r2, [pc, #284]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4a41      	ldr	r2, [pc, #260]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	6313      	str	r3, [r2, #48]	; 0x30
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a35      	ldr	r2, [pc, #212]	; (800244c <HAL_LTDC_MspInit+0x178>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <HAL_LTDC_MspInit+0x178>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002388:	2310      	movs	r3, #16
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002398:	230e      	movs	r3, #14
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	482b      	ldr	r0, [pc, #172]	; (8002450 <HAL_LTDC_MspInit+0x17c>)
 80023a4:	f003 fe42 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80023a8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ba:	230e      	movs	r3, #14
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	4823      	ldr	r0, [pc, #140]	; (8002454 <HAL_LTDC_MspInit+0x180>)
 80023c6:	f003 fe31 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80023ca:	23f7      	movs	r3, #247	; 0xf7
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023da:	230e      	movs	r3, #14
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	481c      	ldr	r0, [pc, #112]	; (8002458 <HAL_LTDC_MspInit+0x184>)
 80023e6:	f003 fe21 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80023ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023fc:	2309      	movs	r3, #9
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4815      	ldr	r0, [pc, #84]	; (800245c <HAL_LTDC_MspInit+0x188>)
 8002408:	f003 fe10 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800240c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800241e:	230e      	movs	r3, #14
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	4619      	mov	r1, r3
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <HAL_LTDC_MspInit+0x18c>)
 800242a:	f003 fdff 	bl	800602c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2058      	movs	r0, #88	; 0x58
 8002434:	f002 fbdf 	bl	8004bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002438:	2058      	movs	r0, #88	; 0x58
 800243a:	f002 fbf8 	bl	8004c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3738      	adds	r7, #56	; 0x38
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40016800 	.word	0x40016800
 800244c:	40023800 	.word	0x40023800
 8002450:	40021000 	.word	0x40021000
 8002454:	40022400 	.word	0x40022400
 8002458:	40022800 	.word	0x40022800
 800245c:	40021800 	.word	0x40021800
 8002460:	40022000 	.word	0x40022000

08002464 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_QSPI_MspInit+0x10c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d170      	bne.n	8002568 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6393      	str	r3, [r2, #56]	; 0x38
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a34      	ldr	r2, [pc, #208]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024a4:	f043 0310 	orr.w	r3, r3, #16
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a2e      	ldr	r2, [pc, #184]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_QSPI_MspInit+0x110>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80024e6:	2304      	movs	r3, #4
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024f6:	2309      	movs	r3, #9
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	481d      	ldr	r0, [pc, #116]	; (8002578 <HAL_QSPI_MspInit+0x114>)
 8002502:	f003 fd93 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002516:	230a      	movs	r3, #10
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4816      	ldr	r0, [pc, #88]	; (800257c <HAL_QSPI_MspInit+0x118>)
 8002522:	f003 fd83 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002526:	2304      	movs	r3, #4
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002536:	2309      	movs	r3, #9
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	480e      	ldr	r0, [pc, #56]	; (800257c <HAL_QSPI_MspInit+0x118>)
 8002542:	f003 fd73 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002546:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002558:	2309      	movs	r3, #9
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	4807      	ldr	r0, [pc, #28]	; (8002580 <HAL_QSPI_MspInit+0x11c>)
 8002564:	f003 fd62 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002568:	bf00      	nop
 800256a:	3730      	adds	r7, #48	; 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	a0001000 	.word	0xa0001000
 8002574:	40023800 	.word	0x40023800
 8002578:	40021000 	.word	0x40021000
 800257c:	40020400 	.word	0x40020400
 8002580:	40020c00 	.word	0x40020c00

08002584 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0a4      	sub	sp, #144	; 0x90
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	2284      	movs	r2, #132	; 0x84
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f00d fe9f 	bl	80102d8 <memset>
  if(hrtc->Instance==RTC)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RTC_MspInit+0x54>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d114      	bne.n	80025ce <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025a4:	2320      	movs	r3, #32
 80025a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	4618      	mov	r0, r3
 80025b4:	f006 fe86 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80025be:	f7ff f9f3 	bl	80019a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RTC_MspInit+0x58>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <HAL_RTC_MspInit+0x58>)
 80025c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3790      	adds	r7, #144	; 0x90
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40002800 	.word	0x40002800
 80025dc:	40023800 	.word	0x40023800

080025e0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0aa      	sub	sp, #168	; 0xa8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	2284      	movs	r2, #132	; 0x84
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f00d fe69 	bl	80102d8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800260e:	d143      	bne.n	8002698 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002614:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800261e:	2302      	movs	r3, #2
 8002620:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002622:	2302      	movs	r3, #2
 8002624:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fe48 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800263a:	f7ff f9b5 	bl	80019a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_SPDIFRX_MspInit+0xc0>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002686:	2308      	movs	r3, #8
 8002688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800268c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002690:	4619      	mov	r1, r3
 8002692:	4804      	ldr	r0, [pc, #16]	; (80026a4 <HAL_SPDIFRX_MspInit+0xc4>)
 8002694:	f003 fcca 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	37a8      	adds	r7, #168	; 0xa8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020c00 	.word	0x40020c00

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_SPI_MspInit+0xb4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d144      	bne.n	8002754 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a24      	ldr	r2, [pc, #144]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_SPI_MspInit+0xb8>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002712:	2302      	movs	r3, #2
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002722:	2305      	movs	r3, #5
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <HAL_SPI_MspInit+0xbc>)
 800272e:	f003 fc7d 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002732:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002744:	2305      	movs	r3, #5
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <HAL_SPI_MspInit+0xc0>)
 8002750:	f003 fc6c 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40003800 	.word	0x40003800
 8002760:	40023800 	.word	0x40023800
 8002764:	40022000 	.word	0x40022000
 8002768:	40020400 	.word	0x40020400

0800276c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <HAL_TIM_Base_MspInit+0xc8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002796:	e046      	b.n	8002826 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d10c      	bne.n	80027bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
}
 80027ba:	e034      	b.n	8002826 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_TIM_Base_MspInit+0xd0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10c      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
}
 80027de:	e022      	b.n	8002826 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_TIM_Base_MspInit+0xd4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10c      	bne.n	8002804 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
}
 8002802:	e010      	b.n	8002826 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_TIM_Base_MspInit+0xd8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10b      	bne.n	8002826 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_TIM_Base_MspInit+0xcc>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	bf00      	nop
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40023800 	.word	0x40023800
 800283c:	40000400 	.word	0x40000400
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_TIM_PWM_MspInit+0x38>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10b      	bne.n	8002872 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_TIM_PWM_MspInit+0x3c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_TIM_PWM_MspInit+0x3c>)
 8002860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_TIM_PWM_MspInit+0x3c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40001800 	.word	0x40001800
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_TIM_MspPostInit+0x178>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11d      	bne.n	80028e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	484a      	ldr	r0, [pc, #296]	; (8002a08 <HAL_TIM_MspPostInit+0x180>)
 80028e0:	f003 fba4 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028e4:	e087      	b.n	80029f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d11d      	bne.n	800292c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800291a:	2301      	movs	r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	4838      	ldr	r0, [pc, #224]	; (8002a08 <HAL_TIM_MspPostInit+0x180>)
 8002926:	f003 fb81 	bl	800602c <HAL_GPIO_Init>
}
 800292a:	e064      	b.n	80029f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a36      	ldr	r2, [pc, #216]	; (8002a0c <HAL_TIM_MspPostInit+0x184>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d11c      	bne.n	8002970 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a32      	ldr	r2, [pc, #200]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800294e:	2310      	movs	r3, #16
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800295e:	2302      	movs	r3, #2
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	4829      	ldr	r0, [pc, #164]	; (8002a10 <HAL_TIM_MspPostInit+0x188>)
 800296a:	f003 fb5f 	bl	800602c <HAL_GPIO_Init>
}
 800296e:	e042      	b.n	80029f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_TIM_MspPostInit+0x18c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11c      	bne.n	80029b4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002992:	2301      	movs	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	481a      	ldr	r0, [pc, #104]	; (8002a18 <HAL_TIM_MspPostInit+0x190>)
 80029ae:	f003 fb3d 	bl	800602c <HAL_GPIO_Init>
}
 80029b2:	e020      	b.n	80029f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_TIM_MspPostInit+0x194>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11b      	bne.n	80029f6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_TIM_MspPostInit+0x17c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029e6:	2309      	movs	r3, #9
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <HAL_TIM_MspPostInit+0x198>)
 80029f2:	f003 fb1b 	bl	800602c <HAL_GPIO_Init>
}
 80029f6:	bf00      	nop
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40001800 	.word	0x40001800
 8002a20:	40021c00 	.word	0x40021c00

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ae      	sub	sp, #184	; 0xb8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	2284      	movs	r2, #132	; 0x84
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f00d fc47 	bl	80102d8 <memset>
  if(huart->Instance==USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <HAL_UART_MspInit+0x178>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d15d      	bne.n	8002b10 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a54:	2340      	movs	r3, #64	; 0x40
 8002a56:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	4618      	mov	r0, r3
 8002a62:	f006 fc2f 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a6c:	f7fe ff9c 	bl	80019a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7c:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4a44      	ldr	r2, [pc, #272]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	6313      	str	r3, [r2, #48]	; 0x30
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad0:	2307      	movs	r3, #7
 8002ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4831      	ldr	r0, [pc, #196]	; (8002ba4 <HAL_UART_MspInit+0x180>)
 8002ade:	f003 faa5 	bl	800602c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afc:	2307      	movs	r3, #7
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4827      	ldr	r0, [pc, #156]	; (8002ba8 <HAL_UART_MspInit+0x184>)
 8002b0a:	f003 fa8f 	bl	800602c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b0e:	e040      	b.n	8002b92 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <HAL_UART_MspInit+0x188>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d13b      	bne.n	8002b92 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b1e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b20:	2300      	movs	r3, #0
 8002b22:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b24:	f107 0320 	add.w	r3, r7, #32
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 fbcb 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002b34:	f7fe ff38 	bl	80019a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b3e:	f043 0320 	orr.w	r3, r3, #32
 8002b42:	6453      	str	r3, [r2, #68]	; 0x44
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_UART_MspInit+0x17c>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b80:	2308      	movs	r3, #8
 8002b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <HAL_UART_MspInit+0x18c>)
 8002b8e:	f003 fa4d 	bl	800602c <HAL_GPIO_Init>
}
 8002b92:	bf00      	nop
 8002b94:	37b8      	adds	r7, #184	; 0xb8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40020800 	.word	0x40020800

08002bb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_FMC_MspInit+0x100>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d16d      	bne.n	8002cac <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_FMC_MspInit+0x100>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_FMC_MspInit+0x104>)
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	4a37      	ldr	r2, [pc, #220]	; (8002cb8 <HAL_FMC_MspInit+0x104>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6393      	str	r3, [r2, #56]	; 0x38
 8002be2:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_FMC_MspInit+0x104>)
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002bee:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bf2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c00:	230c      	movs	r3, #12
 8002c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	482c      	ldr	r0, [pc, #176]	; (8002cbc <HAL_FMC_MspInit+0x108>)
 8002c0a:	f003 fa0f 	bl	800602c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002c0e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c12:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c20:	230c      	movs	r3, #12
 8002c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4825      	ldr	r0, [pc, #148]	; (8002cc0 <HAL_FMC_MspInit+0x10c>)
 8002c2a:	f003 f9ff 	bl	800602c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002c2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c32:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c40:	230c      	movs	r3, #12
 8002c42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <HAL_FMC_MspInit+0x110>)
 8002c4a:	f003 f9ef 	bl	800602c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002c4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c52:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c60:	230c      	movs	r3, #12
 8002c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4817      	ldr	r0, [pc, #92]	; (8002cc8 <HAL_FMC_MspInit+0x114>)
 8002c6a:	f003 f9df 	bl	800602c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c6e:	2328      	movs	r3, #40	; 0x28
 8002c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4811      	ldr	r0, [pc, #68]	; (8002ccc <HAL_FMC_MspInit+0x118>)
 8002c88:	f003 f9d0 	bl	800602c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <HAL_FMC_MspInit+0x11c>)
 8002ca6:	f003 f9c1 	bl	800602c <HAL_GPIO_Init>
 8002caa:	e000      	b.n	8002cae <HAL_FMC_MspInit+0xfa>
    return;
 8002cac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000a9c 	.word	0x20000a9c
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021c00 	.word	0x40021c00
 8002cd0:	40020800 	.word	0x40020800

08002cd4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cdc:	f7ff ff6a 	bl	8002bb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <HAL_SAI_MspInit+0xbc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d124      	bne.n	8002d44 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002d22:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002d24:	23f0      	movs	r3, #240	; 0xf0
 8002d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d34:	230a      	movs	r3, #10
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	481c      	ldr	r0, [pc, #112]	; (8002db0 <HAL_SAI_MspInit+0xc8>)
 8002d40:	f003 f974 	bl	800602c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_SAI_MspInit+0xcc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d125      	bne.n	8002d9a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_SAI_MspInit+0xc4>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_SAI_MspInit+0xc0>)
 8002d76:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	4808      	ldr	r0, [pc, #32]	; (8002db8 <HAL_SAI_MspInit+0xd0>)
 8002d96:	f003 f949 	bl	800602c <HAL_GPIO_Init>

    }
}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40015c04 	.word	0x40015c04
 8002da8:	20000aa0 	.word	0x20000aa0
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40015c24 	.word	0x40015c24
 8002db8:	40021800 	.word	0x40021800

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <MemManage_Handler+0x4>

08002dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e08:	f001 fb42 	bl	8004490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <OTG_FS_IRQHandler+0x10>)
 8002e16:	f003 fd39 	bl	800688c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200010d0 	.word	0x200010d0

08002e24 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <LTDC_IRQHandler+0x10>)
 8002e2a:	f005 f9f7 	bl	800821c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000048c 	.word	0x2000048c

08002e38 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <DMA2D_IRQHandler+0x10>)
 8002e3e:	f002 fb91 	bl	8005564 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002f4 	.word	0x200002f4

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f00d f9f2 	bl	8010264 <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20050000 	.word	0x20050000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	20000aa4 	.word	0x20000aa4
 8002eb4:	200013e8 	.word	0x200013e8

08002eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee0:	480d      	ldr	r0, [pc, #52]	; (8002f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ee2:	490e      	ldr	r1, [pc, #56]	; (8002f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee4:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ef8:	4c0b      	ldr	r4, [pc, #44]	; (8002f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f06:	f7ff ffd7 	bl	8002eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f00d f9b1 	bl	8010270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fd fb05 	bl	800051c <main>
  bx  lr    
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002f20:	08012c78 	.word	0x08012c78
  ldr r2, =_sbss
 8002f24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f28:	200013e4 	.word	0x200013e4

08002f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC_IRQHandler>
	...

08002f30 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f36:	2228      	movs	r2, #40	; 0x28
 8002f38:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f3c:	2209      	movs	r2, #9
 8002f3e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f42:	2235      	movs	r2, #53	; 0x35
 8002f44:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f48:	220b      	movs	r2, #11
 8002f4a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f4e:	f240 121b 	movw	r2, #283	; 0x11b
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f56:	f240 2215 	movw	r2, #533	; 0x215
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f5e:	f240 121d 	movw	r2, #285	; 0x11d
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f66:	f240 2235 	movw	r2, #565	; 0x235
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4823      	ldr	r0, [pc, #140]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f70:	f000 fbd4 	bl	800371c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f7e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002f82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <BSP_LCD_Init+0xd0>)
 8002fb8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002fba:	4810      	ldr	r0, [pc, #64]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fbc:	f005 fa2e 	bl	800841c <HAL_LTDC_GetState>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fca:	f000 facd 	bl	8003568 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002fce:	480b      	ldr	r0, [pc, #44]	; (8002ffc <BSP_LCD_Init+0xcc>)
 8002fd0:	f005 f854 	bl	800807c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fda:	480a      	ldr	r0, [pc, #40]	; (8003004 <BSP_LCD_Init+0xd4>)
 8002fdc:	f003 f9d2 	bl	8006384 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	4808      	ldr	r0, [pc, #32]	; (8003008 <BSP_LCD_Init+0xd8>)
 8002fe6:	f003 f9cd 	bl	8006384 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002fea:	f000 fcb7 	bl	800395c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <BSP_LCD_Init+0xdc>)
 8002ff0:	f000 f8d8 	bl	80031a4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000aa8 	.word	0x20000aa8
 8003000:	40016800 	.word	0x40016800
 8003004:	40022000 	.word	0x40022000
 8003008:	40022800 	.word	0x40022800
 800300c:	20000004 	.word	0x20000004

08003010 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <BSP_LCD_GetXSize+0x20>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a06      	ldr	r2, [pc, #24]	; (8003034 <BSP_LCD_GetXSize+0x24>)
 800301a:	2134      	movs	r1, #52	; 0x34
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3360      	adds	r3, #96	; 0x60
 8003024:	681b      	ldr	r3, [r3, #0]
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000b90 	.word	0x20000b90
 8003034:	20000aa8 	.word	0x20000aa8

08003038 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <BSP_LCD_GetYSize+0x20>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a06      	ldr	r2, [pc, #24]	; (800305c <BSP_LCD_GetYSize+0x24>)
 8003042:	2134      	movs	r1, #52	; 0x34
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3364      	adds	r3, #100	; 0x64
 800304c:	681b      	ldr	r3, [r3, #0]
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	20000b90 	.word	0x20000b90
 800305c:	20000aa8 	.word	0x20000aa8

08003060 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	; 0x40
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003070:	f7ff ffce 	bl	8003010 <BSP_LCD_GetXSize>
 8003074:	4603      	mov	r3, r0
 8003076:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800307c:	f7ff ffdc 	bl	8003038 <BSP_LCD_GetYSize>
 8003080:	4603      	mov	r3, r0
 8003082:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800308c:	23ff      	movs	r3, #255	; 0xff
 800308e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80030a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80030ac:	2307      	movs	r3, #7
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80030b0:	f7ff ffae 	bl	8003010 <BSP_LCD_GetXSize>
 80030b4:	4603      	mov	r3, r0
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80030b8:	f7ff ffbe 	bl	8003038 <BSP_LCD_GetYSize>
 80030bc:	4603      	mov	r3, r0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4619      	mov	r1, r3
 80030c8:	4812      	ldr	r0, [pc, #72]	; (8003114 <BSP_LCD_LayerDefaultInit+0xb4>)
 80030ca:	f005 f969 	bl	80083a0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	4911      	ldr	r1, [pc, #68]	; (8003118 <BSP_LCD_LayerDefaultInit+0xb8>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3304      	adds	r3, #4
 80030de:	f04f 32ff 	mov.w	r2, #4294967295
 80030e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	490c      	ldr	r1, [pc, #48]	; (8003118 <BSP_LCD_LayerDefaultInit+0xb8>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3308      	adds	r3, #8
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <BSP_LCD_LayerDefaultInit+0xbc>)
 80030f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	4907      	ldr	r1, [pc, #28]	; (8003118 <BSP_LCD_LayerDefaultInit+0xb8>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	3740      	adds	r7, #64	; 0x40
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000aa8 	.word	0x20000aa8
 8003118:	20000b94 	.word	0x20000b94
 800311c:	20000004 	.word	0x20000004

08003120 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <BSP_LCD_SelectLayer+0x1c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
} 
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000b90 	.word	0x20000b90

08003140 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <BSP_LCD_SetTextColor+0x28>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <BSP_LCD_SetTextColor+0x2c>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	20000b90 	.word	0x20000b90
 800316c:	20000b94 	.word	0x20000b94

08003170 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <BSP_LCD_SetBackColor+0x2c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4908      	ldr	r1, [pc, #32]	; (80031a0 <BSP_LCD_SetBackColor+0x30>)
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3304      	adds	r3, #4
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000b90 	.word	0x20000b90
 80031a0:	20000b94 	.word	0x20000b94

080031a4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <BSP_LCD_SetFont+0x2c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4908      	ldr	r1, [pc, #32]	; (80031d4 <BSP_LCD_SetFont+0x30>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3308      	adds	r3, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000b90 	.word	0x20000b90
 80031d4:	20000b94 	.word	0x20000b94

080031d8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <BSP_LCD_GetFont+0x24>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <BSP_LCD_GetFont+0x28>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3308      	adds	r3, #8
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000b90 	.word	0x20000b90
 8003200:	20000b94 	.word	0x20000b94

08003204 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b085      	sub	sp, #20
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <BSP_LCD_Clear+0x48>)
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <BSP_LCD_Clear+0x48>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <BSP_LCD_Clear+0x4c>)
 8003216:	2134      	movs	r1, #52	; 0x34
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	335c      	adds	r3, #92	; 0x5c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461e      	mov	r6, r3
 8003224:	f7ff fef4 	bl	8003010 <BSP_LCD_GetXSize>
 8003228:	4605      	mov	r5, r0
 800322a:	f7ff ff05 	bl	8003038 <BSP_LCD_GetYSize>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	2300      	movs	r3, #0
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	462a      	mov	r2, r5
 800323c:	4631      	mov	r1, r6
 800323e:	4620      	mov	r0, r4
 8003240:	f000 fb40 	bl	80038c4 <LL_FillBuffer>
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324c:	20000b90 	.word	0x20000b90
 8003250:	20000aa8 	.word	0x20000aa8

08003254 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	80fb      	strh	r3, [r7, #6]
 800325e:	460b      	mov	r3, r1
 8003260:	80bb      	strh	r3, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <BSP_LCD_DisplayChar+0x80>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	491b      	ldr	r1, [pc, #108]	; (80032d8 <BSP_LCD_DisplayChar+0x84>)
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3308      	adds	r3, #8
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <BSP_LCD_DisplayChar+0x80>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4c14      	ldr	r4, [pc, #80]	; (80032d8 <BSP_LCD_DisplayChar+0x84>)
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4423      	add	r3, r4
 8003292:	3308      	adds	r3, #8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003298:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <BSP_LCD_DisplayChar+0x80>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <BSP_LCD_DisplayChar+0x84>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4423      	add	r3, r4
 80032ac:	3308      	adds	r3, #8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	889b      	ldrh	r3, [r3, #4]
 80032b2:	3307      	adds	r3, #7
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da00      	bge.n	80032ba <BSP_LCD_DisplayChar+0x66>
 80032b8:	3307      	adds	r3, #7
 80032ba:	10db      	asrs	r3, r3, #3
 80032bc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032c0:	18ca      	adds	r2, r1, r3
 80032c2:	88b9      	ldrh	r1, [r7, #4]
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa44 	bl	8003754 <DrawChar>
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	20000b90 	.word	0x20000b90
 80032d8:	20000b94 	.word	0x20000b94

080032dc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60ba      	str	r2, [r7, #8]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	81fb      	strh	r3, [r7, #14]
 80032ea:	460b      	mov	r3, r1
 80032ec:	81bb      	strh	r3, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80032f2:	2301      	movs	r3, #1
 80032f4:	83fb      	strh	r3, [r7, #30]
 80032f6:	2300      	movs	r3, #0
 80032f8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003306:	e002      	b.n	800330e <BSP_LCD_DisplayStringAt+0x32>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3301      	adds	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	617a      	str	r2, [r7, #20]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f6      	bne.n	8003308 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800331a:	f7ff fe79 	bl	8003010 <BSP_LCD_GetXSize>
 800331e:	4601      	mov	r1, r0
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4850      	ldr	r0, [pc, #320]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3308      	adds	r3, #8
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	889b      	ldrh	r3, [r3, #4]
 8003336:	fbb1 f3f3 	udiv	r3, r1, r3
 800333a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d01c      	beq.n	800337c <BSP_LCD_DisplayStringAt+0xa0>
 8003342:	2b03      	cmp	r3, #3
 8003344:	dc33      	bgt.n	80033ae <BSP_LCD_DisplayStringAt+0xd2>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d002      	beq.n	8003350 <BSP_LCD_DisplayStringAt+0x74>
 800334a:	2b02      	cmp	r3, #2
 800334c:	d019      	beq.n	8003382 <BSP_LCD_DisplayStringAt+0xa6>
 800334e:	e02e      	b.n	80033ae <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad1      	subs	r1, r2, r3
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4843      	ldr	r0, [pc, #268]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3308      	adds	r3, #8
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	889b      	ldrh	r3, [r3, #4]
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	4413      	add	r3, r2
 8003378:	83fb      	strh	r3, [r7, #30]
      break;
 800337a:	e01b      	b.n	80033b4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	83fb      	strh	r3, [r7, #30]
      break;
 8003380:	e018      	b.n	80033b4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	b299      	uxth	r1, r3
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4836      	ldr	r0, [pc, #216]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4403      	add	r3, r0
 800339a:	3308      	adds	r3, #8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	889b      	ldrh	r3, [r3, #4]
 80033a0:	fb11 f303 	smulbb	r3, r1, r3
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	83fb      	strh	r3, [r7, #30]
      break;
 80033ac:	e002      	b.n	80033b4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	83fb      	strh	r3, [r7, #30]
      break;
 80033b2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80033b4:	8bfb      	ldrh	r3, [r7, #30]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <BSP_LCD_DisplayStringAt+0xe6>
 80033ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da1d      	bge.n	80033fe <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033c6:	e01a      	b.n	80033fe <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	89b9      	ldrh	r1, [r7, #12]
 80033ce:	8bfb      	ldrh	r3, [r7, #30]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff3f 	bl	8003254 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4923      	ldr	r1, [pc, #140]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3308      	adds	r3, #8
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	889a      	ldrh	r2, [r3, #4]
 80033ec:	8bfb      	ldrh	r3, [r7, #30]
 80033ee:	4413      	add	r3, r2
 80033f0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
    i++;
 80033f8:	8bbb      	ldrh	r3, [r7, #28]
 80033fa:	3301      	adds	r3, #1
 80033fc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2dc      	uxtb	r4, r3
 800340c:	f7ff fe00 	bl	8003010 <BSP_LCD_GetXSize>
 8003410:	8bb9      	ldrh	r1, [r7, #28]
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4d14      	ldr	r5, [pc, #80]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	442b      	add	r3, r5
 8003422:	3308      	adds	r3, #8
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	889b      	ldrh	r3, [r3, #4]
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ac3      	subs	r3, r0, r3
 800342e:	b299      	uxth	r1, r3
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <BSP_LCD_DisplayStringAt+0x188>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <BSP_LCD_DisplayStringAt+0x18c>)
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4403      	add	r3, r0
 8003440:	3308      	adds	r3, #8
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	889b      	ldrh	r3, [r3, #4]
 8003446:	4299      	cmp	r1, r3
 8003448:	bf2c      	ite	cs
 800344a:	2301      	movcs	r3, #1
 800344c:	2300      	movcc	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4023      	ands	r3, r4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1b7      	bne.n	80033c8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bdb0      	pop	{r4, r5, r7, pc}
 8003462:	bf00      	nop
 8003464:	20000b90 	.word	0x20000b90
 8003468:	20000b94 	.word	0x20000b94

0800346c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003478:	f7ff feae 	bl	80031d8 <BSP_LCD_GetFont>
 800347c:	4603      	mov	r3, r0
 800347e:	88db      	ldrh	r3, [r3, #6]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	fb12 f303 	smulbb	r3, r2, r3
 8003486:	b299      	uxth	r1, r3
 8003488:	2303      	movs	r3, #3
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	2000      	movs	r0, #0
 800348e:	f7ff ff25 	bl	80032dc <BSP_LCD_DisplayStringAt>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	603a      	str	r2, [r7, #0]
 80034a6:	80fb      	strh	r3, [r7, #6]
 80034a8:	460b      	mov	r3, r1
 80034aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <BSP_LCD_DrawPixel+0x88>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <BSP_LCD_DrawPixel+0x8c>)
 80034b2:	2134      	movs	r1, #52	; 0x34
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3348      	adds	r3, #72	; 0x48
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d116      	bne.n	80034f0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <BSP_LCD_DrawPixel+0x88>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <BSP_LCD_DrawPixel+0x8c>)
 80034c8:	2134      	movs	r1, #52	; 0x34
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	335c      	adds	r3, #92	; 0x5c
 80034d2:	681c      	ldr	r4, [r3, #0]
 80034d4:	88bd      	ldrh	r5, [r7, #4]
 80034d6:	f7ff fd9b 	bl	8003010 <BSP_LCD_GetXSize>
 80034da:	4603      	mov	r3, r0
 80034dc:	fb03 f205 	mul.w	r2, r3, r5
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	4413      	add	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4423      	add	r3, r4
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80034ee:	e015      	b.n	800351c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <BSP_LCD_DrawPixel+0x88>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <BSP_LCD_DrawPixel+0x8c>)
 80034f6:	2134      	movs	r1, #52	; 0x34
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	681c      	ldr	r4, [r3, #0]
 8003502:	88bd      	ldrh	r5, [r7, #4]
 8003504:	f7ff fd84 	bl	8003010 <BSP_LCD_GetXSize>
 8003508:	4603      	mov	r3, r0
 800350a:	fb03 f205 	mul.w	r2, r3, r5
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4423      	add	r3, r4
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bdb0      	pop	{r4, r5, r7, pc}
 8003524:	20000b90 	.word	0x20000b90
 8003528:	20000aa8 	.word	0x20000aa8

0800352c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <BSP_LCD_DisplayOn+0x30>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <BSP_LCD_DisplayOn+0x30>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003540:	2201      	movs	r2, #1
 8003542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003546:	4806      	ldr	r0, [pc, #24]	; (8003560 <BSP_LCD_DisplayOn+0x34>)
 8003548:	f002 ff1c 	bl	8006384 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800354c:	2201      	movs	r2, #1
 800354e:	2108      	movs	r1, #8
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <BSP_LCD_DisplayOn+0x38>)
 8003552:	f002 ff17 	bl	8006384 <HAL_GPIO_WritePin>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000aa8 	.word	0x20000aa8
 8003560:	40022000 	.word	0x40022000
 8003564:	40022800 	.word	0x40022800

08003568 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b090      	sub	sp, #64	; 0x40
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003572:	4b64      	ldr	r3, [pc, #400]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	4b61      	ldr	r3, [pc, #388]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800358a:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035a2:	4b58      	ldr	r3, [pc, #352]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a57      	ldr	r2, [pc, #348]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035a8:	f043 0310 	orr.w	r3, r3, #16
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b55      	ldr	r3, [pc, #340]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ba:	4b52      	ldr	r3, [pc, #328]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a51      	ldr	r2, [pc, #324]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b4f      	ldr	r3, [pc, #316]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035d2:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b49      	ldr	r3, [pc, #292]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a45      	ldr	r2, [pc, #276]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003602:	4b40      	ldr	r3, [pc, #256]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a39      	ldr	r2, [pc, #228]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a33      	ldr	r2, [pc, #204]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <BSP_LCD_MspInit+0x19c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800364a:	2310      	movs	r3, #16
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003656:	2302      	movs	r3, #2
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800365a:	230e      	movs	r3, #14
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800365e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003662:	4619      	mov	r1, r3
 8003664:	4828      	ldr	r0, [pc, #160]	; (8003708 <BSP_LCD_MspInit+0x1a0>)
 8003666:	f002 fce1 	bl	800602c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003674:	2309      	movs	r3, #9
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367c:	4619      	mov	r1, r3
 800367e:	4823      	ldr	r0, [pc, #140]	; (800370c <BSP_LCD_MspInit+0x1a4>)
 8003680:	f002 fcd4 	bl	800602c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003684:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800368e:	230e      	movs	r3, #14
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003696:	4619      	mov	r1, r3
 8003698:	481d      	ldr	r0, [pc, #116]	; (8003710 <BSP_LCD_MspInit+0x1a8>)
 800369a:	f002 fcc7 	bl	800602c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800369e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036a8:	230e      	movs	r3, #14
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80036ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b0:	4619      	mov	r1, r3
 80036b2:	4818      	ldr	r0, [pc, #96]	; (8003714 <BSP_LCD_MspInit+0x1ac>)
 80036b4:	f002 fcba 	bl	800602c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80036b8:	23f7      	movs	r3, #247	; 0xf7
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036bc:	2302      	movs	r3, #2
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036c0:	230e      	movs	r3, #14
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80036c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c8:	4619      	mov	r1, r3
 80036ca:	4813      	ldr	r0, [pc, #76]	; (8003718 <BSP_LCD_MspInit+0x1b0>)
 80036cc:	f002 fcae 	bl	800602c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80036d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036d6:	2301      	movs	r3, #1
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80036da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036de:	4619      	mov	r1, r3
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <BSP_LCD_MspInit+0x1a8>)
 80036e2:	f002 fca3 	bl	800602c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80036e6:	2308      	movs	r3, #8
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f2:	4619      	mov	r1, r3
 80036f4:	4808      	ldr	r0, [pc, #32]	; (8003718 <BSP_LCD_MspInit+0x1b0>)
 80036f6:	f002 fc99 	bl	800602c <HAL_GPIO_Init>
}
 80036fa:	bf00      	nop
 80036fc:	3740      	adds	r7, #64	; 0x40
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40021000 	.word	0x40021000
 800370c:	40021800 	.word	0x40021800
 8003710:	40022000 	.word	0x40022000
 8003714:	40022400 	.word	0x40022400
 8003718:	40022800 	.word	0x40022800

0800371c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <BSP_LCD_ClockConfig+0x34>)
 8003728:	2208      	movs	r2, #8
 800372a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <BSP_LCD_ClockConfig+0x34>)
 800372e:	22c0      	movs	r2, #192	; 0xc0
 8003730:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <BSP_LCD_ClockConfig+0x34>)
 8003734:	2205      	movs	r2, #5
 8003736:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <BSP_LCD_ClockConfig+0x34>)
 800373a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003740:	4803      	ldr	r0, [pc, #12]	; (8003750 <BSP_LCD_ClockConfig+0x34>)
 8003742:	f005 fdbf 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000bac 	.word	0x20000bac

08003754 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	80fb      	strh	r3, [r7, #6]
 8003760:	460b      	mov	r3, r1
 8003762:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <DrawChar+0x168>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4953      	ldr	r1, [pc, #332]	; (80038c0 <DrawChar+0x16c>)
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3308      	adds	r3, #8
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	88db      	ldrh	r3, [r3, #6]
 8003782:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <DrawChar+0x168>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <DrawChar+0x16c>)
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3308      	adds	r3, #8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	889b      	ldrh	r3, [r3, #4]
 800379a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800379c:	8a3b      	ldrh	r3, [r7, #16]
 800379e:	3307      	adds	r3, #7
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	da00      	bge.n	80037a6 <DrawChar+0x52>
 80037a4:	3307      	adds	r3, #7
 80037a6:	10db      	asrs	r3, r3, #3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	8a3b      	ldrh	r3, [r7, #16]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e076      	b.n	80038aa <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80037bc:	8a3b      	ldrh	r3, [r7, #16]
 80037be:	3307      	adds	r3, #7
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da00      	bge.n	80037c6 <DrawChar+0x72>
 80037c4:	3307      	adds	r3, #7
 80037c6:	10db      	asrs	r3, r3, #3
 80037c8:	461a      	mov	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80037d6:	8a3b      	ldrh	r3, [r7, #16]
 80037d8:	3307      	adds	r3, #7
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da00      	bge.n	80037e0 <DrawChar+0x8c>
 80037de:	3307      	adds	r3, #7
 80037e0:	10db      	asrs	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d002      	beq.n	80037ec <DrawChar+0x98>
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d004      	beq.n	80037f4 <DrawChar+0xa0>
 80037ea:	e00c      	b.n	8003806 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	e016      	b.n	8003822 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	3201      	adds	r2, #1
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
      break;
 8003804:	e00d      	b.n	8003822 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3301      	adds	r3, #1
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	4313      	orrs	r3, r2
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	3202      	adds	r2, #2
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
      break;
 8003820:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e036      	b.n	8003896 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003828:	8a3a      	ldrh	r2, [r7, #16]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4413      	add	r3, r2
 8003832:	3b01      	subs	r3, #1
 8003834:	2201      	movs	r2, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	461a      	mov	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	b29a      	uxth	r2, r3
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4413      	add	r3, r2
 800384c:	b298      	uxth	r0, r3
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <DrawChar+0x168>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	491b      	ldr	r1, [pc, #108]	; (80038c0 <DrawChar+0x16c>)
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	88bb      	ldrh	r3, [r7, #4]
 8003862:	4619      	mov	r1, r3
 8003864:	f7ff fe1a 	bl	800349c <BSP_LCD_DrawPixel>
 8003868:	e012      	b.n	8003890 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	b29a      	uxth	r2, r3
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	4413      	add	r3, r2
 8003872:	b298      	uxth	r0, r3
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <DrawChar+0x168>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4911      	ldr	r1, [pc, #68]	; (80038c0 <DrawChar+0x16c>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3304      	adds	r3, #4
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	88bb      	ldrh	r3, [r7, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	f7ff fe06 	bl	800349c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3301      	adds	r3, #1
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	8a3b      	ldrh	r3, [r7, #16]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d3c4      	bcc.n	8003828 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800389e:	88bb      	ldrh	r3, [r7, #4]
 80038a0:	3301      	adds	r3, #1
 80038a2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	8a7b      	ldrh	r3, [r7, #18]
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d384      	bcc.n	80037bc <DrawChar+0x68>
  }
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000b90 	.word	0x20000b90
 80038c0:	20000b94 	.word	0x20000b94

080038c4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <LL_FillBuffer+0x88>)
 80038d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038d8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <LL_FillBuffer+0x8c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <LL_FillBuffer+0x90>)
 80038e0:	2134      	movs	r1, #52	; 0x34
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3348      	adds	r3, #72	; 0x48
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d103      	bne.n	80038f8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <LL_FillBuffer+0x88>)
 80038f2:	2202      	movs	r2, #2
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	e002      	b.n	80038fe <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <LL_FillBuffer+0x88>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <LL_FillBuffer+0x88>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <LL_FillBuffer+0x88>)
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <LL_FillBuffer+0x94>)
 8003908:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800390a:	4810      	ldr	r0, [pc, #64]	; (800394c <LL_FillBuffer+0x88>)
 800390c:	f001 fccc 	bl	80052a8 <HAL_DMA2D_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <LL_FillBuffer+0x88>)
 800391a:	f001 ff33 	bl	8005784 <HAL_DMA2D_ConfigLayer>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10e      	bne.n	8003942 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <LL_FillBuffer+0x88>)
 8003930:	f001 fd04 	bl	800533c <HAL_DMA2D_Start>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800393a:	210a      	movs	r1, #10
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <LL_FillBuffer+0x88>)
 800393e:	f001 fd28 	bl	8005392 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000b50 	.word	0x20000b50
 8003950:	20000b90 	.word	0x20000b90
 8003954:	20000aa8 	.word	0x20000aa8
 8003958:	4002b000 	.word	0x4002b000

0800395c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003960:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 8003962:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <BSP_SDRAM_Init+0xb0>)
 8003964:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003966:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 8003968:	2202      	movs	r2, #2
 800396a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 800396e:	2207      	movs	r2, #7
 8003970:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003972:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 8003974:	2204      	movs	r2, #4
 8003976:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 800397a:	2207      	movs	r2, #7
 800397c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 8003980:	2202      	movs	r2, #2
 8003982:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 8003986:	2202      	movs	r2, #2
 8003988:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 800398c:	2202      	movs	r2, #2
 800398e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003996:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 800399e:	2204      	movs	r2, #4
 80039a0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80039a2:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039a4:	2210      	movs	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80039d2:	2100      	movs	r1, #0
 80039d4:	480c      	ldr	r0, [pc, #48]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039d6:	f000 f87f 	bl	8003ad8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <BSP_SDRAM_Init+0xb4>)
 80039dc:	480a      	ldr	r0, [pc, #40]	; (8003a08 <BSP_SDRAM_Init+0xac>)
 80039de:	f006 ff31 	bl	800a844 <HAL_SDRAM_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <BSP_SDRAM_Init+0xb8>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e002      	b.n	80039f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <BSP_SDRAM_Init+0xb8>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80039f6:	f240 6003 	movw	r0, #1539	; 0x603
 80039fa:	f000 f80d 	bl	8003a18 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <BSP_SDRAM_Init+0xb8>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000c30 	.word	0x20000c30
 8003a0c:	a0000140 	.word	0xa0000140
 8003a10:	20000c64 	.word	0x20000c64
 8003a14:	20000014 	.word	0x20000014

08003a18 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a36:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a40:	4923      	ldr	r1, [pc, #140]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a42:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a44:	f006 ff32 	bl	800a8ac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f000 fd41 	bl	80044d0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a50:	2202      	movs	r2, #2
 8003a52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a54:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a56:	2210      	movs	r2, #16
 8003a58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6a:	4919      	ldr	r1, [pc, #100]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a6c:	4819      	ldr	r0, [pc, #100]	; (8003ad4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a6e:	f006 ff1d 	bl	800a8ac <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a74:	2203      	movs	r2, #3
 8003a76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a80:	2208      	movs	r2, #8
 8003a82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8e:	4910      	ldr	r1, [pc, #64]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a90:	4810      	ldr	r0, [pc, #64]	; (8003ad4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a92:	f006 ff0b 	bl	800a8ac <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a96:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a9a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ab2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab8:	4905      	ldr	r1, [pc, #20]	; (8003ad0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aba:	4806      	ldr	r0, [pc, #24]	; (8003ad4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003abc:	f006 fef6 	bl	800a8ac <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ac4:	f006 ff27 	bl	800a916 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000c80 	.word	0x20000c80
 8003ad4:	20000c30 	.word	0x20000c30

08003ad8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ae2:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	4a6f      	ldr	r2, [pc, #444]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6393      	str	r3, [r2, #56]	; 0x38
 8003aee:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003afa:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a69      	ldr	r2, [pc, #420]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b67      	ldr	r3, [pc, #412]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	4b64      	ldr	r3, [pc, #400]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a63      	ldr	r2, [pc, #396]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b42:	4b58      	ldr	r3, [pc, #352]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4e:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b5a:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b60:	f043 0320 	orr.w	r3, r3, #32
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a4b      	ldr	r2, [pc, #300]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b8a:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a45      	ldr	r2, [pc, #276]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <BSP_SDRAM_MspInit+0x1cc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003baa:	2302      	movs	r3, #2
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003bae:	230c      	movs	r3, #12
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bba:	4619      	mov	r1, r3
 8003bbc:	483a      	ldr	r0, [pc, #232]	; (8003ca8 <BSP_SDRAM_MspInit+0x1d0>)
 8003bbe:	f002 fa35 	bl	800602c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003bc2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4837      	ldr	r0, [pc, #220]	; (8003cac <BSP_SDRAM_MspInit+0x1d4>)
 8003bd0:	f002 fa2c 	bl	800602c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003bd4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bde:	4619      	mov	r1, r3
 8003be0:	4833      	ldr	r0, [pc, #204]	; (8003cb0 <BSP_SDRAM_MspInit+0x1d8>)
 8003be2:	f002 fa23 	bl	800602c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003be6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4830      	ldr	r0, [pc, #192]	; (8003cb4 <BSP_SDRAM_MspInit+0x1dc>)
 8003bf4:	f002 fa1a 	bl	800602c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003bf8:	f248 1333 	movw	r3, #33075	; 0x8133
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c02:	4619      	mov	r1, r3
 8003c04:	482c      	ldr	r0, [pc, #176]	; (8003cb8 <BSP_SDRAM_MspInit+0x1e0>)
 8003c06:	f002 fa11 	bl	800602c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003c0a:	2328      	movs	r3, #40	; 0x28
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c12:	4619      	mov	r1, r3
 8003c14:	4829      	ldr	r0, [pc, #164]	; (8003cbc <BSP_SDRAM_MspInit+0x1e4>)
 8003c16:	f002 fa09 	bl	800602c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c34:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c44:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c52:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <BSP_SDRAM_MspInit+0x1ec>)
 8003c70:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
 8003c78:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c7e:	4810      	ldr	r0, [pc, #64]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c80:	f001 fa02 	bl	8005088 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c84:	480e      	ldr	r0, [pc, #56]	; (8003cc0 <BSP_SDRAM_MspInit+0x1e8>)
 8003c86:	f001 f951 	bl	8004f2c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	2038      	movs	r0, #56	; 0x38
 8003c90:	f000 ffb1 	bl	8004bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c94:	2038      	movs	r0, #56	; 0x38
 8003c96:	f000 ffca 	bl	8004c2e <HAL_NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3740      	adds	r7, #64	; 0x40
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	20000c90 	.word	0x20000c90
 8003cc4:	40026410 	.word	0x40026410

08003cc8 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <nRF24_CSN_L+0x18>)
 8003cd2:	f002 fb57 	bl	8006384 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f000 fbfa 	bl	80044d0 <HAL_Delay>
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021400 	.word	0x40021400

08003ce4 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	4803      	ldr	r0, [pc, #12]	; (8003cfc <nRF24_CSN_H+0x18>)
 8003cee:	f002 fb49 	bl	8006384 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f000 fbec 	bl	80044d0 <HAL_Delay>
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021400 	.word	0x40021400

08003d00 <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 8003d0a:	f107 020f 	add.w	r2, r7, #15
 8003d0e:	1df9      	adds	r1, r7, #7
 8003d10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2301      	movs	r3, #1
 8003d18:	4806      	ldr	r0, [pc, #24]	; (8003d34 <nRF24_LL_RW+0x34>)
 8003d1a:	f006 ff2c 	bl	800ab76 <HAL_SPI_TransmitReceive>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <nRF24_LL_RW+0x28>
        Error_Handler();
 8003d24:	f7fd fe40 	bl	80019a8 <Error_Handler>
    return result;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200006f4 	.word	0x200006f4

08003d38 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8003d42:	f7ff ffc1 	bl	8003cc8 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffd6 	bl	8003d00 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003d54:	20ff      	movs	r0, #255	; 0xff
 8003d56:	f7ff ffd3 	bl	8003d00 <nRF24_LL_RW>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8003d5e:	f7ff ffc1 	bl	8003ce4 <nRF24_CSN_H>

	return value;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	460a      	mov	r2, r1
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003d7c:	f7ff ffa4 	bl	8003cc8 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b1f      	cmp	r3, #31
 8003d84:	d810      	bhi.n	8003da8 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	f043 0320 	orr.w	r3, r3, #32
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ffb1 	bl	8003d00 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8003d9e:	79bb      	ldrb	r3, [r7, #6]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ffad 	bl	8003d00 <nRF24_LL_RW>
 8003da6:	e013      	b.n	8003dd0 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ffa8 	bl	8003d00 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2be1      	cmp	r3, #225	; 0xe1
 8003db4:	d00c      	beq.n	8003dd0 <nRF24_WriteReg+0x64>
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	2be2      	cmp	r3, #226	; 0xe2
 8003dba:	d009      	beq.n	8003dd0 <nRF24_WriteReg+0x64>
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2be3      	cmp	r3, #227	; 0xe3
 8003dc0:	d006      	beq.n	8003dd0 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d003      	beq.n	8003dd0 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff98 	bl	8003d00 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8003dd0:	f7ff ff88 	bl	8003ce4 <nRF24_CSN_H>
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003dec:	f7ff ff6c 	bl	8003cc8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff84 	bl	8003d00 <nRF24_LL_RW>
	while (count--) {
 8003df8:	e007      	b.n	8003e0a <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003dfa:	683c      	ldr	r4, [r7, #0]
 8003dfc:	1c63      	adds	r3, r4, #1
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	20ff      	movs	r0, #255	; 0xff
 8003e02:	f7ff ff7d 	bl	8003d00 <nRF24_LL_RW>
 8003e06:	4603      	mov	r3, r0
 8003e08:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8003e0a:	79bb      	ldrb	r3, [r7, #6]
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	71ba      	strb	r2, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f2      	bne.n	8003dfa <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8003e14:	f7ff ff66 	bl	8003ce4 <nRF24_CSN_H>
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003e30:	f7ff ff4a 	bl	8003cc8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff62 	bl	8003d00 <nRF24_LL_RW>
	while (count--) {
 8003e3c:	e006      	b.n	8003e4c <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	603a      	str	r2, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff5a 	bl	8003d00 <nRF24_LL_RW>
	while (count--) {
 8003e4c:	79bb      	ldrb	r3, [r7, #6]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	71ba      	strb	r2, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f3      	bne.n	8003e3e <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8003e56:	f7ff ff45 	bl	8003ce4 <nRF24_CSN_H>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8003e62:	b580      	push	{r7, lr}
 8003e64:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8003e66:	2108      	movs	r1, #8
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff ff7f 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8003e6e:	213f      	movs	r1, #63	; 0x3f
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7ff ff7b 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	2002      	movs	r0, #2
 8003e7a:	f7ff ff77 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8003e7e:	2103      	movs	r1, #3
 8003e80:	2003      	movs	r0, #3
 8003e82:	f7ff ff73 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8003e86:	2103      	movs	r1, #3
 8003e88:	2004      	movs	r0, #4
 8003e8a:	f7ff ff6f 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003e8e:	2102      	movs	r1, #2
 8003e90:	2005      	movs	r0, #5
 8003e92:	f7ff ff6b 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8003e96:	210e      	movs	r1, #14
 8003e98:	2006      	movs	r0, #6
 8003e9a:	f7ff ff67 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2007      	movs	r0, #7
 8003ea2:	f7ff ff63 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2011      	movs	r0, #17
 8003eaa:	f7ff ff5f 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	2012      	movs	r0, #18
 8003eb2:	f7ff ff5b 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2013      	movs	r0, #19
 8003eba:	f7ff ff57 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2014      	movs	r0, #20
 8003ec2:	f7ff ff53 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2015      	movs	r0, #21
 8003eca:	f7ff ff4f 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2016      	movs	r0, #22
 8003ed2:	f7ff ff4b 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	201c      	movs	r0, #28
 8003eda:	f7ff ff47 	bl	8003d6c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	201d      	movs	r0, #29
 8003ee2:	f7ff ff43 	bl	8003d6c <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8003ee6:	f000 f9ea 	bl	80042be <nRF24_FlushRX>
	nRF24_FlushTX();
 8003eea:	f000 f9e0 	bl	80042ae <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8003eee:	f000 f9ee 	bl	80042ce <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8003ef2:	f7ff fef7 	bl	8003ce4 <nRF24_CSN_H>
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <nRF24_Check+0x58>)
 8003f04:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8003f06:	2205      	movs	r2, #5
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	2030      	movs	r0, #48	; 0x30
 8003f0c:	f7ff ff88 	bl	8003e20 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8003f10:	463b      	mov	r3, r7
 8003f12:	2205      	movs	r2, #5
 8003f14:	4619      	mov	r1, r3
 8003f16:	2010      	movs	r0, #16
 8003f18:	f7ff ff60 	bl	8003ddc <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e00f      	b.n	8003f42 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	3310      	adds	r3, #16
 8003f26:	443b      	add	r3, r7
 8003f28:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	1c59      	adds	r1, r3, #1
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <nRF24_Check+0x40>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e006      	b.n	8003f4a <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d9ec      	bls.n	8003f22 <nRF24_Check+0x26>
	}

	return 1;
 8003f48:	2301      	movs	r3, #1
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	08010590 	.word	0x08010590

08003f58 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7ff fee8 	bl	8003d38 <nRF24_ReadReg>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d104      	bne.n	8003f7c <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e003      	b.n	8003f84 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	f023 0302 	bic.w	r3, r3, #2
 8003f82:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4619      	mov	r1, r3
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7ff feef 	bl	8003d6c <nRF24_WriteReg>
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7ff fec9 	bl	8003d38 <nRF24_ReadReg>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b25a      	sxtb	r2, r3
 8003fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7ff fece 	bl	8003d6c <nRF24_WriteReg>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8003fe2:	201d      	movs	r0, #29
 8003fe4:	f7ff fea8 	bl	8003d38 <nRF24_ReadReg>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	201d      	movs	r0, #29
 8003ffe:	f7ff feb5 	bl	8003d6c <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8004002:	211f      	movs	r1, #31
 8004004:	201c      	movs	r0, #28
 8004006:	f7ff feb1 	bl	8003d6c <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 800400a:	e00b      	b.n	8004024 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	201d      	movs	r0, #29
 8004018:	f7ff fea8 	bl	8003d6c <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 800401c:	2100      	movs	r1, #0
 800401e:	201c      	movs	r0, #28
 8004020:	f7ff fea4 	bl	8003d6c <nRF24_WriteReg>
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8004036:	201d      	movs	r0, #29
 8004038:	f7ff fe7e 	bl	8003d38 <nRF24_ReadReg>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4619      	mov	r1, r3
 8004050:	201d      	movs	r0, #29
 8004052:	f7ff fe8b 	bl	8003d6c <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8004056:	e007      	b.n	8004068 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	f023 0302 	bic.w	r3, r3, #2
 800405e:	b2db      	uxtb	r3, r3
 8004060:	4619      	mov	r1, r3
 8004062:	201d      	movs	r0, #29
 8004064:	f7ff fe82 	bl	8003d6c <nRF24_WriteReg>
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800407a:	2000      	movs	r0, #0
 800407c:	f7ff fe5c 	bl	8003d38 <nRF24_ReadReg>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	f023 030c 	bic.w	r3, r3, #12
 800408a:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 800408c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	b25a      	sxtb	r2, r3
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	4313      	orrs	r3, r2
 800409c:	b25b      	sxtb	r3, r3
 800409e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	4619      	mov	r1, r3
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff fe61 	bl	8003d6c <nRF24_WriteReg>
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4619      	mov	r1, r3
 80040c0:	2005      	movs	r0, #5
 80040c2:	f7ff fe53 	bl	8003d6c <nRF24_WriteReg>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	3b02      	subs	r3, #2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	4619      	mov	r1, r3
 80040e0:	2003      	movs	r0, #3
 80040e2:	f7ff fe43 	bl	8003d6c <nRF24_WriteReg>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d00a      	beq.n	8004118 <nRF24_SetAddr+0x28>
 8004102:	2b06      	cmp	r3, #6
 8004104:	dc36      	bgt.n	8004174 <nRF24_SetAddr+0x84>
 8004106:	2b01      	cmp	r3, #1
 8004108:	dc02      	bgt.n	8004110 <nRF24_SetAddr+0x20>
 800410a:	2b00      	cmp	r3, #0
 800410c:	da04      	bge.n	8004118 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800410e:	e031      	b.n	8004174 <nRF24_SetAddr+0x84>
 8004110:	3b02      	subs	r3, #2
	switch (pipe) {
 8004112:	2b03      	cmp	r3, #3
 8004114:	d82e      	bhi.n	8004174 <nRF24_SetAddr+0x84>
 8004116:	e023      	b.n	8004160 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8004118:	2003      	movs	r0, #3
 800411a:	f7ff fe0d 	bl	8003d38 <nRF24_ReadReg>
 800411e:	4603      	mov	r3, r0
 8004120:	3301      	adds	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	4413      	add	r3, r2
 800412a:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 800412c:	f7ff fdcc 	bl	8003cc8 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <nRF24_SetAddr+0x90>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	f043 0320 	orr.w	r3, r3, #32
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fddf 	bl	8003d00 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	603a      	str	r2, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fdd8 	bl	8003d00 <nRF24_LL_RW>
			} while (addr_width--);
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	73fa      	strb	r2, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f3      	bne.n	8004142 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 800415a:	f7ff fdc3 	bl	8003ce4 <nRF24_CSN_H>
			break;
 800415e:	e00a      	b.n	8004176 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <nRF24_SetAddr+0x90>)
 8004164:	5cd2      	ldrb	r2, [r2, r3]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7ff fdfd 	bl	8003d6c <nRF24_WriteReg>
			break;
 8004172:	e000      	b.n	8004176 <nRF24_SetAddr+0x86>
			break;
 8004174:	bf00      	nop
	}
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	08012c58 	.word	0x08012c58

08004184 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800418e:	2006      	movs	r0, #6
 8004190:	f7ff fdd2 	bl	8003d38 <nRF24_ReadReg>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	f023 0306 	bic.w	r3, r3, #6
 800419e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	4619      	mov	r1, r3
 80041ac:	2006      	movs	r0, #6
 80041ae:	f7ff fddd 	bl	8003d6c <nRF24_WriteReg>
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80041c4:	2006      	movs	r0, #6
 80041c6:	f7ff fdb7 	bl	8003d38 <nRF24_ReadReg>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80041d4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	4313      	orrs	r3, r2
 80041dc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	4619      	mov	r1, r3
 80041e2:	2006      	movs	r0, #6
 80041e4:	f7ff fdc2 	bl	8003d6c <nRF24_WriteReg>
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
 80041fa:	460b      	mov	r3, r1
 80041fc:	71bb      	strb	r3, [r7, #6]
 80041fe:	4613      	mov	r3, r2
 8004200:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8004202:	2002      	movs	r0, #2
 8004204:	f7ff fd98 	bl	8003d38 <nRF24_ReadReg>
 8004208:	4603      	mov	r3, r0
 800420a:	b25a      	sxtb	r2, r3
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	b25b      	sxtb	r3, r3
 8004216:	4313      	orrs	r3, r2
 8004218:	b25b      	sxtb	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	4619      	mov	r1, r3
 8004226:	2002      	movs	r0, #2
 8004228:	f7ff fda0 	bl	8003d6c <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <nRF24_SetRXPipe+0xa4>)
 8004230:	5cd2      	ldrb	r2, [r2, r3]
 8004232:	797b      	ldrb	r3, [r7, #5]
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	b2db      	uxtb	r3, r3
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7ff fd95 	bl	8003d6c <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8004242:	2001      	movs	r0, #1
 8004244:	f7ff fd78 	bl	8003d38 <nRF24_ReadReg>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 800424c:	79bb      	ldrb	r3, [r7, #6]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d10a      	bne.n	8004268 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	2201      	movs	r2, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	b25a      	sxtb	r2, r3
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004260:	4313      	orrs	r3, r2
 8004262:	b25b      	sxtb	r3, r3
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e00b      	b.n	8004280 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2201      	movs	r2, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	b25b      	sxtb	r3, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	b25a      	sxtb	r2, r3
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4013      	ands	r3, r2
 800427c:	b25b      	sxtb	r3, r3
 800427e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	4619      	mov	r1, r3
 8004284:	2001      	movs	r0, #1
 8004286:	f7ff fd71 	bl	8003d6c <nRF24_WriteReg>
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	08012c50 	.word	0x08012c50

08004298 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800429c:	2017      	movs	r0, #23
 800429e:	f7ff fd4b 	bl	8003d38 <nRF24_ReadReg>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	b2db      	uxtb	r3, r3
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	bd80      	pop	{r7, pc}

080042ae <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80042b2:	21ff      	movs	r1, #255	; 0xff
 80042b4:	20e1      	movs	r0, #225	; 0xe1
 80042b6:	f7ff fd59 	bl	8003d6c <nRF24_WriteReg>
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}

080042be <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80042be:	b580      	push	{r7, lr}
 80042c0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80042c2:	21ff      	movs	r1, #255	; 0xff
 80042c4:	20e2      	movs	r0, #226	; 0xe2
 80042c6:	f7ff fd51 	bl	8003d6c <nRF24_WriteReg>
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}

080042ce <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80042d4:	2007      	movs	r0, #7
 80042d6:	f7ff fd2f 	bl	8003d38 <nRF24_ReadReg>
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80042e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	4619      	mov	r1, r3
 80042ea:	2007      	movs	r0, #7
 80042ec:	f7ff fd3e 	bl	8003d6c <nRF24_WriteReg>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80042fe:	f7ff fce3 	bl	8003cc8 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8004302:	2060      	movs	r0, #96	; 0x60
 8004304:	f7ff fcfc 	bl	8003d00 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8004308:	20ff      	movs	r0, #255	; 0xff
 800430a:	f7ff fcf9 	bl	8003d00 <nRF24_LL_RW>
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8004312:	f7ff fce7 	bl	8003ce4 <nRF24_CSN_H>

	return value;
 8004316:	79fb      	ldrb	r3, [r7, #7]

}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800432e:	2007      	movs	r0, #7
 8004330:	f7ff fd02 	bl	8003d38 <nRF24_ReadReg>
 8004334:	4603      	mov	r3, r0
 8004336:	105b      	asrs	r3, r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b05      	cmp	r3, #5
 8004344:	d829      	bhi.n	800439a <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00f      	beq.n	800436c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 800434c:	f7ff ffd4 	bl	80042f8 <nRF24_GetRxDplPayloadWidth>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b20      	cmp	r3, #32
 800435e:	d90f      	bls.n	8004380 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8004366:	f7ff ffaa 	bl	80042be <nRF24_FlushRX>
 800436a:	e009      	b.n	8004380 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	4a0f      	ldr	r2, [pc, #60]	; (80043ac <nRF24_ReadPayloadGeneric+0x8c>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fce0 	bl	8003d38 <nRF24_ReadReg>
 8004378:	4603      	mov	r3, r0
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	2061      	movs	r0, #97	; 0x61
 8004392:	f7ff fd23 	bl	8003ddc <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	e003      	b.n	80043a2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80043a0:	23ff      	movs	r3, #255	; 0xff
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08012c50 	.word	0x08012c50

080043b0 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 80043ba:	2201      	movs	r2, #1
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffae 	bl	8004320 <nRF24_ReadPayloadGeneric>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <nRF24_WriteAckPayload>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, char *payload, uint8_t length) {
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	6039      	str	r1, [r7, #0]
 80043d8:	71fb      	strb	r3, [r7, #7]
 80043da:	4613      	mov	r3, r2
 80043dc:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80043de:	f7ff fc73 	bl	8003cc8 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f063 0357 	orn	r3, r3, #87	; 0x57
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fc88 	bl	8003d00 <nRF24_LL_RW>
	while (length--) {
 80043f0:	e006      	b.n	8004400 <nRF24_WriteAckPayload+0x32>
		nRF24_LL_RW((uint8_t) *payload++);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	603a      	str	r2, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fc80 	bl	8003d00 <nRF24_LL_RW>
	while (length--) {
 8004400:	79bb      	ldrb	r3, [r7, #6]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	71ba      	strb	r2, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f3      	bne.n	80043f2 <nRF24_WriteAckPayload+0x24>
	}
	nRF24_CSN_H();
 800440a:	f7ff fc6b 	bl	8003ce4 <nRF24_CSN_H>

}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800441a:	2003      	movs	r0, #3
 800441c:	f000 fbe0 	bl	8004be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004420:	200f      	movs	r0, #15
 8004422:	f000 f805 	bl	8004430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004426:	f7fd fc93 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_InitTick+0x54>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_InitTick+0x58>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	4619      	mov	r1, r3
 8004442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004446:	fbb3 f3f1 	udiv	r3, r3, r1
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fbfb 	bl	8004c4a <HAL_SYSTICK_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e00e      	b.n	800447c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d80a      	bhi.n	800447a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004464:	2200      	movs	r2, #0
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	f000 fbc3 	bl	8004bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004470:	4a06      	ldr	r2, [pc, #24]	; (800448c <HAL_InitTick+0x5c>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000000 	.word	0x20000000
 8004488:	2000001c 	.word	0x2000001c
 800448c:	20000018 	.word	0x20000018

08004490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_IncTick+0x20>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_IncTick+0x24>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <HAL_IncTick+0x24>)
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000001c 	.word	0x2000001c
 80044b4:	20000cf0 	.word	0x20000cf0

080044b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return uwTick;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_GetTick+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000cf0 	.word	0x20000cf0

080044d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff ffee 	bl	80044b8 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d005      	beq.n	80044f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_Delay+0x44>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044f6:	bf00      	nop
 80044f8:	f7ff ffde 	bl	80044b8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d8f7      	bhi.n	80044f8 <HAL_Delay+0x28>
  {
  }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000001c 	.word	0x2000001c

08004518 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e031      	b.n	8004592 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fc2e 	bl	8001d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_ADC_Init+0x84>)
 800455c:	4013      	ands	r3, r2
 800455e:	f043 0202 	orr.w	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f970 	bl	800484c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
 8004582:	e001      	b.n	8004588 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	ffffeefd 	.word	0xffffeefd

080045a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e136      	b.n	800482a <HAL_ADC_ConfigChannel+0x28a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d93a      	bls.n	8004642 <HAL_ADC_ConfigChannel+0xa2>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d4:	d035      	beq.n	8004642 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68d9      	ldr	r1, [r3, #12]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	3b1e      	subs	r3, #30
 80045ec:	2207      	movs	r2, #7
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43da      	mvns	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	400a      	ands	r2, r1
 80045fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a8d      	ldr	r2, [pc, #564]	; (8004838 <HAL_ADC_ConfigChannel+0x298>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10a      	bne.n	800461c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68d9      	ldr	r1, [r3, #12]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	061a      	lsls	r2, r3, #24
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800461a:	e035      	b.n	8004688 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68d9      	ldr	r1, [r3, #12]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	4618      	mov	r0, r3
 800462e:	4603      	mov	r3, r0
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4403      	add	r3, r0
 8004634:	3b1e      	subs	r3, #30
 8004636:	409a      	lsls	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004640:	e022      	b.n	8004688 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6919      	ldr	r1, [r3, #16]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	2207      	movs	r2, #7
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43da      	mvns	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	400a      	ands	r2, r1
 8004664:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6919      	ldr	r1, [r3, #16]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	4618      	mov	r0, r3
 8004678:	4603      	mov	r3, r0
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4403      	add	r3, r0
 800467e:	409a      	lsls	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b06      	cmp	r3, #6
 800468e:	d824      	bhi.n	80046da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	3b05      	subs	r3, #5
 80046a2:	221f      	movs	r2, #31
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43da      	mvns	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	400a      	ands	r2, r1
 80046b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4618      	mov	r0, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	3b05      	subs	r3, #5
 80046cc:	fa00 f203 	lsl.w	r2, r0, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34
 80046d8:	e04c      	b.n	8004774 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d824      	bhi.n	800472c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	3b23      	subs	r3, #35	; 0x23
 80046f4:	221f      	movs	r2, #31
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	400a      	ands	r2, r1
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4618      	mov	r0, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	3b23      	subs	r3, #35	; 0x23
 800471e:	fa00 f203 	lsl.w	r2, r0, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
 800472a:	e023      	b.n	8004774 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	3b41      	subs	r3, #65	; 0x41
 800473e:	221f      	movs	r2, #31
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43da      	mvns	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	400a      	ands	r2, r1
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	3b41      	subs	r3, #65	; 0x41
 8004768:	fa00 f203 	lsl.w	r2, r0, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a30      	ldr	r2, [pc, #192]	; (800483c <HAL_ADC_ConfigChannel+0x29c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10a      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1f4>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d105      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 800478e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004792:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <HAL_ADC_ConfigChannel+0x29c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d10f      	bne.n	80047be <HAL_ADC_ConfigChannel+0x21e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b12      	cmp	r3, #18
 80047a4:	d10b      	bne.n	80047be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a25      	ldr	r2, [pc, #148]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80047b2:	4b23      	ldr	r3, [pc, #140]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_ADC_ConfigChannel+0x29c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d12b      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x280>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_ADC_ConfigChannel+0x298>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <HAL_ADC_ConfigChannel+0x23a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b11      	cmp	r3, #17
 80047d8:	d122      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80047e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_ADC_ConfigChannel+0x2a0>)
 80047ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <HAL_ADC_ConfigChannel+0x298>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d111      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_ADC_ConfigChannel+0x2a4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <HAL_ADC_ConfigChannel+0x2a8>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0c9a      	lsrs	r2, r3, #18
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004812:	e002      	b.n	800481a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f9      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	10000012 	.word	0x10000012
 800483c:	40012000 	.word	0x40012000
 8004840:	40012300 	.word	0x40012300
 8004844:	20000000 	.word	0x20000000
 8004848:	431bde83 	.word	0x431bde83

0800484c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <ADC_Init+0x1ec>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a77      	ldr	r2, [pc, #476]	; (8004a38 <ADC_Init+0x1ec>)
 800485a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800485e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004860:	4b75      	ldr	r3, [pc, #468]	; (8004a38 <ADC_Init+0x1ec>)
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4973      	ldr	r1, [pc, #460]	; (8004a38 <ADC_Init+0x1ec>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	021a      	lsls	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6899      	ldr	r1, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	4a58      	ldr	r2, [pc, #352]	; (8004a3c <ADC_Init+0x1f0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d022      	beq.n	8004926 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	e00f      	b.n	8004946 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004944:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0202 	bic.w	r2, r2, #2
 8004954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	005a      	lsls	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01b      	beq.n	80049ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004982:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004992:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	3b01      	subs	r3, #1
 80049a0:	035a      	lsls	r2, r3, #13
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e007      	b.n	80049bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	051a      	lsls	r2, r3, #20
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049fe:	025a      	lsls	r2, r3, #9
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	029a      	lsls	r2, r3, #10
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40012300 	.word	0x40012300
 8004a3c:	0f000001 	.word	0x0f000001

08004a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <__NVIC_SetPriorityGrouping+0x40>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <__NVIC_SetPriorityGrouping+0x44>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6e:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <__NVIC_SetPriorityGrouping+0x40>)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	60d3      	str	r3, [r2, #12]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	e000ed00 	.word	0xe000ed00
 8004a84:	05fa0000 	.word	0x05fa0000

08004a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	f003 0307 	and.w	r3, r3, #7
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db0b      	blt.n	8004ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	4907      	ldr	r1, [pc, #28]	; (8004adc <__NVIC_EnableIRQ+0x38>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000e100 	.word	0xe000e100

08004ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db0a      	blt.n	8004b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	490c      	ldr	r1, [pc, #48]	; (8004b2c <__NVIC_SetPriority+0x4c>)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	440b      	add	r3, r1
 8004b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b08:	e00a      	b.n	8004b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	4908      	ldr	r1, [pc, #32]	; (8004b30 <__NVIC_SetPriority+0x50>)
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	3b04      	subs	r3, #4
 8004b18:	0112      	lsls	r2, r2, #4
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	761a      	strb	r2, [r3, #24]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000e100 	.word	0xe000e100
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	; 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f1c3 0307 	rsb	r3, r3, #7
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	bf28      	it	cs
 8004b52:	2304      	movcs	r3, #4
 8004b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d902      	bls.n	8004b64 <NVIC_EncodePriority+0x30>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3b03      	subs	r3, #3
 8004b62:	e000      	b.n	8004b66 <NVIC_EncodePriority+0x32>
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	401a      	ands	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	fa01 f303 	lsl.w	r3, r1, r3
 8004b86:	43d9      	mvns	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b8c:	4313      	orrs	r3, r2
         );
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bac:	d301      	bcc.n	8004bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e00f      	b.n	8004bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <SysTick_Config+0x40>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bba:	210f      	movs	r1, #15
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	f7ff ff8e 	bl	8004ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <SysTick_Config+0x40>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bca:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <SysTick_Config+0x40>)
 8004bcc:	2207      	movs	r2, #7
 8004bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	e000e010 	.word	0xe000e010

08004be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ff29 	bl	8004a40 <__NVIC_SetPriorityGrouping>
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c08:	f7ff ff3e 	bl	8004a88 <__NVIC_GetPriorityGrouping>
 8004c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	6978      	ldr	r0, [r7, #20]
 8004c14:	f7ff ff8e 	bl	8004b34 <NVIC_EncodePriority>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ff5d 	bl	8004ae0 <__NVIC_SetPriority>
}
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	4603      	mov	r3, r0
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff31 	bl	8004aa4 <__NVIC_EnableIRQ>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ffa2 	bl	8004b9c <SysTick_Config>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e054      	b.n	8004d20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7f5b      	ldrb	r3, [r3, #29]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd f8e0 	bl	8001e4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	791b      	ldrb	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_CRC_Init+0xc4>)
 8004ca0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0218 	bic.w	r2, r2, #24
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	e00c      	b.n	8004cce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f834 	bl	8004d2c <HAL_CRCEx_Polynomial_Set>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e028      	b.n	8004d20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	795b      	ldrb	r3, [r3, #5]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	611a      	str	r2, [r3, #16]
 8004ce0:	e004      	b.n	8004cec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6912      	ldr	r2, [r2, #16]
 8004cea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	04c11db7 	.word	0x04c11db7

08004d2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d3c:	231f      	movs	r3, #31
 8004d3e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d40:	bf00      	nop
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	613a      	str	r2, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_CRCEx_Polynomial_Set+0x34>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b18      	cmp	r3, #24
 8004d64:	d846      	bhi.n	8004df4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004dfb 	.word	0x08004dfb
 8004d70:	08004df5 	.word	0x08004df5
 8004d74:	08004df5 	.word	0x08004df5
 8004d78:	08004df5 	.word	0x08004df5
 8004d7c:	08004df5 	.word	0x08004df5
 8004d80:	08004df5 	.word	0x08004df5
 8004d84:	08004df5 	.word	0x08004df5
 8004d88:	08004df5 	.word	0x08004df5
 8004d8c:	08004de9 	.word	0x08004de9
 8004d90:	08004df5 	.word	0x08004df5
 8004d94:	08004df5 	.word	0x08004df5
 8004d98:	08004df5 	.word	0x08004df5
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004df5 	.word	0x08004df5
 8004dac:	08004ddd 	.word	0x08004ddd
 8004db0:	08004df5 	.word	0x08004df5
 8004db4:	08004df5 	.word	0x08004df5
 8004db8:	08004df5 	.word	0x08004df5
 8004dbc:	08004df5 	.word	0x08004df5
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004dd1 	.word	0x08004dd1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d913      	bls.n	8004dfe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004dda:	e010      	b.n	8004dfe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b07      	cmp	r3, #7
 8004de0:	d90f      	bls.n	8004e02 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004de6:	e00c      	b.n	8004e02 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d90b      	bls.n	8004e06 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004df2:	e008      	b.n	8004e06 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
      break;
 8004df8:	e006      	b.n	8004e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e06:	bf00      	nop
  }
  if (status == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 0118 	bic.w	r1, r3, #24
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e069      	b.n	8004f1e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd f818 	bl	8001e8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6819      	ldr	r1, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_DCMI_Init+0xf0>)
 8004e7e:	400b      	ands	r3, r1
 8004e80:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e96:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004ea2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004eae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004eba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ec6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d112      	bne.n	8004efe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7f1b      	ldrb	r3, [r3, #28]
 8004edc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7f5b      	ldrb	r3, [r3, #29]
 8004ee2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ee4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7f9b      	ldrb	r3, [r3, #30]
 8004eea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004eec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7fdb      	ldrb	r3, [r3, #31]
 8004ef4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004efa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004efc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 021e 	orr.w	r2, r2, #30
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	ffe0f007 	.word	0xffe0f007

08004f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f38:	f7ff fabe 	bl	80044b8 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e099      	b.n	800507c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f68:	e00f      	b.n	8004f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f6a:	f7ff faa5 	bl	80044b8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d908      	bls.n	8004f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2203      	movs	r2, #3
 8004f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e078      	b.n	800507c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e8      	bne.n	8004f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <HAL_DMA_Init+0x158>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d107      	bne.n	8004ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	4313      	orrs	r3, r2
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b04      	cmp	r3, #4
 800501c:	d117      	bne.n	800504e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8bd 	bl	80051b0 <DMA_CheckFifoParam>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2240      	movs	r2, #64	; 0x40
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800504a:	2301      	movs	r3, #1
 800504c:	e016      	b.n	800507c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f874 	bl	8005144 <DMA_CalcBaseAndBitshift>
 800505c:	4603      	mov	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005064:	223f      	movs	r2, #63	; 0x3f
 8005066:	409a      	lsls	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	f010803f 	.word	0xf010803f

08005088 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e050      	b.n	800513c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d101      	bne.n	80050aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
 80050a8:	e048      	b.n	800513c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2221      	movs	r2, #33	; 0x21
 80050e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f82a 	bl	8005144 <DMA_CalcBaseAndBitshift>
 80050f0:	4603      	mov	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	223f      	movs	r2, #63	; 0x3f
 80050fa:	409a      	lsls	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3b10      	subs	r3, #16
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <DMA_CalcBaseAndBitshift+0x60>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d908      	bls.n	8005184 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <DMA_CalcBaseAndBitshift+0x68>)
 800517a:	4013      	ands	r3, r2
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	659a      	str	r2, [r3, #88]	; 0x58
 8005182:	e006      	b.n	8005192 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <DMA_CalcBaseAndBitshift+0x68>)
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	aaaaaaab 	.word	0xaaaaaaab
 80051a8:	08012c60 	.word	0x08012c60
 80051ac:	fffffc00 	.word	0xfffffc00

080051b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11f      	bne.n	800520a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d856      	bhi.n	800527e <DMA_CheckFifoParam+0xce>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <DMA_CheckFifoParam+0x28>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051fb 	.word	0x080051fb
 80051e0:	080051e9 	.word	0x080051e9
 80051e4:	0800527f 	.word	0x0800527f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d046      	beq.n	8005282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f8:	e043      	b.n	8005282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005202:	d140      	bne.n	8005286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e03d      	b.n	8005286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	d121      	bne.n	8005258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d837      	bhi.n	800528a <DMA_CheckFifoParam+0xda>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <DMA_CheckFifoParam+0x70>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	08005237 	.word	0x08005237
 8005228:	08005231 	.word	0x08005231
 800522c:	08005249 	.word	0x08005249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	e030      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d025      	beq.n	800528e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005246:	e022      	b.n	800528e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005250:	d11f      	bne.n	8005292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005256:	e01c      	b.n	8005292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d903      	bls.n	8005266 <DMA_CheckFifoParam+0xb6>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d003      	beq.n	800526c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005264:	e018      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
      break;
 800526a:	e015      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e00b      	b.n	8005296 <DMA_CheckFifoParam+0xe6>
      break;
 800527e:	bf00      	nop
 8005280:	e00a      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;
 8005282:	bf00      	nop
 8005284:	e008      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;
 8005286:	bf00      	nop
 8005288:	e006      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;   
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <DMA_CheckFifoParam+0xe8>
      break;
 8005296:	bf00      	nop
    }
  } 
  
  return status; 
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop

080052a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e039      	b.n	800532e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc fe9a 	bl	8002008 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f023 0107 	bic.w	r1, r3, #7
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_DMA2D_Init+0x90>)
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68d1      	ldr	r1, [r2, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	430b      	orrs	r3, r1
 800531c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	ffffc000 	.word	0xffffc000

0800533c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_DMA2D_Start+0x1c>
 8005354:	2302      	movs	r3, #2
 8005356:	e018      	b.n	800538a <HAL_DMA2D_Start+0x4e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa98 	bl	80058a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d056      	beq.n	800545c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ae:	f7ff f883 	bl	80044b8 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80053b4:	e04b      	b.n	800544e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d023      	beq.n	8005410 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	f043 0202 	orr.w	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2221      	movs	r2, #33	; 0x21
 80053fa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2204      	movs	r2, #4
 8005400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0a5      	b.n	800555c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d01a      	beq.n	800544e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7ff f84e 	bl	80044b8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <HAL_DMA2D_PollForTransfer+0x9c>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2203      	movs	r2, #3
 800543e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e086      	b.n	800555c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ac      	beq.n	80053b6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d061      	beq.n	8005542 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800547e:	f7ff f81b 	bl	80044b8 <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005484:	e056      	b.n	8005534 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02e      	beq.n	80054f6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	f043 0204 	orr.w	r2, r3, #4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f043 0202 	orr.w	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2229      	movs	r2, #41	; 0x29
 80054e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e032      	b.n	800555c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d01a      	beq.n	8005534 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fe ffdb 	bl	80044b8 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <HAL_DMA2D_PollForTransfer+0x182>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2203      	movs	r2, #3
 8005524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e013      	b.n	800555c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0a1      	beq.n	8005486 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2212      	movs	r2, #18
 8005548:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d026      	beq.n	80055d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d021      	beq.n	80055d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800559e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2201      	movs	r2, #1
 80055b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2204      	movs	r2, #4
 80055b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d026      	beq.n	800562c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d021      	beq.n	800562c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2220      	movs	r2, #32
 80055fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005604:	f043 0202 	orr.w	r2, r3, #2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2204      	movs	r2, #4
 8005610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d026      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800563c:	2b00      	cmp	r3, #0
 800563e:	d021      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d013      	beq.n	80056b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2204      	movs	r2, #4
 80056ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f853 	bl	800575c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d024      	beq.n	800570a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01f      	beq.n	800570a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2202      	movs	r2, #2
 80056e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01a      	beq.n	8005754 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2210      	movs	r2, #16
 8005734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f80e 	bl	8005770 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_DMA2D_ConfigLayer+0x20>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e079      	b.n	8005898 <HAL_DMA2D_ConfigLayer+0x114>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	3318      	adds	r3, #24
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80057ce:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80057d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b0a      	cmp	r3, #10
 80057d8:	d003      	beq.n	80057e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b09      	cmp	r3, #9
 80057e0:	d107      	bne.n	80057f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e005      	b.n	80057fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d120      	bne.n	8005846 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	43db      	mvns	r3, r3
 800580e:	ea02 0103 	and.w	r1, r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	430a      	orrs	r2, r1
 800581a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b0a      	cmp	r3, #10
 800582c:	d003      	beq.n	8005836 <HAL_DMA2D_ConfigLayer+0xb2>
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b09      	cmp	r3, #9
 8005834:	d127      	bne.n	8005886 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005842:	629a      	str	r2, [r3, #40]	; 0x28
 8005844:	e01f      	b.n	8005886 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	43db      	mvns	r3, r3
 8005850:	ea02 0103 	and.w	r1, r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	430a      	orrs	r2, r1
 800585c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b0a      	cmp	r3, #10
 800586e:	d003      	beq.n	8005878 <HAL_DMA2D_ConfigLayer+0xf4>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b09      	cmp	r3, #9
 8005876:	d106      	bne.n	8005886 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005884:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	ff03000f 	.word	0xff03000f

080058a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	041a      	lsls	r2, r3, #16
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e0:	d174      	bne.n	80059cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	431a      	orrs	r2, r3
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	4313      	orrs	r3, r2
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	e053      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4313      	orrs	r3, r2
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e048      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d111      	bne.n	800595c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	0cdb      	lsrs	r3, r3, #19
 800593c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	0a9b      	lsrs	r3, r3, #10
 8005942:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	02db      	lsls	r3, r3, #11
 8005952:	4313      	orrs	r3, r2
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e032      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d117      	bne.n	8005994 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	0fdb      	lsrs	r3, r3, #31
 8005968:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	0cdb      	lsrs	r3, r3, #19
 800596e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	0adb      	lsrs	r3, r3, #11
 8005974:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	431a      	orrs	r2, r3
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	03db      	lsls	r3, r3, #15
 800598a:	4313      	orrs	r3, r2
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
 8005992:	e016      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	0f1b      	lsrs	r3, r3, #28
 8005998:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	0d1b      	lsrs	r3, r3, #20
 800599e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	0b1b      	lsrs	r3, r3, #12
 80059a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	431a      	orrs	r2, r3
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80059ca:	e003      	b.n	80059d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	60da      	str	r2, [r3, #12]
}
 80059d4:	bf00      	nop
 80059d6:	372c      	adds	r7, #44	; 0x2c
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e06a      	b.n	8005ac8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2223      	movs	r2, #35	; 0x23
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc fb25 	bl	8002054 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_ETH_Init+0xf0>)
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <HAL_ETH_Init+0xf0>)
 8005a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a14:	6453      	str	r3, [r2, #68]	; 0x44
 8005a16:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <HAL_ETH_Init+0xf0>)
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005a22:	4b2c      	ldr	r3, [pc, #176]	; (8005ad4 <HAL_ETH_Init+0xf4>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <HAL_ETH_Init+0xf4>)
 8005a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005a2e:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <HAL_ETH_Init+0xf4>)
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4927      	ldr	r1, [pc, #156]	; (8005ad4 <HAL_ETH_Init+0xf4>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <HAL_ETH_Init+0xf4>)
 8005a3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a58:	f7fe fd2e 	bl	80044b8 <HAL_GetTick>
 8005a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005a5e:	e011      	b.n	8005a84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005a60:	f7fe fd2a 	bl	80044b8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a6e:	d909      	bls.n	8005a84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2204      	movs	r2, #4
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	22e0      	movs	r2, #224	; 0xe0
 8005a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e021      	b.n	8005ac8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e4      	bne.n	8005a60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f958 	bl	8005d4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f9ff 	bl	8005ea0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa55 	bl	8005f52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	461a      	mov	r2, r3
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f9bd 	bl	8005e30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40013800 	.word	0x40013800

08005ad8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4b51      	ldr	r3, [pc, #324]	; (8005c34 <ETH_SetMACConfig+0x15c>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	7c1b      	ldrb	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <ETH_SetMACConfig+0x28>
 8005afa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005afe:	e000      	b.n	8005b02 <ETH_SetMACConfig+0x2a>
 8005b00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	7c5b      	ldrb	r3, [r3, #17]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <ETH_SetMACConfig+0x38>
 8005b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b0e:	e000      	b.n	8005b12 <ETH_SetMACConfig+0x3a>
 8005b10:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	7fdb      	ldrb	r3, [r3, #31]
 8005b1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005b20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	7f92      	ldrb	r2, [r2, #30]
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	d102      	bne.n	8005b36 <ETH_SetMACConfig+0x5e>
 8005b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b34:	e000      	b.n	8005b38 <ETH_SetMACConfig+0x60>
 8005b36:	2200      	movs	r2, #0
                        macconf->Speed |
 8005b38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	7f1b      	ldrb	r3, [r3, #28]
 8005b3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005b46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	791b      	ldrb	r3, [r3, #4]
 8005b4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005b4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d102      	bne.n	8005b60 <ETH_SetMACConfig+0x88>
 8005b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5e:	e000      	b.n	8005b62 <ETH_SetMACConfig+0x8a>
 8005b60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005b62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	7bdb      	ldrb	r3, [r3, #15]
 8005b68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005b6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005b70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7fe fc9c 	bl	80044d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005bae:	4013      	ands	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	d101      	bne.n	8005bc6 <ETH_SetMACConfig+0xee>
 8005bc2:	2280      	movs	r2, #128	; 0x80
 8005bc4:	e000      	b.n	8005bc8 <ETH_SetMACConfig+0xf0>
 8005bc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005bc8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005bd6:	2a01      	cmp	r2, #1
 8005bd8:	d101      	bne.n	8005bde <ETH_SetMACConfig+0x106>
 8005bda:	2208      	movs	r2, #8
 8005bdc:	e000      	b.n	8005be0 <ETH_SetMACConfig+0x108>
 8005bde:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005be0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005be8:	2a01      	cmp	r2, #1
 8005bea:	d101      	bne.n	8005bf0 <ETH_SetMACConfig+0x118>
 8005bec:	2204      	movs	r2, #4
 8005bee:	e000      	b.n	8005bf2 <ETH_SetMACConfig+0x11a>
 8005bf0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005bf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005bfa:	2a01      	cmp	r2, #1
 8005bfc:	d101      	bne.n	8005c02 <ETH_SetMACConfig+0x12a>
 8005bfe:	2202      	movs	r2, #2
 8005c00:	e000      	b.n	8005c04 <ETH_SetMACConfig+0x12c>
 8005c02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c04:	4313      	orrs	r3, r2
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f7fe fc57 	bl	80044d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	619a      	str	r2, [r3, #24]
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	ff20810f 	.word	0xff20810f

08005c38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <ETH_SetDMAConfig+0x110>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	7b1b      	ldrb	r3, [r3, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <ETH_SetDMAConfig+0x2c>
 8005c5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005c62:	e000      	b.n	8005c66 <ETH_SetDMAConfig+0x2e>
 8005c64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	7b5b      	ldrb	r3, [r3, #13]
 8005c6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005c6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	7f52      	ldrb	r2, [r2, #29]
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	d102      	bne.n	8005c7c <ETH_SetDMAConfig+0x44>
 8005c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c7a:	e000      	b.n	8005c7e <ETH_SetDMAConfig+0x46>
 8005c7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005c7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	7b9b      	ldrb	r3, [r3, #14]
 8005c84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005c86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005c8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	7f1b      	ldrb	r3, [r3, #28]
 8005c92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005c94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	7f9b      	ldrb	r3, [r3, #30]
 8005c9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005c9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005ca2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005caa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005cac:	4313      	orrs	r3, r2
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7fe fbfe 	bl	80044d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	791b      	ldrb	r3, [r3, #4]
 8005ce6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005cec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005cf2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005cf8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005d02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005d0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7fe fbcf 	bl	80044d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	f8de3f23 	.word	0xf8de3f23

08005d4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b0a6      	sub	sp, #152	; 0x98
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005d60:	2300      	movs	r3, #0
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005db2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fe86 	bl	8005ad8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005dee:	2300      	movs	r3, #0
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ff08 	bl	8005c38 <ETH_SetDMAConfig>
}
 8005e28:	bf00      	nop
 8005e2a:	3798      	adds	r7, #152	; 0x98
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3305      	adds	r3, #5
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	3204      	adds	r2, #4
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <ETH_MACAddressConfig+0x68>)
 8005e52:	4413      	add	r3, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3303      	adds	r3, #3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	061a      	lsls	r2, r3, #24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3302      	adds	r3, #2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	041b      	lsls	r3, r3, #16
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	4313      	orrs	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	7812      	ldrb	r2, [r2, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <ETH_MACAddressConfig+0x6c>)
 8005e82:	4413      	add	r3, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6013      	str	r3, [r2, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40028040 	.word	0x40028040
 8005e9c:	40028044 	.word	0x40028044

08005ea0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	e03e      	b.n	8005f2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	440b      	add	r3, r1
 8005ebe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	3206      	adds	r2, #6
 8005ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d80c      	bhi.n	8005f10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68d9      	ldr	r1, [r3, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	440b      	add	r3, r1
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e004      	b.n	8005f1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d9bd      	bls.n	8005eae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f44:	611a      	str	r2, [r3, #16]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e046      	b.n	8005fee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6919      	ldr	r1, [r3, #16]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005fa4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	3212      	adds	r2, #18
 8005fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d80c      	bhi.n	8005fde <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6919      	ldr	r1, [r3, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	e004      	b.n	8005fe8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d9b5      	bls.n	8005f60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	60da      	str	r2, [r3, #12]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800602c:	b480      	push	{r7}
 800602e:	b089      	sub	sp, #36	; 0x24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	e175      	b.n	8006338 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800604c:	2201      	movs	r2, #1
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	429a      	cmp	r2, r3
 8006066:	f040 8164 	bne.w	8006332 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d005      	beq.n	8006082 <HAL_GPIO_Init+0x56>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d130      	bne.n	80060e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	2203      	movs	r2, #3
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	43db      	mvns	r3, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4013      	ands	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060b8:	2201      	movs	r2, #1
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 0201 	and.w	r2, r3, #1
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d017      	beq.n	8006120 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	2203      	movs	r2, #3
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d123      	bne.n	8006174 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	08da      	lsrs	r2, r3, #3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3208      	adds	r2, #8
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	220f      	movs	r2, #15
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	08da      	lsrs	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0203 	and.w	r2, r3, #3
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80be 	beq.w	8006332 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b6:	4b66      	ldr	r3, [pc, #408]	; (8006350 <HAL_GPIO_Init+0x324>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	4a65      	ldr	r2, [pc, #404]	; (8006350 <HAL_GPIO_Init+0x324>)
 80061bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c0:	6453      	str	r3, [r2, #68]	; 0x44
 80061c2:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_GPIO_Init+0x324>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061ce:	4a61      	ldr	r2, [pc, #388]	; (8006354 <HAL_GPIO_Init+0x328>)
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	3302      	adds	r3, #2
 80061d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	220f      	movs	r2, #15
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a58      	ldr	r2, [pc, #352]	; (8006358 <HAL_GPIO_Init+0x32c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d037      	beq.n	800626a <HAL_GPIO_Init+0x23e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_GPIO_Init+0x330>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d031      	beq.n	8006266 <HAL_GPIO_Init+0x23a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_GPIO_Init+0x334>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02b      	beq.n	8006262 <HAL_GPIO_Init+0x236>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a55      	ldr	r2, [pc, #340]	; (8006364 <HAL_GPIO_Init+0x338>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d025      	beq.n	800625e <HAL_GPIO_Init+0x232>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a54      	ldr	r2, [pc, #336]	; (8006368 <HAL_GPIO_Init+0x33c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01f      	beq.n	800625a <HAL_GPIO_Init+0x22e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a53      	ldr	r2, [pc, #332]	; (800636c <HAL_GPIO_Init+0x340>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d019      	beq.n	8006256 <HAL_GPIO_Init+0x22a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a52      	ldr	r2, [pc, #328]	; (8006370 <HAL_GPIO_Init+0x344>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_GPIO_Init+0x226>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a51      	ldr	r2, [pc, #324]	; (8006374 <HAL_GPIO_Init+0x348>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00d      	beq.n	800624e <HAL_GPIO_Init+0x222>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a50      	ldr	r2, [pc, #320]	; (8006378 <HAL_GPIO_Init+0x34c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d007      	beq.n	800624a <HAL_GPIO_Init+0x21e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a4f      	ldr	r2, [pc, #316]	; (800637c <HAL_GPIO_Init+0x350>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d101      	bne.n	8006246 <HAL_GPIO_Init+0x21a>
 8006242:	2309      	movs	r3, #9
 8006244:	e012      	b.n	800626c <HAL_GPIO_Init+0x240>
 8006246:	230a      	movs	r3, #10
 8006248:	e010      	b.n	800626c <HAL_GPIO_Init+0x240>
 800624a:	2308      	movs	r3, #8
 800624c:	e00e      	b.n	800626c <HAL_GPIO_Init+0x240>
 800624e:	2307      	movs	r3, #7
 8006250:	e00c      	b.n	800626c <HAL_GPIO_Init+0x240>
 8006252:	2306      	movs	r3, #6
 8006254:	e00a      	b.n	800626c <HAL_GPIO_Init+0x240>
 8006256:	2305      	movs	r3, #5
 8006258:	e008      	b.n	800626c <HAL_GPIO_Init+0x240>
 800625a:	2304      	movs	r3, #4
 800625c:	e006      	b.n	800626c <HAL_GPIO_Init+0x240>
 800625e:	2303      	movs	r3, #3
 8006260:	e004      	b.n	800626c <HAL_GPIO_Init+0x240>
 8006262:	2302      	movs	r3, #2
 8006264:	e002      	b.n	800626c <HAL_GPIO_Init+0x240>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_GPIO_Init+0x240>
 800626a:	2300      	movs	r3, #0
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	f002 0203 	and.w	r2, r2, #3
 8006272:	0092      	lsls	r2, r2, #2
 8006274:	4093      	lsls	r3, r2
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800627c:	4935      	ldr	r1, [pc, #212]	; (8006354 <HAL_GPIO_Init+0x328>)
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	3302      	adds	r3, #2
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800628a:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <HAL_GPIO_Init+0x354>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ae:	4a34      	ldr	r2, [pc, #208]	; (8006380 <HAL_GPIO_Init+0x354>)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062b4:	4b32      	ldr	r3, [pc, #200]	; (8006380 <HAL_GPIO_Init+0x354>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062d8:	4a29      	ldr	r2, [pc, #164]	; (8006380 <HAL_GPIO_Init+0x354>)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <HAL_GPIO_Init+0x354>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006302:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <HAL_GPIO_Init+0x354>)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <HAL_GPIO_Init+0x354>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800632c:	4a14      	ldr	r2, [pc, #80]	; (8006380 <HAL_GPIO_Init+0x354>)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b0f      	cmp	r3, #15
 800633c:	f67f ae86 	bls.w	800604c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3724      	adds	r7, #36	; 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40023800 	.word	0x40023800
 8006354:	40013800 	.word	0x40013800
 8006358:	40020000 	.word	0x40020000
 800635c:	40020400 	.word	0x40020400
 8006360:	40020800 	.word	0x40020800
 8006364:	40020c00 	.word	0x40020c00
 8006368:	40021000 	.word	0x40021000
 800636c:	40021400 	.word	0x40021400
 8006370:	40021800 	.word	0x40021800
 8006374:	40021c00 	.word	0x40021c00
 8006378:	40022000 	.word	0x40022000
 800637c:	40022400 	.word	0x40022400
 8006380:	40013c00 	.word	0x40013c00

08006384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	807b      	strh	r3, [r7, #2]
 8006390:	4613      	mov	r3, r2
 8006392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006394:	787b      	ldrb	r3, [r7, #1]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800639a:	887a      	ldrh	r2, [r7, #2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063a0:	e003      	b.n	80063aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063a2:	887b      	ldrh	r3, [r7, #2]
 80063a4:	041a      	lsls	r2, r3, #16
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	619a      	str	r2, [r3, #24]
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80063b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b8:	b08f      	sub	sp, #60	; 0x3c
 80063ba:	af0a      	add	r7, sp, #40	; 0x28
 80063bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e054      	b.n	8006472 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f009 fca0 	bl	800fd28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2203      	movs	r2, #3
 80063ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f006 fcc1 	bl	800cd8e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	687e      	ldr	r6, [r7, #4]
 8006414:	466d      	mov	r5, sp
 8006416:	f106 0410 	add.w	r4, r6, #16
 800641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800641c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800641e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006426:	e885 0003 	stmia.w	r5, {r0, r1}
 800642a:	1d33      	adds	r3, r6, #4
 800642c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800642e:	6838      	ldr	r0, [r7, #0]
 8006430:	f006 fc44 	bl	800ccbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f006 fcb8 	bl	800cdb0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	687e      	ldr	r6, [r7, #4]
 8006448:	466d      	mov	r5, sp
 800644a:	f106 0410 	add.w	r4, r6, #16
 800644e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800645a:	e885 0003 	stmia.w	r5, {r0, r1}
 800645e:	1d33      	adds	r3, r6, #4
 8006460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f006 fe60 	bl	800d128 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800647a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800647a:	b590      	push	{r4, r7, lr}
 800647c:	b089      	sub	sp, #36	; 0x24
 800647e:	af04      	add	r7, sp, #16
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	4608      	mov	r0, r1
 8006484:	4611      	mov	r1, r2
 8006486:	461a      	mov	r2, r3
 8006488:	4603      	mov	r3, r0
 800648a:	70fb      	strb	r3, [r7, #3]
 800648c:	460b      	mov	r3, r1
 800648e:	70bb      	strb	r3, [r7, #2]
 8006490:	4613      	mov	r3, r2
 8006492:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_HCD_HC_Init+0x28>
 800649e:	2302      	movs	r3, #2
 80064a0:	e076      	b.n	8006590 <HAL_HCD_HC_Init+0x116>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	212c      	movs	r1, #44	; 0x2c
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	4413      	add	r3, r2
 80064b6:	333d      	adds	r3, #61	; 0x3d
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	3338      	adds	r3, #56	; 0x38
 80064ca:	787a      	ldrb	r2, [r7, #1]
 80064cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	212c      	movs	r1, #44	; 0x2c
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	4413      	add	r3, r2
 80064da:	3340      	adds	r3, #64	; 0x40
 80064dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80064de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	212c      	movs	r1, #44	; 0x2c
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	3339      	adds	r3, #57	; 0x39
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	212c      	movs	r1, #44	; 0x2c
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	4413      	add	r3, r2
 80064fe:	333f      	adds	r3, #63	; 0x3f
 8006500:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	78ba      	ldrb	r2, [r7, #2]
 800650a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800650e:	b2d0      	uxtb	r0, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	212c      	movs	r1, #44	; 0x2c
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	333a      	adds	r3, #58	; 0x3a
 800651c:	4602      	mov	r2, r0
 800651e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da09      	bge.n	800653c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	333b      	adds	r3, #59	; 0x3b
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e008      	b.n	800654e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	212c      	movs	r1, #44	; 0x2c
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	333b      	adds	r3, #59	; 0x3b
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	212c      	movs	r1, #44	; 0x2c
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	333c      	adds	r3, #60	; 0x3c
 800655c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006560:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	787c      	ldrb	r4, [r7, #1]
 8006568:	78ba      	ldrb	r2, [r7, #2]
 800656a:	78f9      	ldrb	r1, [r7, #3]
 800656c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800656e:	9302      	str	r3, [sp, #8]
 8006570:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4623      	mov	r3, r4
 800657e:	f006 ff4d 	bl	800d41c <USB_HC_Init>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bd90      	pop	{r4, r7, pc}

08006598 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_HCD_HC_Halt+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e00f      	b.n	80065d6 <HAL_HCD_HC_Halt+0x3e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f007 f99d 	bl	800d906 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	70fb      	strb	r3, [r7, #3]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70bb      	strb	r3, [r7, #2]
 80065f6:	4613      	mov	r3, r2
 80065f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	212c      	movs	r1, #44	; 0x2c
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	333b      	adds	r3, #59	; 0x3b
 8006608:	78ba      	ldrb	r2, [r7, #2]
 800660a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	333f      	adds	r3, #63	; 0x3f
 800661a:	787a      	ldrb	r2, [r7, #1]
 800661c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800661e:	7c3b      	ldrb	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d112      	bne.n	800664a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	212c      	movs	r1, #44	; 0x2c
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	4413      	add	r3, r2
 8006630:	3342      	adds	r3, #66	; 0x42
 8006632:	2203      	movs	r2, #3
 8006634:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	212c      	movs	r1, #44	; 0x2c
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	333d      	adds	r3, #61	; 0x3d
 8006644:	7f3a      	ldrb	r2, [r7, #28]
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e008      	b.n	800665c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	212c      	movs	r1, #44	; 0x2c
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	4413      	add	r3, r2
 8006656:	3342      	adds	r3, #66	; 0x42
 8006658:	2202      	movs	r2, #2
 800665a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800665c:	787b      	ldrb	r3, [r7, #1]
 800665e:	2b03      	cmp	r3, #3
 8006660:	f200 80c6 	bhi.w	80067f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	0800667d 	.word	0x0800667d
 8006670:	080067dd 	.word	0x080067dd
 8006674:	080066e1 	.word	0x080066e1
 8006678:	0800675f 	.word	0x0800675f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800667c:	7c3b      	ldrb	r3, [r7, #16]
 800667e:	2b01      	cmp	r3, #1
 8006680:	f040 80b8 	bne.w	80067f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 80b4 	bne.w	80067f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800668c:	8b3b      	ldrh	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d108      	bne.n	80066a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	212c      	movs	r1, #44	; 0x2c
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	3355      	adds	r3, #85	; 0x55
 80066a0:	2201      	movs	r2, #1
 80066a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	3355      	adds	r3, #85	; 0x55
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3342      	adds	r3, #66	; 0x42
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80066ca:	e093      	b.n	80067f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3342      	adds	r3, #66	; 0x42
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
      break;
 80066de:	e089      	b.n	80067f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80066e0:	78bb      	ldrb	r3, [r7, #2]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d11d      	bne.n	8006722 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	212c      	movs	r1, #44	; 0x2c
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	3355      	adds	r3, #85	; 0x55
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	212c      	movs	r1, #44	; 0x2c
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	3342      	adds	r3, #66	; 0x42
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800670c:	e073      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	212c      	movs	r1, #44	; 0x2c
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	3342      	adds	r3, #66	; 0x42
 800671c:	2202      	movs	r2, #2
 800671e:	701a      	strb	r2, [r3, #0]
      break;
 8006720:	e069      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	212c      	movs	r1, #44	; 0x2c
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	3354      	adds	r3, #84	; 0x54
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	212c      	movs	r1, #44	; 0x2c
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	3342      	adds	r3, #66	; 0x42
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
      break;
 8006748:	e055      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	212c      	movs	r1, #44	; 0x2c
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	4413      	add	r3, r2
 8006756:	3342      	adds	r3, #66	; 0x42
 8006758:	2202      	movs	r2, #2
 800675a:	701a      	strb	r2, [r3, #0]
      break;
 800675c:	e04b      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800675e:	78bb      	ldrb	r3, [r7, #2]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11d      	bne.n	80067a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	212c      	movs	r1, #44	; 0x2c
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	3355      	adds	r3, #85	; 0x55
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	212c      	movs	r1, #44	; 0x2c
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	3342      	adds	r3, #66	; 0x42
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800678a:	e034      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	3342      	adds	r3, #66	; 0x42
 800679a:	2202      	movs	r2, #2
 800679c:	701a      	strb	r2, [r3, #0]
      break;
 800679e:	e02a      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	212c      	movs	r1, #44	; 0x2c
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	3354      	adds	r3, #84	; 0x54
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	212c      	movs	r1, #44	; 0x2c
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	4413      	add	r3, r2
 80067c0:	3342      	adds	r3, #66	; 0x42
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
      break;
 80067c6:	e016      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3342      	adds	r3, #66	; 0x42
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
      break;
 80067da:	e00c      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	212c      	movs	r1, #44	; 0x2c
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	3342      	adds	r3, #66	; 0x42
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
      break;
 80067ee:	e002      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80067f0:	bf00      	nop
 80067f2:	e000      	b.n	80067f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80067f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	212c      	movs	r1, #44	; 0x2c
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	3344      	adds	r3, #68	; 0x44
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	8b3a      	ldrh	r2, [r7, #24]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	202c      	movs	r0, #44	; 0x2c
 8006810:	fb00 f303 	mul.w	r3, r0, r3
 8006814:	440b      	add	r3, r1
 8006816:	334c      	adds	r3, #76	; 0x4c
 8006818:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	212c      	movs	r1, #44	; 0x2c
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	4413      	add	r3, r2
 8006826:	3360      	adds	r3, #96	; 0x60
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	212c      	movs	r1, #44	; 0x2c
 8006832:	fb01 f303 	mul.w	r3, r1, r3
 8006836:	4413      	add	r3, r2
 8006838:	3350      	adds	r3, #80	; 0x50
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	212c      	movs	r1, #44	; 0x2c
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	4413      	add	r3, r2
 800684a:	3339      	adds	r3, #57	; 0x39
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	212c      	movs	r1, #44	; 0x2c
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	4413      	add	r3, r2
 800685c:	3361      	adds	r3, #97	; 0x61
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	222c      	movs	r2, #44	; 0x2c
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	3338      	adds	r3, #56	; 0x38
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	18d1      	adds	r1, r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f006 fef0 	bl	800d660 <USB_HC_StartXfer>
 8006880:	4603      	mov	r3, r0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f006 fbfe 	bl	800d0a4 <USB_GetMode>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	f040 80f6 	bne.w	8006a9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f006 fbc1 	bl	800d03c <USB_ReadInterrupts>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80ec 	beq.w	8006a9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f006 fbb8 	bl	800d03c <USB_ReadInterrupts>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068d6:	d104      	bne.n	80068e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f006 fba8 	bl	800d03c <USB_ReadInterrupts>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f6:	d104      	bne.n	8006902 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f006 fb98 	bl	800d03c <USB_ReadInterrupts>
 800690c:	4603      	mov	r3, r0
 800690e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006916:	d104      	bne.n	8006922 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f006 fb88 	bl	800d03c <USB_ReadInterrupts>
 800692c:	4603      	mov	r3, r0
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d103      	bne.n	800693e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2202      	movs	r2, #2
 800693c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f006 fb7a 	bl	800d03c <USB_ReadInterrupts>
 8006948:	4603      	mov	r3, r0
 800694a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006952:	d11c      	bne.n	800698e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800695c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10f      	bne.n	800698e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800696e:	2110      	movs	r1, #16
 8006970:	6938      	ldr	r0, [r7, #16]
 8006972:	f006 fa69 	bl	800ce48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f006 fa9a 	bl	800ceb0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2101      	movs	r1, #1
 8006982:	4618      	mov	r0, r3
 8006984:	f006 fc84 	bl	800d290 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f009 fa3f 	bl	800fe0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f006 fb52 	bl	800d03c <USB_ReadInterrupts>
 8006998:	4603      	mov	r3, r0
 800699a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800699e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069a2:	d102      	bne.n	80069aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f9ce 	bl	8007d46 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f006 fb44 	bl	800d03c <USB_ReadInterrupts>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d106      	bne.n	80069cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f009 fa08 	bl	800fdd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2208      	movs	r2, #8
 80069ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f006 fb33 	bl	800d03c <USB_ReadInterrupts>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d101      	bne.n	80069e4 <HAL_HCD_IRQHandler+0x158>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <HAL_HCD_IRQHandler+0x15a>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d012      	beq.n	8006a10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0210 	bic.w	r2, r2, #16
 80069f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f8d1 	bl	8007ba2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0210 	orr.w	r2, r2, #16
 8006a0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f006 fb11 	bl	800d03c <USB_ReadInterrupts>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a24:	d13a      	bne.n	8006a9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f006 ff5a 	bl	800d8e4 <USB_HC_ReadInterrupt>
 8006a30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e025      	b.n	8006a84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d018      	beq.n	8006a7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a62:	d106      	bne.n	8006a72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8ab 	bl	8006bc6 <HCD_HC_IN_IRQHandler>
 8006a70:	e005      	b.n	8006a7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fcc6 	bl	800740a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3301      	adds	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d3d4      	bcc.n	8006a38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a96:	615a      	str	r2, [r3, #20]
 8006a98:	e000      	b.n	8006a9c <HAL_HCD_IRQHandler+0x210>
      return;
 8006a9a:	bf00      	nop
    }
  }
}
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_HCD_Start+0x16>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e013      	b.n	8006ae0 <HAL_HCD_Start+0x3e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f006 fc46 	bl	800d358 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f006 f94b 	bl	800cd6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_HCD_Stop+0x16>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e00d      	b.n	8006b1a <HAL_HCD_Stop+0x32>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f007 f834 	bl	800db78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f006 fbe8 	bl	800d304 <USB_ResetPort>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	212c      	movs	r1, #44	; 0x2c
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	3360      	adds	r3, #96	; 0x60
 8006b58:	781b      	ldrb	r3, [r3, #0]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	212c      	movs	r1, #44	; 0x2c
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3350      	adds	r3, #80	; 0x50
 8006b80:	681b      	ldr	r3, [r3, #0]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f006 fc2c 	bl	800d3f8 <USB_GetCurrentFrame>
 8006ba0:	4603      	mov	r3, r0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f006 fc07 	bl	800d3ca <USB_GetHostSpeed>
 8006bbc:	4603      	mov	r3, r0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b086      	sub	sp, #24
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f006 fa39 	bl	800d062 <USB_ReadChInterrupts>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d11a      	bne.n	8006c30 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	461a      	mov	r2, r3
 8006c08:	2304      	movs	r3, #4
 8006c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	212c      	movs	r1, #44	; 0x2c
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	3361      	adds	r3, #97	; 0x61
 8006c1a:	2207      	movs	r2, #7
 8006c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f006 fe6c 	bl	800d906 <USB_HC_Halt>
 8006c2e:	e0a2      	b.n	8006d76 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f006 fa11 	bl	800d062 <USB_ReadChInterrupts>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4a:	d11b      	bne.n	8006c84 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	212c      	movs	r1, #44	; 0x2c
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3361      	adds	r3, #97	; 0x61
 8006c6e:	2208      	movs	r2, #8
 8006c70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f006 fe42 	bl	800d906 <USB_HC_Halt>
 8006c82:	e078      	b.n	8006d76 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f006 f9e7 	bl	800d062 <USB_ReadChInterrupts>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d11a      	bne.n	8006cd4 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	461a      	mov	r2, r3
 8006cac:	2308      	movs	r3, #8
 8006cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	212c      	movs	r1, #44	; 0x2c
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3361      	adds	r3, #97	; 0x61
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f006 fe1a 	bl	800d906 <USB_HC_Halt>
 8006cd2:	e050      	b.n	8006d76 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f006 f9bf 	bl	800d062 <USB_ReadChInterrupts>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cee:	d11b      	bne.n	8006d28 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	212c      	movs	r1, #44	; 0x2c
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	4413      	add	r3, r2
 8006d10:	3361      	adds	r3, #97	; 0x61
 8006d12:	2209      	movs	r2, #9
 8006d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f006 fdf0 	bl	800d906 <USB_HC_Halt>
 8006d26:	e026      	b.n	8006d76 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f006 f995 	bl	800d062 <USB_ReadChInterrupts>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d119      	bne.n	8006d76 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	212c      	movs	r1, #44	; 0x2c
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3361      	adds	r3, #97	; 0x61
 8006d62:	2207      	movs	r2, #7
 8006d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f006 fdc8 	bl	800d906 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f006 f96e 	bl	800d062 <USB_ReadChInterrupts>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d112      	bne.n	8006db8 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f006 fdb2 	bl	800d906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	461a      	mov	r2, r3
 8006db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	e325      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f006 f94d 	bl	800d062 <USB_ReadChInterrupts>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	f040 80e8 	bne.w	8006fa4 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de0:	461a      	mov	r2, r3
 8006de2:	2320      	movs	r3, #32
 8006de4:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d019      	beq.n	8006e22 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	212c      	movs	r1, #44	; 0x2c
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	3348      	adds	r3, #72	; 0x48
 8006dfc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	0159      	lsls	r1, r3, #5
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	440b      	add	r3, r1
 8006e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	202c      	movs	r0, #44	; 0x2c
 8006e18:	fb00 f303 	mul.w	r3, r0, r3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3350      	adds	r3, #80	; 0x50
 8006e20:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	212c      	movs	r1, #44	; 0x2c
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3361      	adds	r3, #97	; 0x61
 8006e30:	2201      	movs	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	212c      	movs	r1, #44	; 0x2c
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	335c      	adds	r3, #92	; 0x5c
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	461a      	mov	r2, r3
 8006e54:	2301      	movs	r3, #1
 8006e56:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	212c      	movs	r1, #44	; 0x2c
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	333f      	adds	r3, #63	; 0x3f
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	212c      	movs	r1, #44	; 0x2c
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	4413      	add	r3, r2
 8006e78:	333f      	adds	r3, #63	; 0x3f
 8006e7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d111      	bne.n	8006ea4 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f006 fd3b 	bl	800d906 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	6093      	str	r3, [r2, #8]
 8006ea2:	e03a      	b.n	8006f1a <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	212c      	movs	r1, #44	; 0x2c
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	333f      	adds	r3, #63	; 0x3f
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d009      	beq.n	8006ecc <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	212c      	movs	r1, #44	; 0x2c
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	333f      	adds	r3, #63	; 0x3f
 8006ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d126      	bne.n	8006f1a <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	212c      	movs	r1, #44	; 0x2c
 8006ef2:	fb01 f303 	mul.w	r3, r1, r3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	3360      	adds	r3, #96	; 0x60
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	b2d9      	uxtb	r1, r3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	202c      	movs	r0, #44	; 0x2c
 8006f08:	fb00 f303 	mul.w	r3, r0, r3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3360      	adds	r3, #96	; 0x60
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f008 ff87 	bl	800fe28 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d12b      	bne.n	8006f7a <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	212c      	movs	r1, #44	; 0x2c
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3348      	adds	r3, #72	; 0x48
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	202c      	movs	r0, #44	; 0x2c
 8006f38:	fb00 f202 	mul.w	r2, r0, r2
 8006f3c:	440a      	add	r2, r1
 8006f3e:	3240      	adds	r2, #64	; 0x40
 8006f40:	8812      	ldrh	r2, [r2, #0]
 8006f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 825a 	beq.w	8007404 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	212c      	movs	r1, #44	; 0x2c
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3354      	adds	r3, #84	; 0x54
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f083 0301 	eor.w	r3, r3, #1
 8006f64:	b2d8      	uxtb	r0, r3
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	212c      	movs	r1, #44	; 0x2c
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	3354      	adds	r3, #84	; 0x54
 8006f74:	4602      	mov	r2, r0
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e244      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	212c      	movs	r1, #44	; 0x2c
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	3354      	adds	r3, #84	; 0x54
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f083 0301 	eor.w	r3, r3, #1
 8006f8e:	b2d8      	uxtb	r0, r3
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	212c      	movs	r1, #44	; 0x2c
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3354      	adds	r3, #84	; 0x54
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e22f      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f006 f857 	bl	800d062 <USB_ReadChInterrupts>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d109      	bne.n	8006fd2 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2320      	movs	r3, #32
 8006fce:	6093      	str	r3, [r2, #8]
 8006fd0:	e218      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f006 f840 	bl	800d062 <USB_ReadChInterrupts>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	f040 816b 	bne.w	80072c4 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	212c      	movs	r1, #44	; 0x2c
 8007006:	fb01 f303 	mul.w	r3, r1, r3
 800700a:	4413      	add	r3, r2
 800700c:	3361      	adds	r3, #97	; 0x61
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d112      	bne.n	800703a <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	212c      	movs	r1, #44	; 0x2c
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	4413      	add	r3, r2
 8007020:	3361      	adds	r3, #97	; 0x61
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	212c      	movs	r1, #44	; 0x2c
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	3360      	adds	r3, #96	; 0x60
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e135      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	212c      	movs	r1, #44	; 0x2c
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	4413      	add	r3, r2
 8007046:	3361      	adds	r3, #97	; 0x61
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d112      	bne.n	8007074 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	212c      	movs	r1, #44	; 0x2c
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	4413      	add	r3, r2
 800705a:	3361      	adds	r3, #97	; 0x61
 800705c:	2202      	movs	r2, #2
 800705e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	212c      	movs	r1, #44	; 0x2c
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	3360      	adds	r3, #96	; 0x60
 800706e:	2205      	movs	r2, #5
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	e118      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	212c      	movs	r1, #44	; 0x2c
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	3361      	adds	r3, #97	; 0x61
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b07      	cmp	r3, #7
 8007086:	d009      	beq.n	800709c <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	212c      	movs	r1, #44	; 0x2c
 800708e:	fb01 f303 	mul.w	r3, r1, r3
 8007092:	4413      	add	r3, r2
 8007094:	3361      	adds	r3, #97	; 0x61
 8007096:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007098:	2b09      	cmp	r3, #9
 800709a:	d159      	bne.n	8007150 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	212c      	movs	r1, #44	; 0x2c
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	4413      	add	r3, r2
 80070a8:	3361      	adds	r3, #97	; 0x61
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	212c      	movs	r1, #44	; 0x2c
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	4413      	add	r3, r2
 80070ba:	335c      	adds	r3, #92	; 0x5c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	202c      	movs	r0, #44	; 0x2c
 80070c6:	fb00 f303 	mul.w	r3, r0, r3
 80070ca:	440b      	add	r3, r1
 80070cc:	335c      	adds	r3, #92	; 0x5c
 80070ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	212c      	movs	r1, #44	; 0x2c
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	335c      	adds	r3, #92	; 0x5c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d912      	bls.n	800710a <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	212c      	movs	r1, #44	; 0x2c
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	335c      	adds	r3, #92	; 0x5c
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	212c      	movs	r1, #44	; 0x2c
 80070fc:	fb01 f303 	mul.w	r3, r1, r3
 8007100:	4413      	add	r3, r2
 8007102:	3360      	adds	r3, #96	; 0x60
 8007104:	2204      	movs	r2, #4
 8007106:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007108:	e0cd      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	212c      	movs	r1, #44	; 0x2c
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	4413      	add	r3, r2
 8007116:	3360      	adds	r3, #96	; 0x60
 8007118:	2202      	movs	r2, #2
 800711a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007132:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800713a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800714e:	e0aa      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	212c      	movs	r1, #44	; 0x2c
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	3361      	adds	r3, #97	; 0x61
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b05      	cmp	r3, #5
 8007162:	d109      	bne.n	8007178 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	212c      	movs	r1, #44	; 0x2c
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	4413      	add	r3, r2
 8007170:	3361      	adds	r3, #97	; 0x61
 8007172:	2202      	movs	r2, #2
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e096      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	212c      	movs	r1, #44	; 0x2c
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	3361      	adds	r3, #97	; 0x61
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d109      	bne.n	80071a0 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	212c      	movs	r1, #44	; 0x2c
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	4413      	add	r3, r2
 8007198:	3361      	adds	r3, #97	; 0x61
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	e082      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	212c      	movs	r1, #44	; 0x2c
 80071a6:	fb01 f303 	mul.w	r3, r1, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	3361      	adds	r3, #97	; 0x61
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d13f      	bne.n	8007234 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	212c      	movs	r1, #44	; 0x2c
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	4413      	add	r3, r2
 80071c0:	3361      	adds	r3, #97	; 0x61
 80071c2:	2202      	movs	r2, #2
 80071c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	212c      	movs	r1, #44	; 0x2c
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	3360      	adds	r3, #96	; 0x60
 80071d4:	2202      	movs	r2, #2
 80071d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	212c      	movs	r1, #44	; 0x2c
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	333f      	adds	r3, #63	; 0x3f
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d009      	beq.n	8007200 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	212c      	movs	r1, #44	; 0x2c
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	4413      	add	r3, r2
 80071f8:	333f      	adds	r3, #63	; 0x3f
 80071fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d152      	bne.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007216:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800721e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	461a      	mov	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e038      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	212c      	movs	r1, #44	; 0x2c
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	3361      	adds	r3, #97	; 0x61
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b08      	cmp	r3, #8
 8007246:	d123      	bne.n	8007290 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	212c      	movs	r1, #44	; 0x2c
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	4413      	add	r3, r2
 8007254:	3361      	adds	r3, #97	; 0x61
 8007256:	2202      	movs	r2, #2
 8007258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	212c      	movs	r1, #44	; 0x2c
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	335c      	adds	r3, #92	; 0x5c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	202c      	movs	r0, #44	; 0x2c
 8007272:	fb00 f303 	mul.w	r3, r0, r3
 8007276:	440b      	add	r3, r1
 8007278:	335c      	adds	r3, #92	; 0x5c
 800727a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	212c      	movs	r1, #44	; 0x2c
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	4413      	add	r3, r2
 8007288:	3360      	adds	r3, #96	; 0x60
 800728a:	2204      	movs	r2, #4
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e00a      	b.n	80072a6 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	212c      	movs	r1, #44	; 0x2c
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	3361      	adds	r3, #97	; 0x61
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	f000 80ae 	beq.w	8007402 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	202c      	movs	r0, #44	; 0x2c
 80072b0:	fb00 f303 	mul.w	r3, r0, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	3360      	adds	r3, #96	; 0x60
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f008 fdb3 	bl	800fe28 <HAL_HCD_HC_NotifyURBChange_Callback>
 80072c2:	e09f      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f005 fec7 	bl	800d062 <USB_ReadChInterrupts>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d123      	bne.n	8007326 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	461a      	mov	r2, r3
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	212c      	movs	r1, #44	; 0x2c
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	3361      	adds	r3, #97	; 0x61
 80072fe:	2205      	movs	r2, #5
 8007300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	212c      	movs	r1, #44	; 0x2c
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	335c      	adds	r3, #92	; 0x5c
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f006 faf1 	bl	800d906 <USB_HC_Halt>
 8007324:	e06e      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f005 fe96 	bl	800d062 <USB_ReadChInterrupts>
 8007336:	4603      	mov	r3, r0
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d161      	bne.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	212c      	movs	r1, #44	; 0x2c
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	333f      	adds	r3, #63	; 0x3f
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d11a      	bne.n	800738a <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	212c      	movs	r1, #44	; 0x2c
 800735a:	fb01 f303 	mul.w	r3, r1, r3
 800735e:	4413      	add	r3, r2
 8007360:	335c      	adds	r3, #92	; 0x5c
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	212c      	movs	r1, #44	; 0x2c
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	3361      	adds	r3, #97	; 0x61
 8007374:	2204      	movs	r2, #4
 8007376:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	4611      	mov	r1, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f006 fabf 	bl	800d906 <USB_HC_Halt>
 8007388:	e031      	b.n	80073ee <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	212c      	movs	r1, #44	; 0x2c
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	333f      	adds	r3, #63	; 0x3f
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	212c      	movs	r1, #44	; 0x2c
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	333f      	adds	r3, #63	; 0x3f
 80073ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d11d      	bne.n	80073ee <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	212c      	movs	r1, #44	; 0x2c
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	4413      	add	r3, r2
 80073be:	335c      	adds	r3, #92	; 0x5c
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	212c      	movs	r1, #44	; 0x2c
 80073d2:	fb01 f303 	mul.w	r3, r1, r3
 80073d6:	4413      	add	r3, r2
 80073d8:	3361      	adds	r3, #97	; 0x61
 80073da:	2204      	movs	r2, #4
 80073dc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f006 fa8c 	bl	800d906 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fa:	461a      	mov	r2, r3
 80073fc:	2310      	movs	r3, #16
 80073fe:	6093      	str	r3, [r2, #8]
 8007400:	e000      	b.n	8007404 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8007402:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f005 fe17 	bl	800d062 <USB_ReadChInterrupts>
 8007434:	4603      	mov	r3, r0
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d11a      	bne.n	8007474 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744a:	461a      	mov	r2, r3
 800744c:	2304      	movs	r3, #4
 800744e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	3361      	adds	r3, #97	; 0x61
 800745e:	2207      	movs	r2, #7
 8007460:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f006 fa4a 	bl	800d906 <USB_HC_Halt>
 8007472:	e393      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f005 fdef 	bl	800d062 <USB_ReadChInterrupts>
 8007484:	4603      	mov	r3, r0
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d137      	bne.n	80074fe <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	4413      	add	r3, r2
 8007496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749a:	461a      	mov	r2, r3
 800749c:	2320      	movs	r3, #32
 800749e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	212c      	movs	r1, #44	; 0x2c
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	333d      	adds	r3, #61	; 0x3d
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f040 8373 	bne.w	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	212c      	movs	r1, #44	; 0x2c
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	333d      	adds	r3, #61	; 0x3d
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	212c      	movs	r1, #44	; 0x2c
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	3360      	adds	r3, #96	; 0x60
 80074d6:	2202      	movs	r2, #2
 80074d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	212c      	movs	r1, #44	; 0x2c
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	3361      	adds	r3, #97	; 0x61
 80074e8:	2203      	movs	r2, #3
 80074ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f006 fa05 	bl	800d906 <USB_HC_Halt>
 80074fc:	e34e      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f005 fdaa 	bl	800d062 <USB_ReadChInterrupts>
 800750e:	4603      	mov	r3, r0
 8007510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d112      	bne.n	8007540 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007526:	461a      	mov	r2, r3
 8007528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f006 f9e4 	bl	800d906 <USB_HC_Halt>
 800753e:	e32d      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f005 fd89 	bl	800d062 <USB_ReadChInterrupts>
 8007550:	4603      	mov	r3, r0
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d142      	bne.n	80075e0 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	212c      	movs	r1, #44	; 0x2c
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	4413      	add	r3, r2
 8007566:	335c      	adds	r3, #92	; 0x5c
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f005 fd73 	bl	800d062 <USB_ReadChInterrupts>
 800757c:	4603      	mov	r3, r0
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b40      	cmp	r3, #64	; 0x40
 8007584:	d111      	bne.n	80075aa <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	212c      	movs	r1, #44	; 0x2c
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	333d      	adds	r3, #61	; 0x3d
 8007594:	2201      	movs	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a4:	461a      	mov	r2, r3
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	461a      	mov	r2, r3
 80075b8:	2301      	movs	r3, #1
 80075ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	212c      	movs	r1, #44	; 0x2c
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	3361      	adds	r3, #97	; 0x61
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f006 f994 	bl	800d906 <USB_HC_Halt>
 80075de:	e2dd      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f005 fd39 	bl	800d062 <USB_ReadChInterrupts>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d12c      	bne.n	8007654 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	212c      	movs	r1, #44	; 0x2c
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	3361      	adds	r3, #97	; 0x61
 8007608:	2205      	movs	r2, #5
 800760a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	212c      	movs	r1, #44	; 0x2c
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	333d      	adds	r3, #61	; 0x3d
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	212c      	movs	r1, #44	; 0x2c
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	4413      	add	r3, r2
 800762a:	335c      	adds	r3, #92	; 0x5c
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f006 f963 	bl	800d906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764c:	461a      	mov	r2, r3
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	6093      	str	r3, [r2, #8]
 8007652:	e2a3      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f005 fcff 	bl	800d062 <USB_ReadChInterrupts>
 8007664:	4603      	mov	r3, r0
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b08      	cmp	r3, #8
 800766c:	d11a      	bne.n	80076a4 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	461a      	mov	r2, r3
 800767c:	2308      	movs	r3, #8
 800767e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	212c      	movs	r1, #44	; 0x2c
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	4413      	add	r3, r2
 800768c:	3361      	adds	r3, #97	; 0x61
 800768e:	2206      	movs	r2, #6
 8007690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f006 f932 	bl	800d906 <USB_HC_Halt>
 80076a2:	e27b      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f005 fcd7 	bl	800d062 <USB_ReadChInterrupts>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b10      	cmp	r3, #16
 80076bc:	d140      	bne.n	8007740 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	212c      	movs	r1, #44	; 0x2c
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	335c      	adds	r3, #92	; 0x5c
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	212c      	movs	r1, #44	; 0x2c
 80076d6:	fb01 f303 	mul.w	r3, r1, r3
 80076da:	4413      	add	r3, r2
 80076dc:	3361      	adds	r3, #97	; 0x61
 80076de:	2204      	movs	r2, #4
 80076e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	212c      	movs	r1, #44	; 0x2c
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	333d      	adds	r3, #61	; 0x3d
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d112      	bne.n	800771c <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	212c      	movs	r1, #44	; 0x2c
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	4413      	add	r3, r2
 8007702:	333c      	adds	r3, #60	; 0x3c
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	212c      	movs	r1, #44	; 0x2c
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	333d      	adds	r3, #61	; 0x3d
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f006 f8ed 	bl	800d906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007738:	461a      	mov	r2, r3
 800773a:	2310      	movs	r3, #16
 800773c:	6093      	str	r3, [r2, #8]
 800773e:	e22d      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f005 fc89 	bl	800d062 <USB_ReadChInterrupts>
 8007750:	4603      	mov	r3, r0
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	2b80      	cmp	r3, #128	; 0x80
 8007758:	d164      	bne.n	8007824 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d111      	bne.n	8007786 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	212c      	movs	r1, #44	; 0x2c
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	3361      	adds	r3, #97	; 0x61
 8007770:	2207      	movs	r2, #7
 8007772:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f006 f8c1 	bl	800d906 <USB_HC_Halt>
 8007784:	e044      	b.n	8007810 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	212c      	movs	r1, #44	; 0x2c
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	335c      	adds	r3, #92	; 0x5c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	202c      	movs	r0, #44	; 0x2c
 800779e:	fb00 f303 	mul.w	r3, r0, r3
 80077a2:	440b      	add	r3, r1
 80077a4:	335c      	adds	r3, #92	; 0x5c
 80077a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	212c      	movs	r1, #44	; 0x2c
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	335c      	adds	r3, #92	; 0x5c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d920      	bls.n	80077fe <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	212c      	movs	r1, #44	; 0x2c
 80077c2:	fb01 f303 	mul.w	r3, r1, r3
 80077c6:	4413      	add	r3, r2
 80077c8:	335c      	adds	r3, #92	; 0x5c
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	212c      	movs	r1, #44	; 0x2c
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	4413      	add	r3, r2
 80077da:	3360      	adds	r3, #96	; 0x60
 80077dc:	2204      	movs	r2, #4
 80077de:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	b2d9      	uxtb	r1, r3
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	202c      	movs	r0, #44	; 0x2c
 80077ea:	fb00 f303 	mul.w	r3, r0, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	3360      	adds	r3, #96	; 0x60
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f008 fb16 	bl	800fe28 <HAL_HCD_HC_NotifyURBChange_Callback>
 80077fc:	e008      	b.n	8007810 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	212c      	movs	r1, #44	; 0x2c
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	4413      	add	r3, r2
 800780a:	3360      	adds	r3, #96	; 0x60
 800780c:	2202      	movs	r2, #2
 800780e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781c:	461a      	mov	r2, r3
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	6093      	str	r3, [r2, #8]
 8007822:	e1bb      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f005 fc17 	bl	800d062 <USB_ReadChInterrupts>
 8007834:	4603      	mov	r3, r0
 8007836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800783a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783e:	d11b      	bne.n	8007878 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	212c      	movs	r1, #44	; 0x2c
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	4413      	add	r3, r2
 800784c:	3361      	adds	r3, #97	; 0x61
 800784e:	2209      	movs	r2, #9
 8007850:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f006 f852 	bl	800d906 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	4413      	add	r3, r2
 800786a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800786e:	461a      	mov	r2, r3
 8007870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007874:	6093      	str	r3, [r2, #8]
 8007876:	e191      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f005 fbed 	bl	800d062 <USB_ReadChInterrupts>
 8007888:	4603      	mov	r3, r0
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b02      	cmp	r3, #2
 8007890:	f040 8184 	bne.w	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	4413      	add	r3, r2
 800789c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a0:	461a      	mov	r2, r3
 80078a2:	2302      	movs	r3, #2
 80078a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	212c      	movs	r1, #44	; 0x2c
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	3361      	adds	r3, #97	; 0x61
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	f040 8087 	bne.w	80079ca <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	212c      	movs	r1, #44	; 0x2c
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	3361      	adds	r3, #97	; 0x61
 80078ca:	2202      	movs	r2, #2
 80078cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	212c      	movs	r1, #44	; 0x2c
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	4413      	add	r3, r2
 80078da:	3360      	adds	r3, #96	; 0x60
 80078dc:	2201      	movs	r2, #1
 80078de:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	212c      	movs	r1, #44	; 0x2c
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	333f      	adds	r3, #63	; 0x3f
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d00a      	beq.n	800790a <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	212c      	movs	r1, #44	; 0x2c
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	4413      	add	r3, r2
 8007900:	333f      	adds	r3, #63	; 0x3f
 8007902:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007904:	2b03      	cmp	r3, #3
 8007906:	f040 8139 	bne.w	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d113      	bne.n	800793a <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	212c      	movs	r1, #44	; 0x2c
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	4413      	add	r3, r2
 800791e:	3355      	adds	r3, #85	; 0x55
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	f083 0301 	eor.w	r3, r3, #1
 8007926:	b2d8      	uxtb	r0, r3
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	212c      	movs	r1, #44	; 0x2c
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	3355      	adds	r3, #85	; 0x55
 8007936:	4602      	mov	r2, r0
 8007938:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b01      	cmp	r3, #1
 8007940:	f040 811c 	bne.w	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	212c      	movs	r1, #44	; 0x2c
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	4413      	add	r3, r2
 8007950:	334c      	adds	r3, #76	; 0x4c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8111 	beq.w	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	212c      	movs	r1, #44	; 0x2c
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	4413      	add	r3, r2
 8007966:	334c      	adds	r3, #76	; 0x4c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	202c      	movs	r0, #44	; 0x2c
 8007970:	fb00 f202 	mul.w	r2, r0, r2
 8007974:	440a      	add	r2, r1
 8007976:	3240      	adds	r2, #64	; 0x40
 8007978:	8812      	ldrh	r2, [r2, #0]
 800797a:	4413      	add	r3, r2
 800797c:	3b01      	subs	r3, #1
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	202c      	movs	r0, #44	; 0x2c
 8007984:	fb00 f202 	mul.w	r2, r0, r2
 8007988:	440a      	add	r2, r1
 800798a:	3240      	adds	r2, #64	; 0x40
 800798c:	8812      	ldrh	r2, [r2, #0]
 800798e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 80ee 	beq.w	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	212c      	movs	r1, #44	; 0x2c
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	3355      	adds	r3, #85	; 0x55
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f083 0301 	eor.w	r3, r3, #1
 80079b4:	b2d8      	uxtb	r0, r3
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	212c      	movs	r1, #44	; 0x2c
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	3355      	adds	r3, #85	; 0x55
 80079c4:	4602      	mov	r2, r0
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e0d8      	b.n	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	212c      	movs	r1, #44	; 0x2c
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	3361      	adds	r3, #97	; 0x61
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d109      	bne.n	80079f2 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	212c      	movs	r1, #44	; 0x2c
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	3361      	adds	r3, #97	; 0x61
 80079ec:	2202      	movs	r2, #2
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e0c4      	b.n	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	212c      	movs	r1, #44	; 0x2c
 80079f8:	fb01 f303 	mul.w	r3, r1, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	3361      	adds	r3, #97	; 0x61
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d112      	bne.n	8007a2c <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	212c      	movs	r1, #44	; 0x2c
 8007a0c:	fb01 f303 	mul.w	r3, r1, r3
 8007a10:	4413      	add	r3, r2
 8007a12:	3361      	adds	r3, #97	; 0x61
 8007a14:	2202      	movs	r2, #2
 8007a16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	212c      	movs	r1, #44	; 0x2c
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	3360      	adds	r3, #96	; 0x60
 8007a26:	2202      	movs	r2, #2
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	e0a7      	b.n	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	212c      	movs	r1, #44	; 0x2c
 8007a32:	fb01 f303 	mul.w	r3, r1, r3
 8007a36:	4413      	add	r3, r2
 8007a38:	3361      	adds	r3, #97	; 0x61
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	d112      	bne.n	8007a66 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	212c      	movs	r1, #44	; 0x2c
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3361      	adds	r3, #97	; 0x61
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	212c      	movs	r1, #44	; 0x2c
 8007a58:	fb01 f303 	mul.w	r3, r1, r3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3360      	adds	r3, #96	; 0x60
 8007a60:	2202      	movs	r2, #2
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e08a      	b.n	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	212c      	movs	r1, #44	; 0x2c
 8007a6c:	fb01 f303 	mul.w	r3, r1, r3
 8007a70:	4413      	add	r3, r2
 8007a72:	3361      	adds	r3, #97	; 0x61
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d112      	bne.n	8007aa0 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	212c      	movs	r1, #44	; 0x2c
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	4413      	add	r3, r2
 8007a86:	3361      	adds	r3, #97	; 0x61
 8007a88:	2202      	movs	r2, #2
 8007a8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	212c      	movs	r1, #44	; 0x2c
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	3360      	adds	r3, #96	; 0x60
 8007a9a:	2205      	movs	r2, #5
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e06d      	b.n	8007b7c <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	212c      	movs	r1, #44	; 0x2c
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	3361      	adds	r3, #97	; 0x61
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b07      	cmp	r3, #7
 8007ab2:	d009      	beq.n	8007ac8 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	212c      	movs	r1, #44	; 0x2c
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	4413      	add	r3, r2
 8007ac0:	3361      	adds	r3, #97	; 0x61
 8007ac2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d168      	bne.n	8007b9a <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	212c      	movs	r1, #44	; 0x2c
 8007ace:	fb01 f303 	mul.w	r3, r1, r3
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3361      	adds	r3, #97	; 0x61
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	212c      	movs	r1, #44	; 0x2c
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	335c      	adds	r3, #92	; 0x5c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	202c      	movs	r0, #44	; 0x2c
 8007af2:	fb00 f303 	mul.w	r3, r0, r3
 8007af6:	440b      	add	r3, r1
 8007af8:	335c      	adds	r3, #92	; 0x5c
 8007afa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	212c      	movs	r1, #44	; 0x2c
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	335c      	adds	r3, #92	; 0x5c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d912      	bls.n	8007b36 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	335c      	adds	r3, #92	; 0x5c
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	212c      	movs	r1, #44	; 0x2c
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3360      	adds	r3, #96	; 0x60
 8007b30:	2204      	movs	r2, #4
 8007b32:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007b34:	e021      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	212c      	movs	r1, #44	; 0x2c
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	3360      	adds	r3, #96	; 0x60
 8007b44:	2202      	movs	r2, #2
 8007b46:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b5e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b66:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b74:	461a      	mov	r2, r3
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007b7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	b2d9      	uxtb	r1, r3
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	202c      	movs	r0, #44	; 0x2c
 8007b86:	fb00 f303 	mul.w	r3, r0, r3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3360      	adds	r3, #96	; 0x60
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f008 f948 	bl	800fe28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007b98:	e000      	b.n	8007b9c <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8007b9a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b08a      	sub	sp, #40	; 0x28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	0c5b      	lsrs	r3, r3, #17
 8007bc8:	f003 030f 	and.w	r3, r3, #15
 8007bcc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bd6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d004      	beq.n	8007be8 <HCD_RXQLVL_IRQHandler+0x46>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b05      	cmp	r3, #5
 8007be2:	f000 80a9 	beq.w	8007d38 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007be6:	e0aa      	b.n	8007d3e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80a6 	beq.w	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	212c      	movs	r1, #44	; 0x2c
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3344      	adds	r3, #68	; 0x44
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 809b 	beq.w	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	212c      	movs	r1, #44	; 0x2c
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3350      	adds	r3, #80	; 0x50
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	441a      	add	r2, r3
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	202c      	movs	r0, #44	; 0x2c
 8007c20:	fb00 f303 	mul.w	r3, r0, r3
 8007c24:	440b      	add	r3, r1
 8007c26:	334c      	adds	r3, #76	; 0x4c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d87a      	bhi.n	8007d24 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	212c      	movs	r1, #44	; 0x2c
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3344      	adds	r3, #68	; 0x44
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	b292      	uxth	r2, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	f005 f9a0 	bl	800cf8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	212c      	movs	r1, #44	; 0x2c
 8007c52:	fb01 f303 	mul.w	r3, r1, r3
 8007c56:	4413      	add	r3, r2
 8007c58:	3344      	adds	r3, #68	; 0x44
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	441a      	add	r2, r3
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	202c      	movs	r0, #44	; 0x2c
 8007c66:	fb00 f303 	mul.w	r3, r0, r3
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3344      	adds	r3, #68	; 0x44
 8007c6e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3350      	adds	r3, #80	; 0x50
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	441a      	add	r2, r3
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	202c      	movs	r0, #44	; 0x2c
 8007c8a:	fb00 f303 	mul.w	r3, r0, r3
 8007c8e:	440b      	add	r3, r1
 8007c90:	3350      	adds	r3, #80	; 0x50
 8007c92:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	0cdb      	lsrs	r3, r3, #19
 8007ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	212c      	movs	r1, #44	; 0x2c
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3340      	adds	r3, #64	; 0x40
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d13c      	bne.n	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d039      	beq.n	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cde:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ce6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	212c      	movs	r1, #44	; 0x2c
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	4413      	add	r3, r2
 8007d06:	3354      	adds	r3, #84	; 0x54
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f083 0301 	eor.w	r3, r3, #1
 8007d0e:	b2d8      	uxtb	r0, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	212c      	movs	r1, #44	; 0x2c
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3354      	adds	r3, #84	; 0x54
 8007d1e:	4602      	mov	r2, r0
 8007d20:	701a      	strb	r2, [r3, #0]
      break;
 8007d22:	e00b      	b.n	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	212c      	movs	r1, #44	; 0x2c
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	3360      	adds	r3, #96	; 0x60
 8007d32:	2204      	movs	r2, #4
 8007d34:	701a      	strb	r2, [r3, #0]
      break;
 8007d36:	e001      	b.n	8007d3c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e000      	b.n	8007d3e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007d3c:	bf00      	nop
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d72:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d10b      	bne.n	8007d96 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d102      	bne.n	8007d8e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f008 f831 	bl	800fdf0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f043 0302 	orr.w	r3, r3, #2
 8007d94:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d132      	bne.n	8007e06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f043 0308 	orr.w	r3, r3, #8
 8007da6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d126      	bne.n	8007e00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d113      	bne.n	8007de2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc4:	d106      	bne.n	8007dd4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2102      	movs	r1, #2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f005 fa5f 	bl	800d290 <USB_InitFSLSPClkSel>
 8007dd2:	e011      	b.n	8007df8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f005 fa58 	bl	800d290 <USB_InitFSLSPClkSel>
 8007de0:	e00a      	b.n	8007df8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d106      	bne.n	8007df8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df0:	461a      	mov	r2, r3
 8007df2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007df6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f008 f823 	bl	800fe44 <HAL_HCD_PortEnabled_Callback>
 8007dfe:	e002      	b.n	8007e06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f008 f82d 	bl	800fe60 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d103      	bne.n	8007e18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f043 0320 	orr.w	r3, r3, #32
 8007e16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6013      	str	r3, [r2, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e07f      	b.n	8007f3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fa f996 	bl	8002184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	; 0x24
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d107      	bne.n	8007ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e006      	b.n	8007eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d104      	bne.n	8007ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6859      	ldr	r1, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <HAL_I2C_Init+0x11c>)
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691a      	ldr	r2, [r3, #16]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69d9      	ldr	r1, [r3, #28]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	02008000 	.word	0x02008000

08007f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d138      	bne.n	8007fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e032      	b.n	8007fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2224      	movs	r2, #36	; 0x24
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6819      	ldr	r1, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e000      	b.n	8007fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fd4:	2302      	movs	r3, #2
  }
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d139      	bne.n	800806c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008002:	2302      	movs	r3, #2
 8008004:	e033      	b.n	800806e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2224      	movs	r2, #36	; 0x24
 8008012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0201 	bic.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e0bf      	b.n	800820e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa f916 	bl	80022d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80080be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6999      	ldr	r1, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80080d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6899      	ldr	r1, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b4a      	ldr	r3, [pc, #296]	; (8008218 <HAL_LTDC_Init+0x19c>)
 80080f0:	400b      	ands	r3, r1
 80080f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6899      	ldr	r1, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68d9      	ldr	r1, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b3e      	ldr	r3, [pc, #248]	; (8008218 <HAL_LTDC_Init+0x19c>)
 800811e:	400b      	ands	r3, r1
 8008120:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68d9      	ldr	r1, [r3, #12]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1a      	ldr	r2, [r3, #32]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6919      	ldr	r1, [r3, #16]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b33      	ldr	r3, [pc, #204]	; (8008218 <HAL_LTDC_Init+0x19c>)
 800814c:	400b      	ands	r3, r1
 800814e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6919      	ldr	r1, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6959      	ldr	r1, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	4b27      	ldr	r3, [pc, #156]	; (8008218 <HAL_LTDC_Init+0x19c>)
 800817a:	400b      	ands	r3, r1
 800817c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6959      	ldr	r1, [r3, #20]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0206 	orr.w	r2, r2, #6
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	f000f800 	.word	0xf000f800

0800821c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d023      	beq.n	8008286 <HAL_LTDC_IRQHandler+0x6a>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01e      	beq.n	8008286 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0204 	bic.w	r2, r2, #4
 8008256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2204      	movs	r2, #4
 800825e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008266:	f043 0201 	orr.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2204      	movs	r2, #4
 8008274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f86f 	bl	8008364 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d023      	beq.n	80082d8 <HAL_LTDC_IRQHandler+0xbc>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01e      	beq.n	80082d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0202 	bic.w	r2, r2, #2
 80082a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2202      	movs	r2, #2
 80082b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082b8:	f043 0202 	orr.w	r2, r3, #2
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f846 	bl	8008364 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01b      	beq.n	800831a <HAL_LTDC_IRQHandler+0xfe>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d016      	beq.n	800831a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0201 	bic.w	r2, r2, #1
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f82f 	bl	8008378 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01b      	beq.n	800835c <HAL_LTDC_IRQHandler+0x140>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d016      	beq.n	800835c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0208 	bic.w	r2, r2, #8
 800833c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2208      	movs	r2, #8
 8008344:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f818 	bl	800838c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_LTDC_ConfigLayer+0x1a>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e02c      	b.n	8008414 <HAL_LTDC_ConfigLayer+0x74>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2134      	movs	r1, #52	; 0x34
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	4413      	add	r3, r2
 80083d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4614      	mov	r4, r2
 80083de:	461d      	mov	r5, r3
 80083e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f81f 	bl	8008438 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2201      	movs	r2, #1
 8008400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bdb0      	pop	{r4, r5, r7, pc}

0800841c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800842a:	b2db      	uxtb	r3, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008438:	b480      	push	{r7}
 800843a:	b089      	sub	sp, #36	; 0x24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	0c1b      	lsrs	r3, r3, #16
 8008450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008454:	4413      	add	r3, r2
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	01db      	lsls	r3, r3, #7
 8008464:	4413      	add	r3, r2
 8008466:	3384      	adds	r3, #132	; 0x84
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	4611      	mov	r1, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	01d2      	lsls	r2, r2, #7
 8008474:	440a      	add	r2, r1
 8008476:	3284      	adds	r2, #132	; 0x84
 8008478:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800847c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800848e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008490:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4619      	mov	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	01db      	lsls	r3, r3, #7
 800849c:	440b      	add	r3, r1
 800849e:	3384      	adds	r3, #132	; 0x84
 80084a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80084a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084b6:	4413      	add	r3, r2
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	01db      	lsls	r3, r3, #7
 80084c6:	4413      	add	r3, r2
 80084c8:	3384      	adds	r3, #132	; 0x84
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	4611      	mov	r1, r2
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	01d2      	lsls	r2, r2, #7
 80084d6:	440a      	add	r2, r1
 80084d8:	3284      	adds	r2, #132	; 0x84
 80084da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084ee:	4413      	add	r3, r2
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	01db      	lsls	r3, r3, #7
 80084fc:	440b      	add	r3, r1
 80084fe:	3384      	adds	r3, #132	; 0x84
 8008500:	4619      	mov	r1, r3
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	01db      	lsls	r3, r3, #7
 8008512:	4413      	add	r3, r2
 8008514:	3384      	adds	r3, #132	; 0x84
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	4611      	mov	r1, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	01d2      	lsls	r2, r2, #7
 8008522:	440a      	add	r2, r1
 8008524:	3284      	adds	r2, #132	; 0x84
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	01db      	lsls	r3, r3, #7
 8008536:	4413      	add	r3, r2
 8008538:	3384      	adds	r3, #132	; 0x84
 800853a:	461a      	mov	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008552:	041b      	lsls	r3, r3, #16
 8008554:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	061b      	lsls	r3, r3, #24
 800855c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	01db      	lsls	r3, r3, #7
 8008568:	4413      	add	r3, r2
 800856a:	3384      	adds	r3, #132	; 0x84
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	3384      	adds	r3, #132	; 0x84
 800857c:	461a      	mov	r2, r3
 800857e:	2300      	movs	r3, #0
 8008580:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008588:	461a      	mov	r2, r3
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	431a      	orrs	r2, r3
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	01db      	lsls	r3, r3, #7
 800859c:	440b      	add	r3, r1
 800859e:	3384      	adds	r3, #132	; 0x84
 80085a0:	4619      	mov	r1, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	01db      	lsls	r3, r3, #7
 80085b2:	4413      	add	r3, r2
 80085b4:	3384      	adds	r3, #132	; 0x84
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	6812      	ldr	r2, [r2, #0]
 80085bc:	4611      	mov	r1, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	01d2      	lsls	r2, r2, #7
 80085c2:	440a      	add	r2, r1
 80085c4:	3284      	adds	r2, #132	; 0x84
 80085c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	01db      	lsls	r3, r3, #7
 80085d6:	4413      	add	r3, r2
 80085d8:	3384      	adds	r3, #132	; 0x84
 80085da:	461a      	mov	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	01db      	lsls	r3, r3, #7
 80085ec:	4413      	add	r3, r2
 80085ee:	3384      	adds	r3, #132	; 0x84
 80085f0:	69da      	ldr	r2, [r3, #28]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4619      	mov	r1, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	01db      	lsls	r3, r3, #7
 80085fc:	440b      	add	r3, r1
 80085fe:	3384      	adds	r3, #132	; 0x84
 8008600:	4619      	mov	r1, r3
 8008602:	4b58      	ldr	r3, [pc, #352]	; (8008764 <LTDC_SetConfig+0x32c>)
 8008604:	4013      	ands	r3, r2
 8008606:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	68f9      	ldr	r1, [r7, #12]
 8008612:	6809      	ldr	r1, [r1, #0]
 8008614:	4608      	mov	r0, r1
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	01c9      	lsls	r1, r1, #7
 800861a:	4401      	add	r1, r0
 800861c:	3184      	adds	r1, #132	; 0x84
 800861e:	4313      	orrs	r3, r2
 8008620:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	01db      	lsls	r3, r3, #7
 800862c:	4413      	add	r3, r2
 800862e:	3384      	adds	r3, #132	; 0x84
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	01db      	lsls	r3, r3, #7
 800863c:	4413      	add	r3, r2
 800863e:	3384      	adds	r3, #132	; 0x84
 8008640:	461a      	mov	r2, r3
 8008642:	2300      	movs	r3, #0
 8008644:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	4413      	add	r3, r2
 8008652:	3384      	adds	r3, #132	; 0x84
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008664:	2304      	movs	r3, #4
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	e01b      	b.n	80086a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d102      	bne.n	8008678 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008672:	2303      	movs	r3, #3
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	e014      	b.n	80086a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d00b      	beq.n	8008698 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008684:	2b02      	cmp	r3, #2
 8008686:	d007      	beq.n	8008698 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800868c:	2b03      	cmp	r3, #3
 800868e:	d003      	beq.n	8008698 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008694:	2b07      	cmp	r3, #7
 8008696:	d102      	bne.n	800869e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008698:	2302      	movs	r3, #2
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e001      	b.n	80086a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800869e:	2301      	movs	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	01db      	lsls	r3, r3, #7
 80086ac:	4413      	add	r3, r2
 80086ae:	3384      	adds	r3, #132	; 0x84
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	4611      	mov	r1, r2
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	01d2      	lsls	r2, r2, #7
 80086bc:	440a      	add	r2, r1
 80086be:	3284      	adds	r2, #132	; 0x84
 80086c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80086c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6859      	ldr	r1, [r3, #4]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	1acb      	subs	r3, r1, r3
 80086dc:	69f9      	ldr	r1, [r7, #28]
 80086de:	fb01 f303 	mul.w	r3, r1, r3
 80086e2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80086e4:	68f9      	ldr	r1, [r7, #12]
 80086e6:	6809      	ldr	r1, [r1, #0]
 80086e8:	4608      	mov	r0, r1
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	01c9      	lsls	r1, r1, #7
 80086ee:	4401      	add	r1, r0
 80086f0:	3184      	adds	r1, #132	; 0x84
 80086f2:	4313      	orrs	r3, r2
 80086f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	01db      	lsls	r3, r3, #7
 8008700:	4413      	add	r3, r2
 8008702:	3384      	adds	r3, #132	; 0x84
 8008704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	01db      	lsls	r3, r3, #7
 8008710:	440b      	add	r3, r1
 8008712:	3384      	adds	r3, #132	; 0x84
 8008714:	4619      	mov	r1, r3
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <LTDC_SetConfig+0x330>)
 8008718:	4013      	ands	r3, r2
 800871a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	01db      	lsls	r3, r3, #7
 8008726:	4413      	add	r3, r2
 8008728:	3384      	adds	r3, #132	; 0x84
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	01db      	lsls	r3, r3, #7
 800873c:	4413      	add	r3, r2
 800873e:	3384      	adds	r3, #132	; 0x84
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	4611      	mov	r1, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	01d2      	lsls	r2, r2, #7
 800874c:	440a      	add	r2, r1
 800874e:	3284      	adds	r2, #132	; 0x84
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	6013      	str	r3, [r2, #0]
}
 8008756:	bf00      	nop
 8008758:	3724      	adds	r7, #36	; 0x24
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	fffff8f8 	.word	0xfffff8f8
 8008768:	fffff800 	.word	0xfffff800

0800876c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a04      	ldr	r2, [pc, #16]	; (8008788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	40007000 	.word	0x40007000

0800878c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008796:	4b23      	ldr	r3, [pc, #140]	; (8008824 <HAL_PWREx_EnableOverDrive+0x98>)
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	4a22      	ldr	r2, [pc, #136]	; (8008824 <HAL_PWREx_EnableOverDrive+0x98>)
 800879c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a0:	6413      	str	r3, [r2, #64]	; 0x40
 80087a2:	4b20      	ldr	r3, [pc, #128]	; (8008824 <HAL_PWREx_EnableOverDrive+0x98>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80087ae:	4b1e      	ldr	r3, [pc, #120]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1d      	ldr	r2, [pc, #116]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087ba:	f7fb fe7d 	bl	80044b8 <HAL_GetTick>
 80087be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087c0:	e009      	b.n	80087d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087c2:	f7fb fe79 	bl	80044b8 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087d0:	d901      	bls.n	80087d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e022      	b.n	800881c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e2:	d1ee      	bne.n	80087c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80087e4:	4b10      	ldr	r3, [pc, #64]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a0f      	ldr	r2, [pc, #60]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087f0:	f7fb fe62 	bl	80044b8 <HAL_GetTick>
 80087f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087f6:	e009      	b.n	800880c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087f8:	f7fb fe5e 	bl	80044b8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008806:	d901      	bls.n	800880c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e007      	b.n	800881c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <HAL_PWREx_EnableOverDrive+0x9c>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008818:	d1ee      	bne.n	80087f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40023800 	.word	0x40023800
 8008828:	40007000 	.word	0x40007000

0800882c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af02      	add	r7, sp, #8
 8008832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008834:	f7fb fe40 	bl	80044b8 <HAL_GetTick>
 8008838:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e067      	b.n	8008914 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10b      	bne.n	8008868 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7f9 fe03 	bl	8002464 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800885e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f85e 	bl	8008924 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	3b01      	subs	r3, #1
 8008878:	021a      	lsls	r2, r3, #8
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	2120      	movs	r1, #32
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f856 	bl	8008940 <QSPI_WaitFlagStateUntilTimeout>
 8008894:	4603      	mov	r3, r0
 8008896:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d135      	bne.n	800890a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4b1d      	ldr	r3, [pc, #116]	; (800891c <HAL_QSPI_Init+0xf0>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6852      	ldr	r2, [r2, #4]
 80088ac:	0611      	lsls	r1, r2, #24
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	68d2      	ldr	r2, [r2, #12]
 80088b2:	4311      	orrs	r1, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	69d2      	ldr	r2, [r2, #28]
 80088b8:	4311      	orrs	r1, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6a12      	ldr	r2, [r2, #32]
 80088be:	4311      	orrs	r1, r2
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6812      	ldr	r2, [r2, #0]
 80088c4:	430b      	orrs	r3, r1
 80088c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	4b14      	ldr	r3, [pc, #80]	; (8008920 <HAL_QSPI_Init+0xf4>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6912      	ldr	r2, [r2, #16]
 80088d6:	0411      	lsls	r1, r2, #16
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6952      	ldr	r2, [r2, #20]
 80088dc:	4311      	orrs	r1, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6992      	ldr	r2, [r2, #24]
 80088e2:	4311      	orrs	r1, r2
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008912:	7afb      	ldrb	r3, [r7, #11]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	00ffff2f 	.word	0x00ffff2f
 8008920:	ffe0f8fe 	.word	0xffe0f8fe

08008924 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008950:	e01a      	b.n	8008988 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d016      	beq.n	8008988 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895a:	f7fb fdad 	bl	80044b8 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2204      	movs	r2, #4
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e00e      	b.n	80089a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	bf14      	ite	ne
 8008996:	2301      	movne	r3, #1
 8008998:	2300      	moveq	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d1d6      	bne.n	8008952 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e291      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 8087 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089d4:	4b96      	ldr	r3, [pc, #600]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 030c 	and.w	r3, r3, #12
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d00c      	beq.n	80089fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089e0:	4b93      	ldr	r3, [pc, #588]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f003 030c 	and.w	r3, r3, #12
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d112      	bne.n	8008a12 <HAL_RCC_OscConfig+0x62>
 80089ec:	4b90      	ldr	r3, [pc, #576]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f8:	d10b      	bne.n	8008a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089fa:	4b8d      	ldr	r3, [pc, #564]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d06c      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x130>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d168      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e26b      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1a:	d106      	bne.n	8008a2a <HAL_RCC_OscConfig+0x7a>
 8008a1c:	4b84      	ldr	r3, [pc, #528]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a83      	ldr	r2, [pc, #524]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	e02e      	b.n	8008a88 <HAL_RCC_OscConfig+0xd8>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10c      	bne.n	8008a4c <HAL_RCC_OscConfig+0x9c>
 8008a32:	4b7f      	ldr	r3, [pc, #508]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a7e      	ldr	r2, [pc, #504]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	4b7c      	ldr	r3, [pc, #496]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a7b      	ldr	r2, [pc, #492]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	e01d      	b.n	8008a88 <HAL_RCC_OscConfig+0xd8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCC_OscConfig+0xc0>
 8008a56:	4b76      	ldr	r3, [pc, #472]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a75      	ldr	r2, [pc, #468]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4b73      	ldr	r3, [pc, #460]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a72      	ldr	r2, [pc, #456]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e00b      	b.n	8008a88 <HAL_RCC_OscConfig+0xd8>
 8008a70:	4b6f      	ldr	r3, [pc, #444]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a6e      	ldr	r2, [pc, #440]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	4b6c      	ldr	r3, [pc, #432]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a6b      	ldr	r2, [pc, #428]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d013      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a90:	f7fb fd12 	bl	80044b8 <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a98:	f7fb fd0e 	bl	80044b8 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e21f      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aaa:	4b61      	ldr	r3, [pc, #388]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f0      	beq.n	8008a98 <HAL_RCC_OscConfig+0xe8>
 8008ab6:	e014      	b.n	8008ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7fb fcfe 	bl	80044b8 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ac0:	f7fb fcfa 	bl	80044b8 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b64      	cmp	r3, #100	; 0x64
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e20b      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ad2:	4b57      	ldr	r3, [pc, #348]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x110>
 8008ade:	e000      	b.n	8008ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d069      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008aee:	4b50      	ldr	r3, [pc, #320]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 030c 	and.w	r3, r3, #12
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008afa:	4b4d      	ldr	r3, [pc, #308]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 030c 	and.w	r3, r3, #12
 8008b02:	2b08      	cmp	r3, #8
 8008b04:	d11c      	bne.n	8008b40 <HAL_RCC_OscConfig+0x190>
 8008b06:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d116      	bne.n	8008b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b12:	4b47      	ldr	r3, [pc, #284]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <HAL_RCC_OscConfig+0x17a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d001      	beq.n	8008b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e1df      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b2a:	4b41      	ldr	r3, [pc, #260]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	493d      	ldr	r1, [pc, #244]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b3e:	e040      	b.n	8008bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d023      	beq.n	8008b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b48:	4b39      	ldr	r3, [pc, #228]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a38      	ldr	r2, [pc, #224]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b54:	f7fb fcb0 	bl	80044b8 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b5c:	f7fb fcac 	bl	80044b8 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e1bd      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6e:	4b30      	ldr	r3, [pc, #192]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f0      	beq.n	8008b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b7a:	4b2d      	ldr	r3, [pc, #180]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4929      	ldr	r1, [pc, #164]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	e018      	b.n	8008bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b90:	4b27      	ldr	r3, [pc, #156]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a26      	ldr	r2, [pc, #152]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9c:	f7fb fc8c 	bl	80044b8 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba4:	f7fb fc88 	bl	80044b8 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e199      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bb6:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f0      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d038      	beq.n	8008c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d019      	beq.n	8008c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bd6:	4b16      	ldr	r3, [pc, #88]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bda:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be2:	f7fb fc69 	bl	80044b8 <HAL_GetTick>
 8008be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bea:	f7fb fc65 	bl	80044b8 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e176      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <HAL_RCC_OscConfig+0x23a>
 8008c08:	e01a      	b.n	8008c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c0e:	4a08      	ldr	r2, [pc, #32]	; (8008c30 <HAL_RCC_OscConfig+0x280>)
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c16:	f7fb fc4f 	bl	80044b8 <HAL_GetTick>
 8008c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c1c:	e00a      	b.n	8008c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c1e:	f7fb fc4b 	bl	80044b8 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d903      	bls.n	8008c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e15c      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
 8008c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c34:	4b91      	ldr	r3, [pc, #580]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1ee      	bne.n	8008c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80a4 	beq.w	8008d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c4e:	4b8b      	ldr	r3, [pc, #556]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10d      	bne.n	8008c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c5a:	4b88      	ldr	r3, [pc, #544]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	4a87      	ldr	r2, [pc, #540]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c64:	6413      	str	r3, [r2, #64]	; 0x40
 8008c66:	4b85      	ldr	r3, [pc, #532]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c72:	2301      	movs	r3, #1
 8008c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c76:	4b82      	ldr	r3, [pc, #520]	; (8008e80 <HAL_RCC_OscConfig+0x4d0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d118      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008c82:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <HAL_RCC_OscConfig+0x4d0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a7e      	ldr	r2, [pc, #504]	; (8008e80 <HAL_RCC_OscConfig+0x4d0>)
 8008c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c8e:	f7fb fc13 	bl	80044b8 <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c96:	f7fb fc0f 	bl	80044b8 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b64      	cmp	r3, #100	; 0x64
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e120      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ca8:	4b75      	ldr	r3, [pc, #468]	; (8008e80 <HAL_RCC_OscConfig+0x4d0>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0f0      	beq.n	8008c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d106      	bne.n	8008cca <HAL_RCC_OscConfig+0x31a>
 8008cbc:	4b6f      	ldr	r3, [pc, #444]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	4a6e      	ldr	r2, [pc, #440]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cc2:	f043 0301 	orr.w	r3, r3, #1
 8008cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc8:	e02d      	b.n	8008d26 <HAL_RCC_OscConfig+0x376>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10c      	bne.n	8008cec <HAL_RCC_OscConfig+0x33c>
 8008cd2:	4b6a      	ldr	r3, [pc, #424]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4a69      	ldr	r2, [pc, #420]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cde:	4b67      	ldr	r3, [pc, #412]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce2:	4a66      	ldr	r2, [pc, #408]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008ce4:	f023 0304 	bic.w	r3, r3, #4
 8008ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cea:	e01c      	b.n	8008d26 <HAL_RCC_OscConfig+0x376>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	d10c      	bne.n	8008d0e <HAL_RCC_OscConfig+0x35e>
 8008cf4:	4b61      	ldr	r3, [pc, #388]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf8:	4a60      	ldr	r2, [pc, #384]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008cfa:	f043 0304 	orr.w	r3, r3, #4
 8008cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008d00:	4b5e      	ldr	r3, [pc, #376]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d04:	4a5d      	ldr	r2, [pc, #372]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d0c:	e00b      	b.n	8008d26 <HAL_RCC_OscConfig+0x376>
 8008d0e:	4b5b      	ldr	r3, [pc, #364]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	4a5a      	ldr	r2, [pc, #360]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d14:	f023 0301 	bic.w	r3, r3, #1
 8008d18:	6713      	str	r3, [r2, #112]	; 0x70
 8008d1a:	4b58      	ldr	r3, [pc, #352]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1e:	4a57      	ldr	r2, [pc, #348]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d20:	f023 0304 	bic.w	r3, r3, #4
 8008d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d015      	beq.n	8008d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2e:	f7fb fbc3 	bl	80044b8 <HAL_GetTick>
 8008d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d34:	e00a      	b.n	8008d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d36:	f7fb fbbf 	bl	80044b8 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d901      	bls.n	8008d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e0ce      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d4c:	4b4b      	ldr	r3, [pc, #300]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0ee      	beq.n	8008d36 <HAL_RCC_OscConfig+0x386>
 8008d58:	e014      	b.n	8008d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d5a:	f7fb fbad 	bl	80044b8 <HAL_GetTick>
 8008d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d60:	e00a      	b.n	8008d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d62:	f7fb fba9 	bl	80044b8 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e0b8      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d78:	4b40      	ldr	r3, [pc, #256]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1ee      	bne.n	8008d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d105      	bne.n	8008d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d8a:	4b3c      	ldr	r3, [pc, #240]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	4a3b      	ldr	r2, [pc, #236]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80a4 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 030c 	and.w	r3, r3, #12
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d06b      	beq.n	8008e84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d149      	bne.n	8008e48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db4:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a30      	ldr	r2, [pc, #192]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fb fb7a 	bl	80044b8 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc8:	f7fb fb76 	bl	80044b8 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e087      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dda:	4b28      	ldr	r3, [pc, #160]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	041b      	lsls	r3, r3, #16
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	061b      	lsls	r3, r3, #24
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	4a1b      	ldr	r2, [pc, #108]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e14:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e20:	f7fb fb4a 	bl	80044b8 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fb fb46 	bl	80044b8 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e057      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e3a:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0f0      	beq.n	8008e28 <HAL_RCC_OscConfig+0x478>
 8008e46:	e04f      	b.n	8008ee8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a0b      	ldr	r2, [pc, #44]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fb fb30 	bl	80044b8 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e5c:	f7fb fb2c 	bl	80044b8 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e03d      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e6e:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <HAL_RCC_OscConfig+0x4cc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1f0      	bne.n	8008e5c <HAL_RCC_OscConfig+0x4ac>
 8008e7a:	e035      	b.n	8008ee8 <HAL_RCC_OscConfig+0x538>
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008e84:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <HAL_RCC_OscConfig+0x544>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d028      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d121      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d11a      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d111      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d001      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40023800 	.word	0x40023800

08008ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0d0      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f10:	4b6a      	ldr	r3, [pc, #424]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 030f 	and.w	r3, r3, #15
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d910      	bls.n	8008f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1e:	4b67      	ldr	r3, [pc, #412]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f023 020f 	bic.w	r2, r3, #15
 8008f26:	4965      	ldr	r1, [pc, #404]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f2e:	4b63      	ldr	r3, [pc, #396]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d001      	beq.n	8008f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0b8      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d020      	beq.n	8008f8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f58:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	4a58      	ldr	r2, [pc, #352]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f70:	4b53      	ldr	r3, [pc, #332]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	4a52      	ldr	r2, [pc, #328]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f7c:	4b50      	ldr	r3, [pc, #320]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	494d      	ldr	r1, [pc, #308]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d040      	beq.n	800901c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d107      	bne.n	8008fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fa2:	4b47      	ldr	r3, [pc, #284]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d115      	bne.n	8008fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e07f      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d107      	bne.n	8008fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fba:	4b41      	ldr	r3, [pc, #260]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e073      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fca:	4b3d      	ldr	r3, [pc, #244]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e06b      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fda:	4b39      	ldr	r3, [pc, #228]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f023 0203 	bic.w	r2, r3, #3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	4936      	ldr	r1, [pc, #216]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fec:	f7fb fa64 	bl	80044b8 <HAL_GetTick>
 8008ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ff2:	e00a      	b.n	800900a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ff4:	f7fb fa60 	bl	80044b8 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009002:	4293      	cmp	r3, r2
 8009004:	d901      	bls.n	800900a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e053      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800900a:	4b2d      	ldr	r3, [pc, #180]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f003 020c 	and.w	r2, r3, #12
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	429a      	cmp	r2, r3
 800901a:	d1eb      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800901c:	4b27      	ldr	r3, [pc, #156]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d210      	bcs.n	800904c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f023 020f 	bic.w	r2, r3, #15
 8009032:	4922      	ldr	r1, [pc, #136]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	4313      	orrs	r3, r2
 8009038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800903a:	4b20      	ldr	r3, [pc, #128]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e032      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009058:	4b19      	ldr	r3, [pc, #100]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	4916      	ldr	r1, [pc, #88]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009066:	4313      	orrs	r3, r2
 8009068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009076:	4b12      	ldr	r3, [pc, #72]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	490e      	ldr	r1, [pc, #56]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009086:	4313      	orrs	r3, r2
 8009088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800908a:	f000 f821 	bl	80090d0 <HAL_RCC_GetSysClockFreq>
 800908e:	4602      	mov	r2, r0
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	091b      	lsrs	r3, r3, #4
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	490a      	ldr	r1, [pc, #40]	; (80090c4 <HAL_RCC_ClockConfig+0x1cc>)
 800909c:	5ccb      	ldrb	r3, [r1, r3]
 800909e:	fa22 f303 	lsr.w	r3, r2, r3
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <HAL_RCC_ClockConfig+0x1d0>)
 80090a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090a6:	4b09      	ldr	r3, [pc, #36]	; (80090cc <HAL_RCC_ClockConfig+0x1d4>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fb f9c0 	bl	8004430 <HAL_InitTick>

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40023c00 	.word	0x40023c00
 80090c0:	40023800 	.word	0x40023800
 80090c4:	080105a0 	.word	0x080105a0
 80090c8:	20000000 	.word	0x20000000
 80090cc:	20000018 	.word	0x20000018

080090d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d4:	b090      	sub	sp, #64	; 0x40
 80090d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e0:	2300      	movs	r3, #0
 80090e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090e8:	4b59      	ldr	r3, [pc, #356]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f003 030c 	and.w	r3, r3, #12
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d00d      	beq.n	8009110 <HAL_RCC_GetSysClockFreq+0x40>
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	f200 80a1 	bhi.w	800923c <HAL_RCC_GetSysClockFreq+0x16c>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <HAL_RCC_GetSysClockFreq+0x34>
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d003      	beq.n	800910a <HAL_RCC_GetSysClockFreq+0x3a>
 8009102:	e09b      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009104:	4b53      	ldr	r3, [pc, #332]	; (8009254 <HAL_RCC_GetSysClockFreq+0x184>)
 8009106:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009108:	e09b      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800910a:	4b53      	ldr	r3, [pc, #332]	; (8009258 <HAL_RCC_GetSysClockFreq+0x188>)
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800910e:	e098      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009110:	4b4f      	ldr	r3, [pc, #316]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800911a:	4b4d      	ldr	r3, [pc, #308]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d028      	beq.n	8009178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009126:	4b4a      	ldr	r3, [pc, #296]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	099b      	lsrs	r3, r3, #6
 800912c:	2200      	movs	r2, #0
 800912e:	623b      	str	r3, [r7, #32]
 8009130:	627a      	str	r2, [r7, #36]	; 0x24
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009138:	2100      	movs	r1, #0
 800913a:	4b47      	ldr	r3, [pc, #284]	; (8009258 <HAL_RCC_GetSysClockFreq+0x188>)
 800913c:	fb03 f201 	mul.w	r2, r3, r1
 8009140:	2300      	movs	r3, #0
 8009142:	fb00 f303 	mul.w	r3, r0, r3
 8009146:	4413      	add	r3, r2
 8009148:	4a43      	ldr	r2, [pc, #268]	; (8009258 <HAL_RCC_GetSysClockFreq+0x188>)
 800914a:	fba0 1202 	umull	r1, r2, r0, r2
 800914e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009150:	460a      	mov	r2, r1
 8009152:	62ba      	str	r2, [r7, #40]	; 0x28
 8009154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009156:	4413      	add	r3, r2
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	2200      	movs	r2, #0
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	61fa      	str	r2, [r7, #28]
 8009162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800916a:	f7f7 f855 	bl	8000218 <__aeabi_uldivmod>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4613      	mov	r3, r2
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009176:	e053      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009178:	4b35      	ldr	r3, [pc, #212]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	099b      	lsrs	r3, r3, #6
 800917e:	2200      	movs	r2, #0
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	617a      	str	r2, [r7, #20]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800918a:	f04f 0b00 	mov.w	fp, #0
 800918e:	4652      	mov	r2, sl
 8009190:	465b      	mov	r3, fp
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f04f 0100 	mov.w	r1, #0
 800919a:	0159      	lsls	r1, r3, #5
 800919c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091a0:	0150      	lsls	r0, r2, #5
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	ebb2 080a 	subs.w	r8, r2, sl
 80091aa:	eb63 090b 	sbc.w	r9, r3, fp
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80091ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80091be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80091c2:	ebb2 0408 	subs.w	r4, r2, r8
 80091c6:	eb63 0509 	sbc.w	r5, r3, r9
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	00eb      	lsls	r3, r5, #3
 80091d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091d8:	00e2      	lsls	r2, r4, #3
 80091da:	4614      	mov	r4, r2
 80091dc:	461d      	mov	r5, r3
 80091de:	eb14 030a 	adds.w	r3, r4, sl
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	eb45 030b 	adc.w	r3, r5, fp
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091f6:	4629      	mov	r1, r5
 80091f8:	028b      	lsls	r3, r1, #10
 80091fa:	4621      	mov	r1, r4
 80091fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009200:	4621      	mov	r1, r4
 8009202:	028a      	lsls	r2, r1, #10
 8009204:	4610      	mov	r0, r2
 8009206:	4619      	mov	r1, r3
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	2200      	movs	r2, #0
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	60fa      	str	r2, [r7, #12]
 8009210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009214:	f7f7 f800 	bl	8000218 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4613      	mov	r3, r2
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <HAL_RCC_GetSysClockFreq+0x180>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	0c1b      	lsrs	r3, r3, #16
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	3301      	adds	r3, #1
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800923a:	e002      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800923c:	4b05      	ldr	r3, [pc, #20]	; (8009254 <HAL_RCC_GetSysClockFreq+0x184>)
 800923e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009244:	4618      	mov	r0, r3
 8009246:	3740      	adds	r7, #64	; 0x40
 8009248:	46bd      	mov	sp, r7
 800924a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800924e:	bf00      	nop
 8009250:	40023800 	.word	0x40023800
 8009254:	00f42400 	.word	0x00f42400
 8009258:	017d7840 	.word	0x017d7840

0800925c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009260:	4b03      	ldr	r3, [pc, #12]	; (8009270 <HAL_RCC_GetHCLKFreq+0x14>)
 8009262:	681b      	ldr	r3, [r3, #0]
}
 8009264:	4618      	mov	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000000 	.word	0x20000000

08009274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009278:	f7ff fff0 	bl	800925c <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	0a9b      	lsrs	r3, r3, #10
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4903      	ldr	r1, [pc, #12]	; (8009298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40023800 	.word	0x40023800
 8009298:	080105b0 	.word	0x080105b0

0800929c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092a0:	f7ff ffdc 	bl	800925c <HAL_RCC_GetHCLKFreq>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	0b5b      	lsrs	r3, r3, #13
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	4903      	ldr	r1, [pc, #12]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092b2:	5ccb      	ldrb	r3, [r1, r3]
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	40023800 	.word	0x40023800
 80092c0:	080105b0 	.word	0x080105b0

080092c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d012      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092ec:	4b69      	ldr	r3, [pc, #420]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	4a68      	ldr	r2, [pc, #416]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80092f6:	6093      	str	r3, [r2, #8]
 80092f8:	4b66      	ldr	r3, [pc, #408]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009300:	4964      	ldr	r1, [pc, #400]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009302:	4313      	orrs	r3, r2
 8009304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800930e:	2301      	movs	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800931e:	4b5d      	ldr	r3, [pc, #372]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932c:	4959      	ldr	r1, [pc, #356]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932e:	4313      	orrs	r3, r2
 8009330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800933c:	d101      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800933e:	2301      	movs	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800934a:	2301      	movs	r3, #1
 800934c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d017      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800935a:	4b4e      	ldr	r3, [pc, #312]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800935c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	494a      	ldr	r1, [pc, #296]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936a:	4313      	orrs	r3, r2
 800936c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009378:	d101      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009386:	2301      	movs	r3, #1
 8009388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009396:	2301      	movs	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 808b 	beq.w	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80093a8:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	4a39      	ldr	r2, [pc, #228]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b2:	6413      	str	r3, [r2, #64]	; 0x40
 80093b4:	4b37      	ldr	r3, [pc, #220]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093bc:	60bb      	str	r3, [r7, #8]
 80093be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093c0:	4b35      	ldr	r3, [pc, #212]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a34      	ldr	r2, [pc, #208]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093cc:	f7fb f874 	bl	80044b8 <HAL_GetTick>
 80093d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80093d2:	e008      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d4:	f7fb f870 	bl	80044b8 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b64      	cmp	r3, #100	; 0x64
 80093e0:	d901      	bls.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e357      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80093e6:	4b2c      	ldr	r3, [pc, #176]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093f2:	4b28      	ldr	r3, [pc, #160]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d035      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	429a      	cmp	r2, r3
 800940e:	d02e      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009410:	4b20      	ldr	r3, [pc, #128]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800941a:	4b1e      	ldr	r3, [pc, #120]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	4a1d      	ldr	r2, [pc, #116]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009426:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	4a1a      	ldr	r2, [pc, #104]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800942c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009432:	4a18      	ldr	r2, [pc, #96]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009438:	4b16      	ldr	r3, [pc, #88]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800943a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b01      	cmp	r3, #1
 8009442:	d114      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009444:	f7fb f838 	bl	80044b8 <HAL_GetTick>
 8009448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800944a:	e00a      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800944c:	f7fb f834 	bl	80044b8 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	f241 3288 	movw	r2, #5000	; 0x1388
 800945a:	4293      	cmp	r3, r2
 800945c:	d901      	bls.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e319      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0ee      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800947a:	d111      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800948a:	400b      	ands	r3, r1
 800948c:	4901      	ldr	r1, [pc, #4]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948e:	4313      	orrs	r3, r2
 8009490:	608b      	str	r3, [r1, #8]
 8009492:	e00b      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009494:	40023800 	.word	0x40023800
 8009498:	40007000 	.word	0x40007000
 800949c:	0ffffcff 	.word	0x0ffffcff
 80094a0:	4baa      	ldr	r3, [pc, #680]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	4aa9      	ldr	r2, [pc, #676]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80094aa:	6093      	str	r3, [r2, #8]
 80094ac:	4ba7      	ldr	r3, [pc, #668]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b8:	49a4      	ldr	r1, [pc, #656]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0310 	and.w	r3, r3, #16
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094ca:	4ba0      	ldr	r3, [pc, #640]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d0:	4a9e      	ldr	r2, [pc, #632]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80094da:	4b9c      	ldr	r3, [pc, #624]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	4999      	ldr	r1, [pc, #612]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094f8:	4b94      	ldr	r3, [pc, #592]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009506:	4991      	ldr	r1, [pc, #580]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009508:	4313      	orrs	r3, r2
 800950a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800951a:	4b8c      	ldr	r3, [pc, #560]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009528:	4988      	ldr	r1, [pc, #544]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800953c:	4b83      	ldr	r3, [pc, #524]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800953e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954a:	4980      	ldr	r1, [pc, #512]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800955e:	4b7b      	ldr	r3, [pc, #492]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956c:	4977      	ldr	r1, [pc, #476]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009580:	4b72      	ldr	r3, [pc, #456]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009586:	f023 0203 	bic.w	r2, r3, #3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958e:	496f      	ldr	r1, [pc, #444]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095a2:	4b6a      	ldr	r3, [pc, #424]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a8:	f023 020c 	bic.w	r2, r3, #12
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b0:	4966      	ldr	r1, [pc, #408]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00a      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80095c4:	4b61      	ldr	r3, [pc, #388]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d2:	495e      	ldr	r1, [pc, #376]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80095e6:	4b59      	ldr	r3, [pc, #356]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	4955      	ldr	r1, [pc, #340]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009608:	4b50      	ldr	r3, [pc, #320]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009616:	494d      	ldr	r1, [pc, #308]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009618:	4313      	orrs	r3, r2
 800961a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800962a:	4b48      	ldr	r3, [pc, #288]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	4944      	ldr	r1, [pc, #272]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	4313      	orrs	r3, r2
 800963c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800964c:	4b3f      	ldr	r3, [pc, #252]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800964e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800965a:	493c      	ldr	r1, [pc, #240]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800966e:	4b37      	ldr	r3, [pc, #220]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967c:	4933      	ldr	r1, [pc, #204]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800967e:	4313      	orrs	r3, r2
 8009680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009690:	4b2e      	ldr	r3, [pc, #184]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800969e:	492b      	ldr	r1, [pc, #172]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d011      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80096b2:	4b26      	ldr	r3, [pc, #152]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c0:	4922      	ldr	r1, [pc, #136]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096d0:	d101      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80096e2:	2301      	movs	r3, #1
 80096e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009700:	4912      	ldr	r1, [pc, #72]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009702:	4313      	orrs	r3, r2
 8009704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009714:	4b0d      	ldr	r3, [pc, #52]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009724:	4909      	ldr	r1, [pc, #36]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009726:	4313      	orrs	r3, r2
 8009728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d006      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80d9 	beq.w	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a01      	ldr	r2, [pc, #4]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800974a:	e001      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800974c:	40023800 	.word	0x40023800
 8009750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009752:	f7fa feb1 	bl	80044b8 <HAL_GetTick>
 8009756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009758:	e008      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800975a:	f7fa fead 	bl	80044b8 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b64      	cmp	r3, #100	; 0x64
 8009766:	d901      	bls.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e194      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800976c:	4b6c      	ldr	r3, [pc, #432]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f0      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d021      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	2b00      	cmp	r3, #0
 800978a:	d11d      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800978c:	4b64      	ldr	r3, [pc, #400]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800978e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009792:	0c1b      	lsrs	r3, r3, #16
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800979a:	4b61      	ldr	r3, [pc, #388]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800979c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a0:	0e1b      	lsrs	r3, r3, #24
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	019a      	lsls	r2, r3, #6
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	041b      	lsls	r3, r3, #16
 80097b2:	431a      	orrs	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	061b      	lsls	r3, r3, #24
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	071b      	lsls	r3, r3, #28
 80097c0:	4957      	ldr	r1, [pc, #348]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097dc:	d00a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d02e      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f2:	d129      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80097f4:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009802:	4b47      	ldr	r3, [pc, #284]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009808:	0f1b      	lsrs	r3, r3, #28
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	019a      	lsls	r2, r3, #6
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	061b      	lsls	r3, r3, #24
 8009822:	431a      	orrs	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	071b      	lsls	r3, r3, #28
 8009828:	493d      	ldr	r1, [pc, #244]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009830:	4b3b      	ldr	r3, [pc, #236]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009836:	f023 021f 	bic.w	r2, r3, #31
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	3b01      	subs	r3, #1
 8009840:	4937      	ldr	r1, [pc, #220]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01d      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009854:	4b32      	ldr	r3, [pc, #200]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800985a:	0e1b      	lsrs	r3, r3, #24
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009862:	4b2f      	ldr	r3, [pc, #188]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009868:	0f1b      	lsrs	r3, r3, #28
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	019a      	lsls	r2, r3, #6
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	431a      	orrs	r2, r3
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	061b      	lsls	r3, r3, #24
 8009882:	431a      	orrs	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	071b      	lsls	r3, r3, #28
 8009888:	4925      	ldr	r1, [pc, #148]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d011      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	019a      	lsls	r2, r3, #6
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	061b      	lsls	r3, r3, #24
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	071b      	lsls	r3, r3, #28
 80098b8:	4919      	ldr	r1, [pc, #100]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80098c0:	4b17      	ldr	r3, [pc, #92]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a16      	ldr	r2, [pc, #88]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098cc:	f7fa fdf4 	bl	80044b8 <HAL_GetTick>
 80098d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098d2:	e008      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098d4:	f7fa fdf0 	bl	80044b8 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b64      	cmp	r3, #100	; 0x64
 80098e0:	d901      	bls.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e0d7      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098e6:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0f0      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	f040 80cd 	bne.w	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a08      	ldr	r2, [pc, #32]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009906:	f7fa fdd7 	bl	80044b8 <HAL_GetTick>
 800990a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800990c:	e00a      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800990e:	f7fa fdd3 	bl	80044b8 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	2b64      	cmp	r3, #100	; 0x64
 800991a:	d903      	bls.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e0ba      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009924:	4b5e      	ldr	r3, [pc, #376]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009930:	d0ed      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800994e:	2b00      	cmp	r3, #0
 8009950:	d02e      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d12a      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800995a:	4b51      	ldr	r3, [pc, #324]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800995c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009960:	0c1b      	lsrs	r3, r3, #16
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009968:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996e:	0f1b      	lsrs	r3, r3, #28
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	019a      	lsls	r2, r3, #6
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	061b      	lsls	r3, r3, #24
 8009988:	431a      	orrs	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	071b      	lsls	r3, r3, #28
 800998e:	4944      	ldr	r1, [pc, #272]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009990:	4313      	orrs	r3, r2
 8009992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009996:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800999c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a4:	3b01      	subs	r3, #1
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	493d      	ldr	r1, [pc, #244]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d022      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099c4:	d11d      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099c6:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099cc:	0e1b      	lsrs	r3, r3, #24
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80099d4:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099da:	0f1b      	lsrs	r3, r3, #28
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	019a      	lsls	r2, r3, #6
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	041b      	lsls	r3, r3, #16
 80099ee:	431a      	orrs	r2, r3
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	061b      	lsls	r3, r3, #24
 80099f4:	431a      	orrs	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	071b      	lsls	r3, r3, #28
 80099fa:	4929      	ldr	r1, [pc, #164]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0308 	and.w	r3, r3, #8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d028      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a0e:	4b24      	ldr	r3, [pc, #144]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	0e1b      	lsrs	r3, r3, #24
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a1c:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	0c1b      	lsrs	r3, r3, #16
 8009a24:	f003 0303 	and.w	r3, r3, #3
 8009a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	019a      	lsls	r2, r3, #6
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	431a      	orrs	r2, r3
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	061b      	lsls	r3, r3, #24
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	071b      	lsls	r3, r3, #28
 8009a42:	4917      	ldr	r1, [pc, #92]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	4911      	ldr	r1, [pc, #68]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a0e      	ldr	r2, [pc, #56]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a6c:	f7fa fd24 	bl	80044b8 <HAL_GetTick>
 8009a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a72:	e008      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a74:	f7fa fd20 	bl	80044b8 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	2b64      	cmp	r3, #100	; 0x64
 8009a80:	d901      	bls.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e007      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a92:	d1ef      	bne.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	40023800 	.word	0x40023800

08009aa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ac2:	f040 808c 	bne.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009ac6:	4b95      	ldr	r3, [pc, #596]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009acc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009ad4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009adc:	d07c      	beq.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ae4:	d87d      	bhi.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af2:	d039      	beq.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009af4:	e075      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009af6:	4b89      	ldr	r3, [pc, #548]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d108      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b02:	4b86      	ldr	r3, [pc, #536]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b0a:	4a85      	ldr	r2, [pc, #532]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	e007      	b.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b14:	4b81      	ldr	r3, [pc, #516]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b1c:	4a81      	ldr	r2, [pc, #516]	; (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009b24:	4b7d      	ldr	r3, [pc, #500]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2a:	0e1b      	lsrs	r3, r3, #24
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009b32:	4b7a      	ldr	r3, [pc, #488]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b38:	099b      	lsrs	r3, r3, #6
 8009b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	fb03 f202 	mul.w	r2, r3, r2
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009b4c:	4b73      	ldr	r3, [pc, #460]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b52:	0a1b      	lsrs	r3, r3, #8
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b64:	617b      	str	r3, [r7, #20]
        break;
 8009b66:	e03d      	b.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b68:	4b6c      	ldr	r3, [pc, #432]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d108      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b74:	4b69      	ldr	r3, [pc, #420]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b7c:	4a68      	ldr	r2, [pc, #416]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	e007      	b.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b86:	4b65      	ldr	r3, [pc, #404]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8e:	4a65      	ldr	r2, [pc, #404]	; (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b94:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009b96:	4b61      	ldr	r3, [pc, #388]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b9c:	0e1b      	lsrs	r3, r3, #24
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009ba4:	4b5d      	ldr	r3, [pc, #372]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009baa:	099b      	lsrs	r3, r3, #6
 8009bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	fb03 f202 	mul.w	r2, r3, r2
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009bbe:	4b57      	ldr	r3, [pc, #348]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc4:	f003 031f 	and.w	r3, r3, #31
 8009bc8:	3301      	adds	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd4:	617b      	str	r3, [r7, #20]
        break;
 8009bd6:	e005      	b.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bd8:	4b53      	ldr	r3, [pc, #332]	; (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009bda:	617b      	str	r3, [r7, #20]
        break;
 8009bdc:	e002      	b.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009bde:	bf00      	nop
 8009be0:	e000      	b.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009be2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bea:	f040 808c 	bne.w	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009bee:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009bfc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c04:	d07c      	beq.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c0c:	d87d      	bhi.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c1a:	d039      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009c1c:	e075      	b.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c1e:	4b3f      	ldr	r3, [pc, #252]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c2a:	4b3c      	ldr	r3, [pc, #240]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c32:	4a3b      	ldr	r2, [pc, #236]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	e007      	b.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c3c:	4b37      	ldr	r3, [pc, #220]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c44:	4a37      	ldr	r2, [pc, #220]	; (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009c4c:	4b33      	ldr	r3, [pc, #204]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c52:	0e1b      	lsrs	r3, r3, #24
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009c5a:	4b30      	ldr	r3, [pc, #192]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	099b      	lsrs	r3, r3, #6
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	fb03 f202 	mul.w	r2, r3, r2
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c72:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009c74:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	f003 031f 	and.w	r3, r3, #31
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]
        break;
 8009c8e:	e03d      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c90:	4b22      	ldr	r3, [pc, #136]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d108      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c9c:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ca4:	4a1e      	ldr	r2, [pc, #120]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009caa:	613b      	str	r3, [r7, #16]
 8009cac:	e007      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009cae:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb6:	4a1b      	ldr	r2, [pc, #108]	; (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009cbe:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc4:	0e1b      	lsrs	r3, r3, #24
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009ccc:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd2:	099b      	lsrs	r3, r3, #6
 8009cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	fb03 f202 	mul.w	r2, r3, r2
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfc:	617b      	str	r3, [r7, #20]
        break;
 8009cfe:	e005      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009d02:	617b      	str	r3, [r7, #20]
        break;
 8009d04:	e002      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8009d0a:	bf00      	nop

  return frequency;
 8009d0c:	697b      	ldr	r3, [r7, #20]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	00f42400 	.word	0x00f42400
 8009d24:	017d7840 	.word	0x017d7840
 8009d28:	00bb8000 	.word	0x00bb8000

08009d2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e071      	b.n	8009e26 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7f5b      	ldrb	r3, [r3, #29]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7f8 fc16 	bl	8002584 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b10      	cmp	r3, #16
 8009d6a:	d053      	beq.n	8009e14 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	22ca      	movs	r2, #202	; 0xca
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2253      	movs	r2, #83	; 0x53
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fac9 	bl	800a314 <RTC_EnterInitMode>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d12a      	bne.n	8009de2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6899      	ldr	r1, [r3, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	4b26      	ldr	r3, [pc, #152]	; (8009e30 <HAL_RTC_Init+0x104>)
 8009d98:	400b      	ands	r3, r1
 8009d9a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6899      	ldr	r1, [r3, #8]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	431a      	orrs	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68d2      	ldr	r2, [r2, #12]
 8009dc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6919      	ldr	r1, [r3, #16]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	041a      	lsls	r2, r3, #16
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fad2 	bl	800a382 <RTC_ExitInitMode>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d110      	bne.n	8009e0a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0208 	bic.w	r2, r2, #8
 8009df6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	22ff      	movs	r2, #255	; 0xff
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24
 8009e12:	e001      	b.n	8009e18 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	ff8fffbf 	.word	0xff8fffbf

08009e34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e34:	b590      	push	{r4, r7, lr}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	7f1b      	ldrb	r3, [r3, #28]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d101      	bne.n	8009e50 <HAL_RTC_SetTime+0x1c>
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e085      	b.n	8009f5c <HAL_RTC_SetTime+0x128>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d126      	bne.n	8009eb0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 faa6 	bl	800a3cc <RTC_ByteToBcd2>
 8009e80:	4603      	mov	r3, r0
 8009e82:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fa9f 	bl	800a3cc <RTC_ByteToBcd2>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e92:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	789b      	ldrb	r3, [r3, #2]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fa97 	bl	800a3cc <RTC_ByteToBcd2>
 8009e9e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ea0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	78db      	ldrb	r3, [r3, #3]
 8009ea8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	e018      	b.n	8009ee2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ed0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009ed6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	78db      	ldrb	r3, [r3, #3]
 8009edc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	22ca      	movs	r2, #202	; 0xca
 8009ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2253      	movs	r2, #83	; 0x53
 8009ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 fa0e 	bl	800a314 <RTC_EnterInitMode>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009efc:	7cfb      	ldrb	r3, [r7, #19]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d11e      	bne.n	8009f40 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	6979      	ldr	r1, [r7, #20]
 8009f08:	4b16      	ldr	r3, [pc, #88]	; (8009f64 <HAL_RTC_SetTime+0x130>)
 8009f0a:	400b      	ands	r3, r1
 8009f0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6899      	ldr	r1, [r3, #8]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fa23 	bl	800a382 <RTC_ExitInitMode>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009f40:	7cfb      	ldrb	r3, [r7, #19]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	22ff      	movs	r2, #255	; 0xff
 8009f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	771a      	strb	r2, [r3, #28]

  return status;
 8009f5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd90      	pop	{r4, r7, pc}
 8009f64:	007f7f7f 	.word	0x007f7f7f

08009f68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	7f1b      	ldrb	r3, [r3, #28]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_RTC_SetDate+0x1c>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e06f      	b.n	800a064 <HAL_RTC_SetDate+0xfc>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10e      	bne.n	8009fb4 <HAL_RTC_SetDate+0x4c>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d008      	beq.n	8009fb4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	785b      	ldrb	r3, [r3, #1]
 8009fa6:	f023 0310 	bic.w	r3, r3, #16
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	330a      	adds	r3, #10
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d11c      	bne.n	8009ff4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	78db      	ldrb	r3, [r3, #3]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa04 	bl	800a3cc <RTC_ByteToBcd2>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 f9fd 	bl	800a3cc <RTC_ByteToBcd2>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	789b      	ldrb	r3, [r3, #2]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f9f5 	bl	800a3cc <RTC_ByteToBcd2>
 8009fe2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009fe4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	617b      	str	r3, [r7, #20]
 8009ff2:	e00e      	b.n	800a012 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	78db      	ldrb	r3, [r3, #3]
 8009ff8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a000:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a006:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	22ca      	movs	r2, #202	; 0xca
 800a018:	625a      	str	r2, [r3, #36]	; 0x24
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2253      	movs	r2, #83	; 0x53
 800a020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f976 	bl	800a314 <RTC_EnterInitMode>
 800a028:	4603      	mov	r3, r0
 800a02a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a02c:	7cfb      	ldrb	r3, [r7, #19]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	6979      	ldr	r1, [r7, #20]
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <HAL_RTC_SetDate+0x104>)
 800a03a:	400b      	ands	r3, r1
 800a03c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f99f 	bl	800a382 <RTC_ExitInitMode>
 800a044:	4603      	mov	r3, r0
 800a046:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a048:	7cfb      	ldrb	r3, [r7, #19]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d102      	bne.n	800a054 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	22ff      	movs	r2, #255	; 0xff
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	771a      	strb	r2, [r3, #28]

  return status;
 800a062:	7cfb      	ldrb	r3, [r7, #19]
}
 800a064:	4618      	mov	r0, r3
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}
 800a06c:	00ffff3f 	.word	0x00ffff3f

0800a070 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b089      	sub	sp, #36	; 0x24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	7f1b      	ldrb	r3, [r3, #28]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_RTC_SetAlarm+0x24>
 800a090:	2302      	movs	r3, #2
 800a092:	e113      	b.n	800a2bc <HAL_RTC_SetAlarm+0x24c>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2202      	movs	r2, #2
 800a09e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d137      	bne.n	800a116 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f984 	bl	800a3cc <RTC_ByteToBcd2>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f97d 	bl	800a3cc <RTC_ByteToBcd2>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a0d6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	789b      	ldrb	r3, [r3, #2]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f975 	bl	800a3cc <RTC_ByteToBcd2>
 800a0e2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a0e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a0ee:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f967 	bl	800a3cc <RTC_ByteToBcd2>
 800a0fe:	4603      	mov	r3, r0
 800a100:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a102:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a10a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a110:	4313      	orrs	r3, r2
 800a112:	61fb      	str	r3, [r7, #28]
 800a114:	e023      	b.n	800a15e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2200      	movs	r2, #0
 800a128:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	785b      	ldrb	r3, [r3, #1]
 800a134:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a136:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a13c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	78db      	ldrb	r3, [r3, #3]
 800a142:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a144:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a14c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a14e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a154:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a15a:	4313      	orrs	r3, r2
 800a15c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	22ca      	movs	r2, #202	; 0xca
 800a170:	625a      	str	r2, [r3, #36]	; 0x24
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2253      	movs	r2, #83	; 0x53
 800a178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d148      	bne.n	800a216 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a192:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1a2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a1b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1b6:	f7fa f97f 	bl	80044b8 <HAL_GetTick>
 800a1ba:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1bc:	e013      	b.n	800a1e6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1be:	f7fa f97b 	bl	80044b8 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1cc:	d90b      	bls.n	800a1e6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	22ff      	movs	r2, #255	; 0xff
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e06a      	b.n	800a2bc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0e4      	beq.n	800a1be <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a212:	609a      	str	r2, [r3, #8]
 800a214:	e047      	b.n	800a2a6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a224:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a234:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a246:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a248:	f7fa f936 	bl	80044b8 <HAL_GetTick>
 800a24c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a24e:	e013      	b.n	800a278 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a250:	f7fa f932 	bl	80044b8 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a25e:	d90b      	bls.n	800a278 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2203      	movs	r2, #3
 800a26c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e021      	b.n	800a2bc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0e4      	beq.n	800a250 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	22ff      	movs	r2, #255	; 0xff
 800a2ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3724      	adds	r7, #36	; 0x24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd90      	pop	{r4, r7, pc}

0800a2c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a2de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2e0:	f7fa f8ea 	bl	80044b8 <HAL_GetTick>
 800a2e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a2e6:	e009      	b.n	800a2fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2e8:	f7fa f8e6 	bl	80044b8 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2f6:	d901      	bls.n	800a2fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e007      	b.n	800a30c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0ee      	beq.n	800a2e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d122      	bne.n	800a378 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a340:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a342:	f7fa f8b9 	bl	80044b8 <HAL_GetTick>
 800a346:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a348:	e00c      	b.n	800a364 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a34a:	f7fa f8b5 	bl	80044b8 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a358:	d904      	bls.n	800a364 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2204      	movs	r2, #4
 800a35e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <RTC_EnterInitMode+0x64>
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d1e8      	bne.n	800a34a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a39c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ff89 	bl	800a2c4 <HAL_RTC_WaitForSynchro>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d004      	beq.n	800a3c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a3da:	e005      	b.n	800a3e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	3b0a      	subs	r3, #10
 800a3e6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d8f6      	bhi.n	800a3dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	b2db      	uxtb	r3, r3
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	7f1b      	ldrb	r3, [r3, #28]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a420:	2302      	movs	r3, #2
 800a422:	e050      	b.n	800a4c6 <HAL_RTCEx_SetTimeStamp+0xbe>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2202      	movs	r2, #2
 800a42e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0206 	bic.w	r2, r2, #6
 800a43e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a458:	4013      	ands	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	22ca      	movs	r2, #202	; 0xca
 800a46a:	625a      	str	r2, [r3, #36]	; 0x24
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2253      	movs	r2, #83	; 0x53
 800a472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800a48c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	b2da      	uxtb	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800a49e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	22ff      	movs	r2, #255	; 0xff
 800a4b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	fffff7f7 	.word	0xfffff7f7

0800a4d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e156      	b.n	800a7a4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7f8 fbec 	bl	8002ce8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f95b 	bl	800a7d4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d00c      	beq.n	800a540 <HAL_SAI_Init+0x68>
 800a526:	2b02      	cmp	r3, #2
 800a528:	d80d      	bhi.n	800a546 <HAL_SAI_Init+0x6e>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_SAI_Init+0x5c>
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d003      	beq.n	800a53a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a532:	e008      	b.n	800a546 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	61fb      	str	r3, [r7, #28]
      break;
 800a538:	e006      	b.n	800a548 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a53a:	2310      	movs	r3, #16
 800a53c:	61fb      	str	r3, [r7, #28]
      break;
 800a53e:	e003      	b.n	800a548 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a540:	2320      	movs	r3, #32
 800a542:	61fb      	str	r3, [r7, #28]
      break;
 800a544:	e000      	b.n	800a548 <HAL_SAI_Init+0x70>
      break;
 800a546:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d81e      	bhi.n	800a58e <HAL_SAI_Init+0xb6>
 800a550:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <HAL_SAI_Init+0x80>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a569 	.word	0x0800a569
 800a55c:	0800a56f 	.word	0x0800a56f
 800a560:	0800a577 	.word	0x0800a577
 800a564:	0800a57f 	.word	0x0800a57f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a56c:	e010      	b.n	800a590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a572:	617b      	str	r3, [r7, #20]
    }
    break;
 800a574:	e00c      	b.n	800a590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a57a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a57c:	e008      	b.n	800a590 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a57e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a582:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a58c:	e000      	b.n	800a590 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a58e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a85      	ldr	r2, [pc, #532]	; (800a7ac <HAL_SAI_Init+0x2d4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d004      	beq.n	800a5a4 <HAL_SAI_Init+0xcc>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a84      	ldr	r2, [pc, #528]	; (800a7b0 <HAL_SAI_Init+0x2d8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d103      	bne.n	800a5ac <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a5a4:	4a83      	ldr	r2, [pc, #524]	; (800a7b4 <HAL_SAI_Init+0x2dc>)
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	e002      	b.n	800a5b2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a5ac:	4a82      	ldr	r2, [pc, #520]	; (800a7b8 <HAL_SAI_Init+0x2e0>)
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d04c      	beq.n	800a654 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a7a      	ldr	r2, [pc, #488]	; (800a7ac <HAL_SAI_Init+0x2d4>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d004      	beq.n	800a5d2 <HAL_SAI_Init+0xfa>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a78      	ldr	r2, [pc, #480]	; (800a7b0 <HAL_SAI_Init+0x2d8>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d104      	bne.n	800a5dc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a5d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a5d6:	f7ff fa65 	bl	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5da:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a76      	ldr	r2, [pc, #472]	; (800a7bc <HAL_SAI_Init+0x2e4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <HAL_SAI_Init+0x118>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a75      	ldr	r2, [pc, #468]	; (800a7c0 <HAL_SAI_Init+0x2e8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d104      	bne.n	800a5fa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a5f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a5f4:	f7ff fa56 	bl	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5f8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	461a      	mov	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	025b      	lsls	r3, r3, #9
 800a60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a610:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a6b      	ldr	r2, [pc, #428]	; (800a7c4 <HAL_SAI_Init+0x2ec>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	08da      	lsrs	r2, r3, #3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a620:	68f9      	ldr	r1, [r7, #12]
 800a622:	4b68      	ldr	r3, [pc, #416]	; (800a7c4 <HAL_SAI_Init+0x2ec>)
 800a624:	fba3 2301 	umull	r2, r3, r3, r1
 800a628:	08da      	lsrs	r2, r3, #3
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	1aca      	subs	r2, r1, r3
 800a634:	2a08      	cmp	r2, #8
 800a636:	d904      	bls.n	800a642 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a646:	2b04      	cmp	r3, #4
 800a648:	d104      	bne.n	800a654 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	085a      	lsrs	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_SAI_Init+0x18c>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d109      	bne.n	800a678 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_SAI_Init+0x198>
 800a66c:	2300      	movs	r3, #0
 800a66e:	e001      	b.n	800a674 <HAL_SAI_Init+0x19c>
 800a670:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	e008      	b.n	800a68a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d102      	bne.n	800a686 <HAL_SAI_Init+0x1ae>
 800a680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a684:	e000      	b.n	800a688 <HAL_SAI_Init+0x1b0>
 800a686:	2300      	movs	r3, #0
 800a688:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b4c      	ldr	r3, [pc, #304]	; (800a7c8 <HAL_SAI_Init+0x2f0>)
 800a696:	400b      	ands	r3, r1
 800a698:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a6c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	051b      	lsls	r3, r3, #20
 800a6d6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6859      	ldr	r1, [r3, #4]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4b38      	ldr	r3, [pc, #224]	; (800a7cc <HAL_SAI_Init+0x2f4>)
 800a6ec:	400b      	ands	r3, r1
 800a6ee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6859      	ldr	r1, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6899      	ldr	r1, [r3, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	4b2d      	ldr	r3, [pc, #180]	; (800a7d0 <HAL_SAI_Init+0x2f8>)
 800a71a:	400b      	ands	r3, r1
 800a71c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6899      	ldr	r1, [r3, #8]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a72e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a734:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a73a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a740:	3b01      	subs	r3, #1
 800a742:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a744:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68d9      	ldr	r1, [r3, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a75c:	400b      	ands	r3, r1
 800a75e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68d9      	ldr	r1, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a774:	041b      	lsls	r3, r3, #16
 800a776:	431a      	orrs	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77c:	3b01      	subs	r3, #1
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	40015804 	.word	0x40015804
 800a7b0:	40015824 	.word	0x40015824
 800a7b4:	40015800 	.word	0x40015800
 800a7b8:	40015c00 	.word	0x40015c00
 800a7bc:	40015c04 	.word	0x40015c04
 800a7c0:	40015c24 	.word	0x40015c24
 800a7c4:	cccccccd 	.word	0xcccccccd
 800a7c8:	ff05c010 	.word	0xff05c010
 800a7cc:	ffff1ff0 	.word	0xffff1ff0
 800a7d0:	fff88000 	.word	0xfff88000

0800a7d4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a7dc:	4b17      	ldr	r3, [pc, #92]	; (800a83c <SAI_Disable+0x68>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a17      	ldr	r2, [pc, #92]	; (800a840 <SAI_Disable+0x6c>)
 800a7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e6:	0b1b      	lsrs	r3, r3, #12
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	1e5a      	subs	r2, r3, #1
 800a804:	60fa      	str	r2, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	72fb      	strb	r3, [r7, #11]
      break;
 800a81e:	e006      	b.n	800a82e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e8      	bne.n	800a800 <SAI_Disable+0x2c>

  return status;
 800a82e:	7afb      	ldrb	r3, [r7, #11]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	20000000 	.word	0x20000000
 800a840:	95cbec1b 	.word	0x95cbec1b

0800a844 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e025      	b.n	800a8a4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7f8 fa31 	bl	8002cd4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2202      	movs	r2, #2
 800a876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3304      	adds	r3, #4
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f002 f917 	bl	800cab8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	461a      	mov	r2, r3
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	f002 f96b 	bl	800cb70 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8be:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d101      	bne.n	800a8ca <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e021      	b.n	800a90e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d002      	beq.n	800a8d6 <HAL_SDRAM_SendCommand+0x2a>
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	2b05      	cmp	r3, #5
 800a8d4:	d118      	bne.n	800a908 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	68b9      	ldr	r1, [r7, #8]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f002 f9ac 	bl	800cc44 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d104      	bne.n	800a8fe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2205      	movs	r2, #5
 800a8f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8fc:	e006      	b.n	800a90c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a906:	e001      	b.n	800a90c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d101      	bne.n	800a930 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a92c:	2302      	movs	r3, #2
 800a92e:	e016      	b.n	800a95e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d10f      	bne.n	800a95c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f002 f99e 	bl	800cc8c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	e000      	b.n	800a95e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e04c      	b.n	800aa14 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7f7 fe26 	bl	80025e0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0203 	bic.w	r2, r2, #3
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	4b19      	ldr	r3, [pc, #100]	; (800aa1c <HAL_SPDIFRX_Init+0xb4>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a9c4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a9ca:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a9d0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a9d6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a9dc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a9e2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a9e8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a9ee:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a9f4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	fff88407 	.word	0xfff88407

0800aa20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e09d      	b.n	800ab6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d108      	bne.n	800aa4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa42:	d009      	beq.n	800aa58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	61da      	str	r2, [r3, #28]
 800aa4a:	e005      	b.n	800aa58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7f7 fe18 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa98:	d902      	bls.n	800aaa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	e002      	b.n	800aaa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aaae:	d007      	beq.n	800aac0 <HAL_SPI_Init+0xa0>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aab8:	d002      	beq.n	800aac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	431a      	orrs	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	ea42 0103 	orr.w	r1, r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	0c1b      	lsrs	r3, r3, #16
 800ab1c:	f003 0204 	and.w	r2, r3, #4
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2e:	f003 0308 	and.w	r3, r3, #8
 800ab32:	431a      	orrs	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab3c:	ea42 0103 	orr.w	r1, r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b08a      	sub	sp, #40	; 0x28
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab84:	2301      	movs	r3, #1
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d101      	bne.n	800ab9c <HAL_SPI_TransmitReceive+0x26>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e1fb      	b.n	800af94 <HAL_SPI_TransmitReceive+0x41e>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aba4:	f7f9 fc88 	bl	80044b8 <HAL_GetTick>
 800aba8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800abb8:	887b      	ldrh	r3, [r7, #2]
 800abba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800abbc:	887b      	ldrh	r3, [r7, #2]
 800abbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800abc0:	7efb      	ldrb	r3, [r7, #27]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d00e      	beq.n	800abe4 <HAL_SPI_TransmitReceive+0x6e>
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abcc:	d106      	bne.n	800abdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <HAL_SPI_TransmitReceive+0x66>
 800abd6:	7efb      	ldrb	r3, [r7, #27]
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d003      	beq.n	800abe4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800abdc:	2302      	movs	r3, #2
 800abde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800abe2:	e1cd      	b.n	800af80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <HAL_SPI_TransmitReceive+0x80>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <HAL_SPI_TransmitReceive+0x80>
 800abf0:	887b      	ldrh	r3, [r7, #2]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d103      	bne.n	800abfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800abfc:	e1c0      	b.n	800af80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d003      	beq.n	800ac12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2205      	movs	r2, #5
 800ac0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	887a      	ldrh	r2, [r7, #2]
 800ac22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	887a      	ldrh	r2, [r7, #2]
 800ac2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	887a      	ldrh	r2, [r7, #2]
 800ac38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	887a      	ldrh	r2, [r7, #2]
 800ac3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac54:	d802      	bhi.n	800ac5c <HAL_SPI_TransmitReceive+0xe6>
 800ac56:	8a3b      	ldrh	r3, [r7, #16]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d908      	bls.n	800ac6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac6a:	605a      	str	r2, [r3, #4]
 800ac6c:	e007      	b.n	800ac7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b40      	cmp	r3, #64	; 0x40
 800ac8a:	d007      	beq.n	800ac9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aca4:	d97c      	bls.n	800ada0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <HAL_SPI_TransmitReceive+0x13e>
 800acae:	8a7b      	ldrh	r3, [r7, #18]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d169      	bne.n	800ad88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb8:	881a      	ldrh	r2, [r3, #0]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	1c9a      	adds	r2, r3, #2
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acce:	b29b      	uxth	r3, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acd8:	e056      	b.n	800ad88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d11b      	bne.n	800ad20 <HAL_SPI_TransmitReceive+0x1aa>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acec:	b29b      	uxth	r3, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d016      	beq.n	800ad20 <HAL_SPI_TransmitReceive+0x1aa>
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d113      	bne.n	800ad20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfc:	881a      	ldrh	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	1c9a      	adds	r2, r3, #2
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	3b01      	subs	r3, #1
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d11c      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x1f2>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d016      	beq.n	800ad68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	b292      	uxth	r2, r2
 800ad46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	1c9a      	adds	r2, r3, #2
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad64:	2301      	movs	r3, #1
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad68:	f7f9 fba6 	bl	80044b8 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d807      	bhi.n	800ad88 <HAL_SPI_TransmitReceive+0x212>
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7e:	d003      	beq.n	800ad88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ad86:	e0fb      	b.n	800af80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1a3      	bne.n	800acda <HAL_SPI_TransmitReceive+0x164>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d19d      	bne.n	800acda <HAL_SPI_TransmitReceive+0x164>
 800ad9e:	e0df      	b.n	800af60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_SPI_TransmitReceive+0x23a>
 800ada8:	8a7b      	ldrh	r3, [r7, #18]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	f040 80cb 	bne.w	800af46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d912      	bls.n	800ade0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbe:	881a      	ldrh	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adca:	1c9a      	adds	r2, r3, #2
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800add4:	b29b      	uxth	r3, r3
 800add6:	3b02      	subs	r3, #2
 800add8:	b29a      	uxth	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adde:	e0b2      	b.n	800af46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae06:	e09e      	b.n	800af46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d134      	bne.n	800ae80 <HAL_SPI_TransmitReceive+0x30a>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d02f      	beq.n	800ae80 <HAL_SPI_TransmitReceive+0x30a>
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d12c      	bne.n	800ae80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d912      	bls.n	800ae56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae34:	881a      	ldrh	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	3b02      	subs	r3, #2
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae54:	e012      	b.n	800ae7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	330c      	adds	r3, #12
 800ae60:	7812      	ldrb	r2, [r2, #0]
 800ae62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	3b01      	subs	r3, #1
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d148      	bne.n	800af20 <HAL_SPI_TransmitReceive+0x3aa>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d042      	beq.n	800af20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d923      	bls.n	800aeee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	b292      	uxth	r2, r2
 800aeb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	1c9a      	adds	r2, r3, #2
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b02      	subs	r3, #2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d81f      	bhi.n	800af1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aeea:	605a      	str	r2, [r3, #4]
 800aeec:	e016      	b.n	800af1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f103 020c 	add.w	r2, r3, #12
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	7812      	ldrb	r2, [r2, #0]
 800aefc:	b2d2      	uxtb	r2, r2
 800aefe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af10:	b29b      	uxth	r3, r3
 800af12:	3b01      	subs	r3, #1
 800af14:	b29a      	uxth	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af1c:	2301      	movs	r3, #1
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800af20:	f7f9 faca 	bl	80044b8 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d803      	bhi.n	800af38 <HAL_SPI_TransmitReceive+0x3c2>
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af36:	d102      	bne.n	800af3e <HAL_SPI_TransmitReceive+0x3c8>
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d103      	bne.n	800af46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800af44:	e01c      	b.n	800af80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f47f af5b 	bne.w	800ae08 <HAL_SPI_TransmitReceive+0x292>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af58:	b29b      	uxth	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f47f af54 	bne.w	800ae08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af60:	69fa      	ldr	r2, [r7, #28]
 800af62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f937 	bl	800b1d8 <SPI_EndRxTxTransaction>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d006      	beq.n	800af7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2220      	movs	r2, #32
 800af7a:	661a      	str	r2, [r3, #96]	; 0x60
 800af7c:	e000      	b.n	800af80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800af7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800af90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800afac:	f7f9 fa84 	bl	80044b8 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4413      	add	r3, r2
 800afba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afbc:	f7f9 fa7c 	bl	80044b8 <HAL_GetTick>
 800afc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afc2:	4b39      	ldr	r3, [pc, #228]	; (800b0a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	015b      	lsls	r3, r3, #5
 800afc8:	0d1b      	lsrs	r3, r3, #20
 800afca:	69fa      	ldr	r2, [r7, #28]
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afd2:	e054      	b.n	800b07e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d050      	beq.n	800b07e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afdc:	f7f9 fa6c 	bl	80044b8 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d902      	bls.n	800aff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d13d      	bne.n	800b06e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b00a:	d111      	bne.n	800b030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b014:	d004      	beq.n	800b020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b01e:	d107      	bne.n	800b030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b02e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b038:	d10f      	bne.n	800b05a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e017      	b.n	800b09e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4013      	ands	r3, r2
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	bf0c      	ite	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	2300      	movne	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	461a      	mov	r2, r3
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d19b      	bne.n	800afd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20000000 	.word	0x20000000

0800b0ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08a      	sub	sp, #40	; 0x28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b0be:	f7f9 f9fb 	bl	80044b8 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	1a9b      	subs	r3, r3, r2
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b0ce:	f7f9 f9f3 	bl	80044b8 <HAL_GetTick>
 800b0d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	330c      	adds	r3, #12
 800b0da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b0dc:	4b3d      	ldr	r3, [pc, #244]	; (800b1d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	00da      	lsls	r2, r3, #3
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	0d1b      	lsrs	r3, r3, #20
 800b0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ee:	fb02 f303 	mul.w	r3, r2, r3
 800b0f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b0f4:	e060      	b.n	800b1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b0fc:	d107      	bne.n	800b10e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d104      	bne.n	800b10e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b114:	d050      	beq.n	800b1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b116:	f7f9 f9cf 	bl	80044b8 <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b122:	429a      	cmp	r2, r3
 800b124:	d902      	bls.n	800b12c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d13d      	bne.n	800b1a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b13a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b144:	d111      	bne.n	800b16a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b14e:	d004      	beq.n	800b15a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b158:	d107      	bne.n	800b16a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b172:	d10f      	bne.n	800b194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e010      	b.n	800b1ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689a      	ldr	r2, [r3, #8]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d196      	bne.n	800b0f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3728      	adds	r7, #40	; 0x28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000000 	.word	0x20000000

0800b1d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff ff5b 	bl	800b0ac <SPI_WaitFifoStateUntilTimeout>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d007      	beq.n	800b20c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b200:	f043 0220 	orr.w	r2, r3, #32
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e046      	b.n	800b29a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b20c:	4b25      	ldr	r3, [pc, #148]	; (800b2a4 <SPI_EndRxTxTransaction+0xcc>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a25      	ldr	r2, [pc, #148]	; (800b2a8 <SPI_EndRxTxTransaction+0xd0>)
 800b212:	fba2 2303 	umull	r2, r3, r2, r3
 800b216:	0d5b      	lsrs	r3, r3, #21
 800b218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b22a:	d112      	bne.n	800b252 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff feb0 	bl	800af9c <SPI_WaitFlagStateUntilTimeout>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d016      	beq.n	800b270 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b246:	f043 0220 	orr.w	r2, r3, #32
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b24e:	2303      	movs	r3, #3
 800b250:	e023      	b.n	800b29a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b268:	2b80      	cmp	r3, #128	; 0x80
 800b26a:	d0f2      	beq.n	800b252 <SPI_EndRxTxTransaction+0x7a>
 800b26c:	e000      	b.n	800b270 <SPI_EndRxTxTransaction+0x98>
        break;
 800b26e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2200      	movs	r2, #0
 800b278:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff ff15 	bl	800b0ac <SPI_WaitFifoStateUntilTimeout>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d007      	beq.n	800b298 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b28c:	f043 0220 	orr.w	r2, r3, #32
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e000      	b.n	800b29a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000000 	.word	0x20000000
 800b2a8:	165e9f81 	.word	0x165e9f81

0800b2ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e049      	b.n	800b352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7f7 fa4a 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f000 fa6a 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e049      	b.n	800b400 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7f7 fa61 	bl	8002848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2202      	movs	r2, #2
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3304      	adds	r3, #4
 800b396:	4619      	mov	r1, r3
 800b398:	4610      	mov	r0, r2
 800b39a:	f000 fa13 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d101      	bne.n	800b426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b422:	2302      	movs	r3, #2
 800b424:	e0ff      	b.n	800b626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b14      	cmp	r3, #20
 800b432:	f200 80f0 	bhi.w	800b616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b491 	.word	0x0800b491
 800b440:	0800b617 	.word	0x0800b617
 800b444:	0800b617 	.word	0x0800b617
 800b448:	0800b617 	.word	0x0800b617
 800b44c:	0800b4d1 	.word	0x0800b4d1
 800b450:	0800b617 	.word	0x0800b617
 800b454:	0800b617 	.word	0x0800b617
 800b458:	0800b617 	.word	0x0800b617
 800b45c:	0800b513 	.word	0x0800b513
 800b460:	0800b617 	.word	0x0800b617
 800b464:	0800b617 	.word	0x0800b617
 800b468:	0800b617 	.word	0x0800b617
 800b46c:	0800b553 	.word	0x0800b553
 800b470:	0800b617 	.word	0x0800b617
 800b474:	0800b617 	.word	0x0800b617
 800b478:	0800b617 	.word	0x0800b617
 800b47c:	0800b595 	.word	0x0800b595
 800b480:	0800b617 	.word	0x0800b617
 800b484:	0800b617 	.word	0x0800b617
 800b488:	0800b617 	.word	0x0800b617
 800b48c:	0800b5d5 	.word	0x0800b5d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fa34 	bl	800b904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0208 	orr.w	r2, r2, #8
 800b4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0204 	bic.w	r2, r2, #4
 800b4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6999      	ldr	r1, [r3, #24]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	619a      	str	r2, [r3, #24]
      break;
 800b4ce:	e0a5      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68b9      	ldr	r1, [r7, #8]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fa86 	bl	800b9e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	699a      	ldr	r2, [r3, #24]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	699a      	ldr	r2, [r3, #24]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6999      	ldr	r1, [r3, #24]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	021a      	lsls	r2, r3, #8
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	430a      	orrs	r2, r1
 800b50e:	619a      	str	r2, [r3, #24]
      break;
 800b510:	e084      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68b9      	ldr	r1, [r7, #8]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fadd 	bl	800bad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69da      	ldr	r2, [r3, #28]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f042 0208 	orr.w	r2, r2, #8
 800b52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69da      	ldr	r2, [r3, #28]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f022 0204 	bic.w	r2, r2, #4
 800b53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	69d9      	ldr	r1, [r3, #28]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	430a      	orrs	r2, r1
 800b54e:	61da      	str	r2, [r3, #28]
      break;
 800b550:	e064      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68b9      	ldr	r1, [r7, #8]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fb33 	bl	800bbc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	69da      	ldr	r2, [r3, #28]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	69da      	ldr	r2, [r3, #28]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69d9      	ldr	r1, [r3, #28]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	021a      	lsls	r2, r3, #8
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	430a      	orrs	r2, r1
 800b590:	61da      	str	r2, [r3, #28]
      break;
 800b592:	e043      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 fb6a 	bl	800bc74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f042 0208 	orr.w	r2, r2, #8
 800b5ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 0204 	bic.w	r2, r2, #4
 800b5be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	691a      	ldr	r2, [r3, #16]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5d2:	e023      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68b9      	ldr	r1, [r7, #8]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fb9c 	bl	800bd18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	021a      	lsls	r2, r3, #8
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	430a      	orrs	r2, r1
 800b612:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b614:	e002      	b.n	800b61c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	75fb      	strb	r3, [r7, #23]
      break;
 800b61a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b624:	7dfb      	ldrb	r3, [r7, #23]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop

0800b630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b644:	2b01      	cmp	r3, #1
 800b646:	d101      	bne.n	800b64c <HAL_TIM_ConfigClockSource+0x1c>
 800b648:	2302      	movs	r3, #2
 800b64a:	e0b4      	b.n	800b7b6 <HAL_TIM_ConfigClockSource+0x186>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	4b56      	ldr	r3, [pc, #344]	; (800b7c0 <HAL_TIM_ConfigClockSource+0x190>)
 800b668:	4013      	ands	r3, r2
 800b66a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b684:	d03e      	beq.n	800b704 <HAL_TIM_ConfigClockSource+0xd4>
 800b686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b68a:	f200 8087 	bhi.w	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b692:	f000 8086 	beq.w	800b7a2 <HAL_TIM_ConfigClockSource+0x172>
 800b696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69a:	d87f      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b69c:	2b70      	cmp	r3, #112	; 0x70
 800b69e:	d01a      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0xa6>
 800b6a0:	2b70      	cmp	r3, #112	; 0x70
 800b6a2:	d87b      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6a4:	2b60      	cmp	r3, #96	; 0x60
 800b6a6:	d050      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x11a>
 800b6a8:	2b60      	cmp	r3, #96	; 0x60
 800b6aa:	d877      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6ac:	2b50      	cmp	r3, #80	; 0x50
 800b6ae:	d03c      	beq.n	800b72a <HAL_TIM_ConfigClockSource+0xfa>
 800b6b0:	2b50      	cmp	r3, #80	; 0x50
 800b6b2:	d873      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6b4:	2b40      	cmp	r3, #64	; 0x40
 800b6b6:	d058      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0x13a>
 800b6b8:	2b40      	cmp	r3, #64	; 0x40
 800b6ba:	d86f      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6bc:	2b30      	cmp	r3, #48	; 0x30
 800b6be:	d064      	beq.n	800b78a <HAL_TIM_ConfigClockSource+0x15a>
 800b6c0:	2b30      	cmp	r3, #48	; 0x30
 800b6c2:	d86b      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d060      	beq.n	800b78a <HAL_TIM_ConfigClockSource+0x15a>
 800b6c8:	2b20      	cmp	r3, #32
 800b6ca:	d867      	bhi.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d05c      	beq.n	800b78a <HAL_TIM_ConfigClockSource+0x15a>
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d05a      	beq.n	800b78a <HAL_TIM_ConfigClockSource+0x15a>
 800b6d4:	e062      	b.n	800b79c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	6899      	ldr	r1, [r3, #8]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	f000 fbe5 	bl	800beb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b6f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	609a      	str	r2, [r3, #8]
      break;
 800b702:	e04f      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	6899      	ldr	r1, [r3, #8]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685a      	ldr	r2, [r3, #4]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f000 fbce 	bl	800beb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b726:	609a      	str	r2, [r3, #8]
      break;
 800b728:	e03c      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	6859      	ldr	r1, [r3, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	461a      	mov	r2, r3
 800b738:	f000 fb42 	bl	800bdc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2150      	movs	r1, #80	; 0x50
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fb9b 	bl	800be7e <TIM_ITRx_SetConfig>
      break;
 800b748:	e02c      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6818      	ldr	r0, [r3, #0]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	6859      	ldr	r1, [r3, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	461a      	mov	r2, r3
 800b758:	f000 fb61 	bl	800be1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2160      	movs	r1, #96	; 0x60
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fb8b 	bl	800be7e <TIM_ITRx_SetConfig>
      break;
 800b768:	e01c      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6859      	ldr	r1, [r3, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	461a      	mov	r2, r3
 800b778:	f000 fb22 	bl	800bdc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2140      	movs	r1, #64	; 0x40
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fb7b 	bl	800be7e <TIM_ITRx_SetConfig>
      break;
 800b788:	e00c      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4619      	mov	r1, r3
 800b794:	4610      	mov	r0, r2
 800b796:	f000 fb72 	bl	800be7e <TIM_ITRx_SetConfig>
      break;
 800b79a:	e003      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a0:	e000      	b.n	800b7a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	fffeff88 	.word	0xfffeff88

0800b7c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a40      	ldr	r2, [pc, #256]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d013      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e2:	d00f      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a3d      	ldr	r2, [pc, #244]	; (800b8dc <TIM_Base_SetConfig+0x118>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d00b      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a3c      	ldr	r2, [pc, #240]	; (800b8e0 <TIM_Base_SetConfig+0x11c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d007      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a3b      	ldr	r2, [pc, #236]	; (800b8e4 <TIM_Base_SetConfig+0x120>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d003      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a3a      	ldr	r2, [pc, #232]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d108      	bne.n	800b816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a2f      	ldr	r2, [pc, #188]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d02b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b824:	d027      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a2c      	ldr	r2, [pc, #176]	; (800b8dc <TIM_Base_SetConfig+0x118>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d023      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a2b      	ldr	r2, [pc, #172]	; (800b8e0 <TIM_Base_SetConfig+0x11c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d01f      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <TIM_Base_SetConfig+0x120>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d01b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a29      	ldr	r2, [pc, #164]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d017      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a28      	ldr	r2, [pc, #160]	; (800b8ec <TIM_Base_SetConfig+0x128>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d013      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a27      	ldr	r2, [pc, #156]	; (800b8f0 <TIM_Base_SetConfig+0x12c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d00f      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a26      	ldr	r2, [pc, #152]	; (800b8f4 <TIM_Base_SetConfig+0x130>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d00b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a25      	ldr	r2, [pc, #148]	; (800b8f8 <TIM_Base_SetConfig+0x134>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d007      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a24      	ldr	r2, [pc, #144]	; (800b8fc <TIM_Base_SetConfig+0x138>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d003      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a23      	ldr	r2, [pc, #140]	; (800b900 <TIM_Base_SetConfig+0x13c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d108      	bne.n	800b888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689a      	ldr	r2, [r3, #8]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a0a      	ldr	r2, [pc, #40]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_Base_SetConfig+0xf8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a0c      	ldr	r2, [pc, #48]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d103      	bne.n	800b8c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	691a      	ldr	r2, [r3, #16]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	615a      	str	r2, [r3, #20]
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	40010000 	.word	0x40010000
 800b8dc:	40000400 	.word	0x40000400
 800b8e0:	40000800 	.word	0x40000800
 800b8e4:	40000c00 	.word	0x40000c00
 800b8e8:	40010400 	.word	0x40010400
 800b8ec:	40014000 	.word	0x40014000
 800b8f0:	40014400 	.word	0x40014400
 800b8f4:	40014800 	.word	0x40014800
 800b8f8:	40001800 	.word	0x40001800
 800b8fc:	40001c00 	.word	0x40001c00
 800b900:	40002000 	.word	0x40002000

0800b904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	f023 0201 	bic.w	r2, r3, #1
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	4b2b      	ldr	r3, [pc, #172]	; (800b9dc <TIM_OC1_SetConfig+0xd8>)
 800b930:	4013      	ands	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f023 0302 	bic.w	r3, r3, #2
 800b94c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a21      	ldr	r2, [pc, #132]	; (800b9e0 <TIM_OC1_SetConfig+0xdc>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d003      	beq.n	800b968 <TIM_OC1_SetConfig+0x64>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a20      	ldr	r2, [pc, #128]	; (800b9e4 <TIM_OC1_SetConfig+0xe0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d10c      	bne.n	800b982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f023 0308 	bic.w	r3, r3, #8
 800b96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f023 0304 	bic.w	r3, r3, #4
 800b980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a16      	ldr	r2, [pc, #88]	; (800b9e0 <TIM_OC1_SetConfig+0xdc>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_OC1_SetConfig+0x8e>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a15      	ldr	r2, [pc, #84]	; (800b9e4 <TIM_OC1_SetConfig+0xe0>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d111      	bne.n	800b9b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	621a      	str	r2, [r3, #32]
}
 800b9d0:	bf00      	nop
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	fffeff8f 	.word	0xfffeff8f
 800b9e0:	40010000 	.word	0x40010000
 800b9e4:	40010400 	.word	0x40010400

0800b9e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	f023 0210 	bic.w	r2, r3, #16
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4b2e      	ldr	r3, [pc, #184]	; (800bacc <TIM_OC2_SetConfig+0xe4>)
 800ba14:	4013      	ands	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	021b      	lsls	r3, r3, #8
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	f023 0320 	bic.w	r3, r3, #32
 800ba32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a23      	ldr	r2, [pc, #140]	; (800bad0 <TIM_OC2_SetConfig+0xe8>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d003      	beq.n	800ba50 <TIM_OC2_SetConfig+0x68>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a22      	ldr	r2, [pc, #136]	; (800bad4 <TIM_OC2_SetConfig+0xec>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10d      	bne.n	800ba6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <TIM_OC2_SetConfig+0xe8>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d003      	beq.n	800ba7c <TIM_OC2_SetConfig+0x94>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <TIM_OC2_SetConfig+0xec>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d113      	bne.n	800baa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	621a      	str	r2, [r3, #32]
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	feff8fff 	.word	0xfeff8fff
 800bad0:	40010000 	.word	0x40010000
 800bad4:	40010400 	.word	0x40010400

0800bad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4b2d      	ldr	r3, [pc, #180]	; (800bbb8 <TIM_OC3_SetConfig+0xe0>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0303 	bic.w	r3, r3, #3
 800bb0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	021b      	lsls	r3, r3, #8
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a22      	ldr	r2, [pc, #136]	; (800bbbc <TIM_OC3_SetConfig+0xe4>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d003      	beq.n	800bb3e <TIM_OC3_SetConfig+0x66>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a21      	ldr	r2, [pc, #132]	; (800bbc0 <TIM_OC3_SetConfig+0xe8>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10d      	bne.n	800bb5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <TIM_OC3_SetConfig+0xe4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d003      	beq.n	800bb6a <TIM_OC3_SetConfig+0x92>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a16      	ldr	r2, [pc, #88]	; (800bbc0 <TIM_OC3_SetConfig+0xe8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d113      	bne.n	800bb92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	621a      	str	r2, [r3, #32]
}
 800bbac:	bf00      	nop
 800bbae:	371c      	adds	r7, #28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	fffeff8f 	.word	0xfffeff8f
 800bbbc:	40010000 	.word	0x40010000
 800bbc0:	40010400 	.word	0x40010400

0800bbc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4b1e      	ldr	r3, [pc, #120]	; (800bc68 <TIM_OC4_SetConfig+0xa4>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	031b      	lsls	r3, r3, #12
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a13      	ldr	r2, [pc, #76]	; (800bc6c <TIM_OC4_SetConfig+0xa8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_OC4_SetConfig+0x68>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a12      	ldr	r2, [pc, #72]	; (800bc70 <TIM_OC4_SetConfig+0xac>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d109      	bne.n	800bc40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	019b      	lsls	r3, r3, #6
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	621a      	str	r2, [r3, #32]
}
 800bc5a:	bf00      	nop
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	feff8fff 	.word	0xfeff8fff
 800bc6c:	40010000 	.word	0x40010000
 800bc70:	40010400 	.word	0x40010400

0800bc74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4b1b      	ldr	r3, [pc, #108]	; (800bd0c <TIM_OC5_SetConfig+0x98>)
 800bca0:	4013      	ands	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bcb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a12      	ldr	r2, [pc, #72]	; (800bd10 <TIM_OC5_SetConfig+0x9c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d003      	beq.n	800bcd2 <TIM_OC5_SetConfig+0x5e>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a11      	ldr	r2, [pc, #68]	; (800bd14 <TIM_OC5_SetConfig+0xa0>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d109      	bne.n	800bce6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	621a      	str	r2, [r3, #32]
}
 800bd00:	bf00      	nop
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	fffeff8f 	.word	0xfffeff8f
 800bd10:	40010000 	.word	0x40010000
 800bd14:	40010400 	.word	0x40010400

0800bd18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <TIM_OC6_SetConfig+0x9c>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	021b      	lsls	r3, r3, #8
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	051b      	lsls	r3, r3, #20
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	4313      	orrs	r3, r2
 800bd66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a13      	ldr	r2, [pc, #76]	; (800bdb8 <TIM_OC6_SetConfig+0xa0>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d003      	beq.n	800bd78 <TIM_OC6_SetConfig+0x60>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a12      	ldr	r2, [pc, #72]	; (800bdbc <TIM_OC6_SetConfig+0xa4>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d109      	bne.n	800bd8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	029b      	lsls	r3, r3, #10
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	621a      	str	r2, [r3, #32]
}
 800bda6:	bf00      	nop
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	feff8fff 	.word	0xfeff8fff
 800bdb8:	40010000 	.word	0x40010000
 800bdbc:	40010400 	.word	0x40010400

0800bdc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b087      	sub	sp, #28
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f023 0201 	bic.w	r2, r3, #1
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bdea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f023 030a 	bic.w	r3, r3, #10
 800bdfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	4313      	orrs	r3, r2
 800be04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	621a      	str	r2, [r3, #32]
}
 800be12:	bf00      	nop
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be1e:	b480      	push	{r7}
 800be20:	b087      	sub	sp, #28
 800be22:	af00      	add	r7, sp, #0
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	60b9      	str	r1, [r7, #8]
 800be28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	f023 0210 	bic.w	r2, r3, #16
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	031b      	lsls	r3, r3, #12
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	4313      	orrs	r3, r2
 800be52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	011b      	lsls	r3, r3, #4
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	4313      	orrs	r3, r2
 800be64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	621a      	str	r2, [r3, #32]
}
 800be72:	bf00      	nop
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be7e:	b480      	push	{r7}
 800be80:	b085      	sub	sp, #20
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f043 0307 	orr.w	r3, r3, #7
 800bea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	609a      	str	r2, [r3, #8]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	021a      	lsls	r2, r3, #8
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	431a      	orrs	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4313      	orrs	r3, r2
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	4313      	orrs	r3, r2
 800bee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	609a      	str	r2, [r3, #8]
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d101      	bne.n	800bf0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	e06d      	b.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a30      	ldr	r2, [pc, #192]	; (800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d004      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a2f      	ldr	r2, [pc, #188]	; (800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d108      	bne.n	800bf52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a20      	ldr	r2, [pc, #128]	; (800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d022      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf7e:	d01d      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a1d      	ldr	r2, [pc, #116]	; (800bffc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d018      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a1c      	ldr	r2, [pc, #112]	; (800c000 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d013      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a1a      	ldr	r2, [pc, #104]	; (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d00e      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a15      	ldr	r2, [pc, #84]	; (800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d009      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a16      	ldr	r2, [pc, #88]	; (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d004      	beq.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a15      	ldr	r2, [pc, #84]	; (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d10c      	bne.n	800bfd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	40010000 	.word	0x40010000
 800bff8:	40010400 	.word	0x40010400
 800bffc:	40000400 	.word	0x40000400
 800c000:	40000800 	.word	0x40000800
 800c004:	40000c00 	.word	0x40000c00
 800c008:	40014000 	.word	0x40014000
 800c00c:	40001800 	.word	0x40001800

0800c010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c028:	2302      	movs	r3, #2
 800c02a:	e065      	b.n	800c0f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4313      	orrs	r3, r2
 800c040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	4313      	orrs	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	4313      	orrs	r3, r2
 800c094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	041b      	lsls	r3, r3, #16
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a16      	ldr	r2, [pc, #88]	; (800c104 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d004      	beq.n	800c0ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a14      	ldr	r2, [pc, #80]	; (800c108 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d115      	bne.n	800c0e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	40010000 	.word	0x40010000
 800c108:	40010400 	.word	0x40010400

0800c10c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e040      	b.n	800c1a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7f6 fc78 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2224      	movs	r2, #36	; 0x24
 800c138:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0201 	bic.w	r2, r2, #1
 800c148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f8b0 	bl	800c2b0 <UART_SetConfig>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d101      	bne.n	800c15a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e022      	b.n	800c1a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fb08 	bl	800c778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb8f 	bl	800c8bc <UART_CheckIdleState>
 800c19e:	4603      	mov	r3, r0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08a      	sub	sp, #40	; 0x28
 800c1ac:	af02      	add	r7, sp, #8
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1bc:	2b20      	cmp	r3, #32
 800c1be:	d171      	bne.n	800c2a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <HAL_UART_Transmit+0x24>
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e06a      	b.n	800c2a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2221      	movs	r2, #33	; 0x21
 800c1dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1de:	f7f8 f96b 	bl	80044b8 <HAL_GetTick>
 800c1e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	88fa      	ldrh	r2, [r7, #6]
 800c1e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	88fa      	ldrh	r2, [r7, #6]
 800c1f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1fc:	d108      	bne.n	800c210 <HAL_UART_Transmit+0x68>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d104      	bne.n	800c210 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	61bb      	str	r3, [r7, #24]
 800c20e:	e003      	b.n	800c218 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c218:	e02c      	b.n	800c274 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2200      	movs	r2, #0
 800c222:	2180      	movs	r1, #128	; 0x80
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 fb80 	bl	800c92a <UART_WaitOnFlagUntilTimeout>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e038      	b.n	800c2a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10b      	bne.n	800c252 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	3302      	adds	r3, #2
 800c24e:	61bb      	str	r3, [r7, #24]
 800c250:	e007      	b.n	800c262 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	3301      	adds	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c268:	b29b      	uxth	r3, r3
 800c26a:	3b01      	subs	r3, #1
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1cc      	bne.n	800c21a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	2200      	movs	r2, #0
 800c288:	2140      	movs	r1, #64	; 0x40
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f000 fb4d 	bl	800c92a <UART_WaitOnFlagUntilTimeout>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800c296:	2303      	movs	r3, #3
 800c298:	e005      	b.n	800c2a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2220      	movs	r2, #32
 800c29e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e000      	b.n	800c2a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c2a4:	2302      	movs	r3, #2
  }
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3720      	adds	r7, #32
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	69db      	ldr	r3, [r3, #28]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4ba6      	ldr	r3, [pc, #664]	; (800c574 <UART_SetConfig+0x2c4>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6812      	ldr	r2, [r2, #0]
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	430a      	orrs	r2, r1
 800c2fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a1b      	ldr	r3, [r3, #32]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	430a      	orrs	r2, r1
 800c320:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a94      	ldr	r2, [pc, #592]	; (800c578 <UART_SetConfig+0x2c8>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d120      	bne.n	800c36e <UART_SetConfig+0xbe>
 800c32c:	4b93      	ldr	r3, [pc, #588]	; (800c57c <UART_SetConfig+0x2cc>)
 800c32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c332:	f003 0303 	and.w	r3, r3, #3
 800c336:	2b03      	cmp	r3, #3
 800c338:	d816      	bhi.n	800c368 <UART_SetConfig+0xb8>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <UART_SetConfig+0x90>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c351 	.word	0x0800c351
 800c344:	0800c35d 	.word	0x0800c35d
 800c348:	0800c357 	.word	0x0800c357
 800c34c:	0800c363 	.word	0x0800c363
 800c350:	2301      	movs	r3, #1
 800c352:	77fb      	strb	r3, [r7, #31]
 800c354:	e150      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c356:	2302      	movs	r3, #2
 800c358:	77fb      	strb	r3, [r7, #31]
 800c35a:	e14d      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c35c:	2304      	movs	r3, #4
 800c35e:	77fb      	strb	r3, [r7, #31]
 800c360:	e14a      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c362:	2308      	movs	r3, #8
 800c364:	77fb      	strb	r3, [r7, #31]
 800c366:	e147      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c368:	2310      	movs	r3, #16
 800c36a:	77fb      	strb	r3, [r7, #31]
 800c36c:	e144      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a83      	ldr	r2, [pc, #524]	; (800c580 <UART_SetConfig+0x2d0>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d132      	bne.n	800c3de <UART_SetConfig+0x12e>
 800c378:	4b80      	ldr	r3, [pc, #512]	; (800c57c <UART_SetConfig+0x2cc>)
 800c37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c37e:	f003 030c 	and.w	r3, r3, #12
 800c382:	2b0c      	cmp	r3, #12
 800c384:	d828      	bhi.n	800c3d8 <UART_SetConfig+0x128>
 800c386:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <UART_SetConfig+0xdc>)
 800c388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38c:	0800c3c1 	.word	0x0800c3c1
 800c390:	0800c3d9 	.word	0x0800c3d9
 800c394:	0800c3d9 	.word	0x0800c3d9
 800c398:	0800c3d9 	.word	0x0800c3d9
 800c39c:	0800c3cd 	.word	0x0800c3cd
 800c3a0:	0800c3d9 	.word	0x0800c3d9
 800c3a4:	0800c3d9 	.word	0x0800c3d9
 800c3a8:	0800c3d9 	.word	0x0800c3d9
 800c3ac:	0800c3c7 	.word	0x0800c3c7
 800c3b0:	0800c3d9 	.word	0x0800c3d9
 800c3b4:	0800c3d9 	.word	0x0800c3d9
 800c3b8:	0800c3d9 	.word	0x0800c3d9
 800c3bc:	0800c3d3 	.word	0x0800c3d3
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	77fb      	strb	r3, [r7, #31]
 800c3c4:	e118      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	77fb      	strb	r3, [r7, #31]
 800c3ca:	e115      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c3cc:	2304      	movs	r3, #4
 800c3ce:	77fb      	strb	r3, [r7, #31]
 800c3d0:	e112      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	77fb      	strb	r3, [r7, #31]
 800c3d6:	e10f      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c3d8:	2310      	movs	r3, #16
 800c3da:	77fb      	strb	r3, [r7, #31]
 800c3dc:	e10c      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a68      	ldr	r2, [pc, #416]	; (800c584 <UART_SetConfig+0x2d4>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d120      	bne.n	800c42a <UART_SetConfig+0x17a>
 800c3e8:	4b64      	ldr	r3, [pc, #400]	; (800c57c <UART_SetConfig+0x2cc>)
 800c3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c3f2:	2b30      	cmp	r3, #48	; 0x30
 800c3f4:	d013      	beq.n	800c41e <UART_SetConfig+0x16e>
 800c3f6:	2b30      	cmp	r3, #48	; 0x30
 800c3f8:	d814      	bhi.n	800c424 <UART_SetConfig+0x174>
 800c3fa:	2b20      	cmp	r3, #32
 800c3fc:	d009      	beq.n	800c412 <UART_SetConfig+0x162>
 800c3fe:	2b20      	cmp	r3, #32
 800c400:	d810      	bhi.n	800c424 <UART_SetConfig+0x174>
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <UART_SetConfig+0x15c>
 800c406:	2b10      	cmp	r3, #16
 800c408:	d006      	beq.n	800c418 <UART_SetConfig+0x168>
 800c40a:	e00b      	b.n	800c424 <UART_SetConfig+0x174>
 800c40c:	2300      	movs	r3, #0
 800c40e:	77fb      	strb	r3, [r7, #31]
 800c410:	e0f2      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c412:	2302      	movs	r3, #2
 800c414:	77fb      	strb	r3, [r7, #31]
 800c416:	e0ef      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c418:	2304      	movs	r3, #4
 800c41a:	77fb      	strb	r3, [r7, #31]
 800c41c:	e0ec      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c41e:	2308      	movs	r3, #8
 800c420:	77fb      	strb	r3, [r7, #31]
 800c422:	e0e9      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c424:	2310      	movs	r3, #16
 800c426:	77fb      	strb	r3, [r7, #31]
 800c428:	e0e6      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a56      	ldr	r2, [pc, #344]	; (800c588 <UART_SetConfig+0x2d8>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d120      	bne.n	800c476 <UART_SetConfig+0x1c6>
 800c434:	4b51      	ldr	r3, [pc, #324]	; (800c57c <UART_SetConfig+0x2cc>)
 800c436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c43e:	2bc0      	cmp	r3, #192	; 0xc0
 800c440:	d013      	beq.n	800c46a <UART_SetConfig+0x1ba>
 800c442:	2bc0      	cmp	r3, #192	; 0xc0
 800c444:	d814      	bhi.n	800c470 <UART_SetConfig+0x1c0>
 800c446:	2b80      	cmp	r3, #128	; 0x80
 800c448:	d009      	beq.n	800c45e <UART_SetConfig+0x1ae>
 800c44a:	2b80      	cmp	r3, #128	; 0x80
 800c44c:	d810      	bhi.n	800c470 <UART_SetConfig+0x1c0>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <UART_SetConfig+0x1a8>
 800c452:	2b40      	cmp	r3, #64	; 0x40
 800c454:	d006      	beq.n	800c464 <UART_SetConfig+0x1b4>
 800c456:	e00b      	b.n	800c470 <UART_SetConfig+0x1c0>
 800c458:	2300      	movs	r3, #0
 800c45a:	77fb      	strb	r3, [r7, #31]
 800c45c:	e0cc      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c45e:	2302      	movs	r3, #2
 800c460:	77fb      	strb	r3, [r7, #31]
 800c462:	e0c9      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c464:	2304      	movs	r3, #4
 800c466:	77fb      	strb	r3, [r7, #31]
 800c468:	e0c6      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c46a:	2308      	movs	r3, #8
 800c46c:	77fb      	strb	r3, [r7, #31]
 800c46e:	e0c3      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c470:	2310      	movs	r3, #16
 800c472:	77fb      	strb	r3, [r7, #31]
 800c474:	e0c0      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a44      	ldr	r2, [pc, #272]	; (800c58c <UART_SetConfig+0x2dc>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d125      	bne.n	800c4cc <UART_SetConfig+0x21c>
 800c480:	4b3e      	ldr	r3, [pc, #248]	; (800c57c <UART_SetConfig+0x2cc>)
 800c482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c48e:	d017      	beq.n	800c4c0 <UART_SetConfig+0x210>
 800c490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c494:	d817      	bhi.n	800c4c6 <UART_SetConfig+0x216>
 800c496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c49a:	d00b      	beq.n	800c4b4 <UART_SetConfig+0x204>
 800c49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4a0:	d811      	bhi.n	800c4c6 <UART_SetConfig+0x216>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <UART_SetConfig+0x1fe>
 800c4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4aa:	d006      	beq.n	800c4ba <UART_SetConfig+0x20a>
 800c4ac:	e00b      	b.n	800c4c6 <UART_SetConfig+0x216>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	77fb      	strb	r3, [r7, #31]
 800c4b2:	e0a1      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	77fb      	strb	r3, [r7, #31]
 800c4b8:	e09e      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c4ba:	2304      	movs	r3, #4
 800c4bc:	77fb      	strb	r3, [r7, #31]
 800c4be:	e09b      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	77fb      	strb	r3, [r7, #31]
 800c4c4:	e098      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c4c6:	2310      	movs	r3, #16
 800c4c8:	77fb      	strb	r3, [r7, #31]
 800c4ca:	e095      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a2f      	ldr	r2, [pc, #188]	; (800c590 <UART_SetConfig+0x2e0>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d125      	bne.n	800c522 <UART_SetConfig+0x272>
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <UART_SetConfig+0x2cc>)
 800c4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c4e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4e4:	d017      	beq.n	800c516 <UART_SetConfig+0x266>
 800c4e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4ea:	d817      	bhi.n	800c51c <UART_SetConfig+0x26c>
 800c4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4f0:	d00b      	beq.n	800c50a <UART_SetConfig+0x25a>
 800c4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4f6:	d811      	bhi.n	800c51c <UART_SetConfig+0x26c>
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <UART_SetConfig+0x254>
 800c4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c500:	d006      	beq.n	800c510 <UART_SetConfig+0x260>
 800c502:	e00b      	b.n	800c51c <UART_SetConfig+0x26c>
 800c504:	2301      	movs	r3, #1
 800c506:	77fb      	strb	r3, [r7, #31]
 800c508:	e076      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c50a:	2302      	movs	r3, #2
 800c50c:	77fb      	strb	r3, [r7, #31]
 800c50e:	e073      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c510:	2304      	movs	r3, #4
 800c512:	77fb      	strb	r3, [r7, #31]
 800c514:	e070      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c516:	2308      	movs	r3, #8
 800c518:	77fb      	strb	r3, [r7, #31]
 800c51a:	e06d      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c51c:	2310      	movs	r3, #16
 800c51e:	77fb      	strb	r3, [r7, #31]
 800c520:	e06a      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a1b      	ldr	r2, [pc, #108]	; (800c594 <UART_SetConfig+0x2e4>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d138      	bne.n	800c59e <UART_SetConfig+0x2ee>
 800c52c:	4b13      	ldr	r3, [pc, #76]	; (800c57c <UART_SetConfig+0x2cc>)
 800c52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c532:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c53a:	d017      	beq.n	800c56c <UART_SetConfig+0x2bc>
 800c53c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c540:	d82a      	bhi.n	800c598 <UART_SetConfig+0x2e8>
 800c542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c546:	d00b      	beq.n	800c560 <UART_SetConfig+0x2b0>
 800c548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c54c:	d824      	bhi.n	800c598 <UART_SetConfig+0x2e8>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <UART_SetConfig+0x2aa>
 800c552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c556:	d006      	beq.n	800c566 <UART_SetConfig+0x2b6>
 800c558:	e01e      	b.n	800c598 <UART_SetConfig+0x2e8>
 800c55a:	2300      	movs	r3, #0
 800c55c:	77fb      	strb	r3, [r7, #31]
 800c55e:	e04b      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c560:	2302      	movs	r3, #2
 800c562:	77fb      	strb	r3, [r7, #31]
 800c564:	e048      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c566:	2304      	movs	r3, #4
 800c568:	77fb      	strb	r3, [r7, #31]
 800c56a:	e045      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c56c:	2308      	movs	r3, #8
 800c56e:	77fb      	strb	r3, [r7, #31]
 800c570:	e042      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c572:	bf00      	nop
 800c574:	efff69f3 	.word	0xefff69f3
 800c578:	40011000 	.word	0x40011000
 800c57c:	40023800 	.word	0x40023800
 800c580:	40004400 	.word	0x40004400
 800c584:	40004800 	.word	0x40004800
 800c588:	40004c00 	.word	0x40004c00
 800c58c:	40005000 	.word	0x40005000
 800c590:	40011400 	.word	0x40011400
 800c594:	40007800 	.word	0x40007800
 800c598:	2310      	movs	r3, #16
 800c59a:	77fb      	strb	r3, [r7, #31]
 800c59c:	e02c      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a72      	ldr	r2, [pc, #456]	; (800c76c <UART_SetConfig+0x4bc>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d125      	bne.n	800c5f4 <UART_SetConfig+0x344>
 800c5a8:	4b71      	ldr	r3, [pc, #452]	; (800c770 <UART_SetConfig+0x4c0>)
 800c5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c5b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c5b6:	d017      	beq.n	800c5e8 <UART_SetConfig+0x338>
 800c5b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c5bc:	d817      	bhi.n	800c5ee <UART_SetConfig+0x33e>
 800c5be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5c2:	d00b      	beq.n	800c5dc <UART_SetConfig+0x32c>
 800c5c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5c8:	d811      	bhi.n	800c5ee <UART_SetConfig+0x33e>
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <UART_SetConfig+0x326>
 800c5ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5d2:	d006      	beq.n	800c5e2 <UART_SetConfig+0x332>
 800c5d4:	e00b      	b.n	800c5ee <UART_SetConfig+0x33e>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	77fb      	strb	r3, [r7, #31]
 800c5da:	e00d      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	77fb      	strb	r3, [r7, #31]
 800c5e0:	e00a      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c5e2:	2304      	movs	r3, #4
 800c5e4:	77fb      	strb	r3, [r7, #31]
 800c5e6:	e007      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	77fb      	strb	r3, [r7, #31]
 800c5ec:	e004      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c5ee:	2310      	movs	r3, #16
 800c5f0:	77fb      	strb	r3, [r7, #31]
 800c5f2:	e001      	b.n	800c5f8 <UART_SetConfig+0x348>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c600:	d15b      	bne.n	800c6ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c602:	7ffb      	ldrb	r3, [r7, #31]
 800c604:	2b08      	cmp	r3, #8
 800c606:	d828      	bhi.n	800c65a <UART_SetConfig+0x3aa>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <UART_SetConfig+0x360>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c635 	.word	0x0800c635
 800c614:	0800c63d 	.word	0x0800c63d
 800c618:	0800c645 	.word	0x0800c645
 800c61c:	0800c65b 	.word	0x0800c65b
 800c620:	0800c64b 	.word	0x0800c64b
 800c624:	0800c65b 	.word	0x0800c65b
 800c628:	0800c65b 	.word	0x0800c65b
 800c62c:	0800c65b 	.word	0x0800c65b
 800c630:	0800c653 	.word	0x0800c653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c634:	f7fc fe1e 	bl	8009274 <HAL_RCC_GetPCLK1Freq>
 800c638:	61b8      	str	r0, [r7, #24]
        break;
 800c63a:	e013      	b.n	800c664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c63c:	f7fc fe2e 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800c640:	61b8      	str	r0, [r7, #24]
        break;
 800c642:	e00f      	b.n	800c664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c644:	4b4b      	ldr	r3, [pc, #300]	; (800c774 <UART_SetConfig+0x4c4>)
 800c646:	61bb      	str	r3, [r7, #24]
        break;
 800c648:	e00c      	b.n	800c664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c64a:	f7fc fd41 	bl	80090d0 <HAL_RCC_GetSysClockFreq>
 800c64e:	61b8      	str	r0, [r7, #24]
        break;
 800c650:	e008      	b.n	800c664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c656:	61bb      	str	r3, [r7, #24]
        break;
 800c658:	e004      	b.n	800c664 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	77bb      	strb	r3, [r7, #30]
        break;
 800c662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d074      	beq.n	800c754 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	005a      	lsls	r2, r3, #1
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	085b      	lsrs	r3, r3, #1
 800c674:	441a      	add	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c67e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2b0f      	cmp	r3, #15
 800c684:	d916      	bls.n	800c6b4 <UART_SetConfig+0x404>
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68c:	d212      	bcs.n	800c6b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	b29b      	uxth	r3, r3
 800c692:	f023 030f 	bic.w	r3, r3, #15
 800c696:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	085b      	lsrs	r3, r3, #1
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	f003 0307 	and.w	r3, r3, #7
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	89fb      	ldrh	r3, [r7, #14]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	89fa      	ldrh	r2, [r7, #14]
 800c6b0:	60da      	str	r2, [r3, #12]
 800c6b2:	e04f      	b.n	800c754 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	77bb      	strb	r3, [r7, #30]
 800c6b8:	e04c      	b.n	800c754 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6ba:	7ffb      	ldrb	r3, [r7, #31]
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d828      	bhi.n	800c712 <UART_SetConfig+0x462>
 800c6c0:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <UART_SetConfig+0x418>)
 800c6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c6ed 	.word	0x0800c6ed
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6fd 	.word	0x0800c6fd
 800c6d4:	0800c713 	.word	0x0800c713
 800c6d8:	0800c703 	.word	0x0800c703
 800c6dc:	0800c713 	.word	0x0800c713
 800c6e0:	0800c713 	.word	0x0800c713
 800c6e4:	0800c713 	.word	0x0800c713
 800c6e8:	0800c70b 	.word	0x0800c70b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ec:	f7fc fdc2 	bl	8009274 <HAL_RCC_GetPCLK1Freq>
 800c6f0:	61b8      	str	r0, [r7, #24]
        break;
 800c6f2:	e013      	b.n	800c71c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6f4:	f7fc fdd2 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800c6f8:	61b8      	str	r0, [r7, #24]
        break;
 800c6fa:	e00f      	b.n	800c71c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6fc:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <UART_SetConfig+0x4c4>)
 800c6fe:	61bb      	str	r3, [r7, #24]
        break;
 800c700:	e00c      	b.n	800c71c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c702:	f7fc fce5 	bl	80090d0 <HAL_RCC_GetSysClockFreq>
 800c706:	61b8      	str	r0, [r7, #24]
        break;
 800c708:	e008      	b.n	800c71c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c70e:	61bb      	str	r3, [r7, #24]
        break;
 800c710:	e004      	b.n	800c71c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	77bb      	strb	r3, [r7, #30]
        break;
 800c71a:	bf00      	nop
    }

    if (pclk != 0U)
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d018      	beq.n	800c754 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	085a      	lsrs	r2, r3, #1
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	441a      	add	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	fbb2 f3f3 	udiv	r3, r2, r3
 800c734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2b0f      	cmp	r3, #15
 800c73a:	d909      	bls.n	800c750 <UART_SetConfig+0x4a0>
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c742:	d205      	bcs.n	800c750 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	e001      	b.n	800c754 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c760:	7fbb      	ldrb	r3, [r7, #30]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	40007c00 	.word	0x40007c00
 800c770:	40023800 	.word	0x40023800
 800c774:	00f42400 	.word	0x00f42400

0800c778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00a      	beq.n	800c7a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a6:	f003 0302 	and.w	r3, r3, #2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c8:	f003 0304 	and.w	r3, r3, #4
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00a      	beq.n	800c7e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	430a      	orrs	r2, r1
 800c7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ea:	f003 0308 	and.w	r3, r3, #8
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00a      	beq.n	800c808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	430a      	orrs	r2, r1
 800c806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80c:	f003 0310 	and.w	r3, r3, #16
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00a      	beq.n	800c82a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	430a      	orrs	r2, r1
 800c828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00a      	beq.n	800c84c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	430a      	orrs	r2, r1
 800c84a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01a      	beq.n	800c88e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c876:	d10a      	bne.n	800c88e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	430a      	orrs	r2, r1
 800c88c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	605a      	str	r2, [r3, #4]
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af02      	add	r7, sp, #8
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8cc:	f7f7 fdf4 	bl	80044b8 <HAL_GetTick>
 800c8d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0308 	and.w	r3, r3, #8
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d10e      	bne.n	800c8fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f81b 	bl	800c92a <UART_WaitOnFlagUntilTimeout>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	e011      	b.n	800c922 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2220      	movs	r2, #32
 800c902:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b09c      	sub	sp, #112	; 0x70
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	603b      	str	r3, [r7, #0]
 800c936:	4613      	mov	r3, r2
 800c938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c93a:	e0a7      	b.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c942:	f000 80a3 	beq.w	800ca8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c946:	f7f7 fdb7 	bl	80044b8 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c952:	429a      	cmp	r2, r3
 800c954:	d302      	bcc.n	800c95c <UART_WaitOnFlagUntilTimeout+0x32>
 800c956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d13f      	bne.n	800c9dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c96a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c970:	667b      	str	r3, [r7, #100]	; 0x64
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c97a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c97c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e6      	bne.n	800c95c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3308      	adds	r3, #8
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c998:	e853 3f00 	ldrex	r3, [r3]
 800c99c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	f023 0301 	bic.w	r3, r3, #1
 800c9a4:	663b      	str	r3, [r7, #96]	; 0x60
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800c9b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9b6:	e841 2300 	strex	r3, r2, [r1]
 800c9ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1e5      	bne.n	800c98e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e068      	b.n	800caae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d050      	beq.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9f8:	d148      	bne.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	e853 3f00 	ldrex	r3, [r3]
 800ca10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca22:	637b      	str	r3, [r7, #52]	; 0x34
 800ca24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca2a:	e841 2300 	strex	r3, r2, [r1]
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1e6      	bne.n	800ca04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	e853 3f00 	ldrex	r3, [r3]
 800ca44:	613b      	str	r3, [r7, #16]
   return(result);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	f023 0301 	bic.w	r3, r3, #1
 800ca4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3308      	adds	r3, #8
 800ca54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca56:	623a      	str	r2, [r7, #32]
 800ca58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	69f9      	ldr	r1, [r7, #28]
 800ca5c:	6a3a      	ldr	r2, [r7, #32]
 800ca5e:	e841 2300 	strex	r3, r2, [r1]
 800ca62:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e5      	bne.n	800ca36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2220      	movs	r2, #32
 800ca74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2220      	movs	r2, #32
 800ca7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e010      	b.n	800caae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69da      	ldr	r2, [r3, #28]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	4013      	ands	r3, r2
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	bf0c      	ite	eq
 800ca9c:	2301      	moveq	r3, #1
 800ca9e:	2300      	movne	r3, #0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	461a      	mov	r2, r3
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	f43f af48 	beq.w	800c93c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3770      	adds	r7, #112	; 0x70
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
	...

0800cab8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d121      	bne.n	800cb0e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	4b27      	ldr	r3, [pc, #156]	; (800cb6c <FMC_SDRAM_Init+0xb4>)
 800cad0:	4013      	ands	r3, r2
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	6851      	ldr	r1, [r2, #4]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	6892      	ldr	r2, [r2, #8]
 800cada:	4311      	orrs	r1, r2
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	68d2      	ldr	r2, [r2, #12]
 800cae0:	4311      	orrs	r1, r2
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	6912      	ldr	r2, [r2, #16]
 800cae6:	4311      	orrs	r1, r2
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	6952      	ldr	r2, [r2, #20]
 800caec:	4311      	orrs	r1, r2
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	6992      	ldr	r2, [r2, #24]
 800caf2:	4311      	orrs	r1, r2
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	69d2      	ldr	r2, [r2, #28]
 800caf8:	4311      	orrs	r1, r2
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	6a12      	ldr	r2, [r2, #32]
 800cafe:	4311      	orrs	r1, r2
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cb04:	430a      	orrs	r2, r1
 800cb06:	431a      	orrs	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e026      	b.n	800cb5c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	69d9      	ldr	r1, [r3, #28]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	4319      	orrs	r1, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb24:	430b      	orrs	r3, r1
 800cb26:	431a      	orrs	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <FMC_SDRAM_Init+0xb4>)
 800cb32:	4013      	ands	r3, r2
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	6851      	ldr	r1, [r2, #4]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	6892      	ldr	r2, [r2, #8]
 800cb3c:	4311      	orrs	r1, r2
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	68d2      	ldr	r2, [r2, #12]
 800cb42:	4311      	orrs	r1, r2
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	6912      	ldr	r2, [r2, #16]
 800cb48:	4311      	orrs	r1, r2
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	6952      	ldr	r2, [r2, #20]
 800cb4e:	4311      	orrs	r1, r2
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	6992      	ldr	r2, [r2, #24]
 800cb54:	430a      	orrs	r2, r1
 800cb56:	431a      	orrs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	ffff8000 	.word	0xffff8000

0800cb70 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d128      	bne.n	800cbd4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	1e59      	subs	r1, r3, #1
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	4319      	orrs	r1, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	4319      	orrs	r1, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	031b      	lsls	r3, r3, #12
 800cbac:	4319      	orrs	r1, r3
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	041b      	lsls	r3, r3, #16
 800cbb6:	4319      	orrs	r1, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	051b      	lsls	r3, r3, #20
 800cbc0:	4319      	orrs	r1, r3
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	061b      	lsls	r3, r3, #24
 800cbca:	430b      	orrs	r3, r1
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	609a      	str	r2, [r3, #8]
 800cbd2:	e02d      	b.n	800cc30 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	689a      	ldr	r2, [r3, #8]
 800cbd8:	4b19      	ldr	r3, [pc, #100]	; (800cc40 <FMC_SDRAM_Timing_Init+0xd0>)
 800cbda:	4013      	ands	r3, r2
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	68d2      	ldr	r2, [r2, #12]
 800cbe0:	3a01      	subs	r2, #1
 800cbe2:	0311      	lsls	r1, r2, #12
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	6952      	ldr	r2, [r2, #20]
 800cbe8:	3a01      	subs	r2, #1
 800cbea:	0512      	lsls	r2, r2, #20
 800cbec:	430a      	orrs	r2, r1
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	1e59      	subs	r1, r3, #1
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	4319      	orrs	r1, r3
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	021b      	lsls	r3, r3, #8
 800cc14:	4319      	orrs	r1, r3
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	041b      	lsls	r3, r3, #16
 800cc1e:	4319      	orrs	r1, r3
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	061b      	lsls	r3, r3, #24
 800cc28:	430b      	orrs	r3, r1
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	ff0f0fff 	.word	0xff0f0fff

0800cc44 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	691a      	ldr	r2, [r3, #16]
 800cc54:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <FMC_SDRAM_SendCommand+0x44>)
 800cc56:	4013      	ands	r3, r2
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	6811      	ldr	r1, [r2, #0]
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	6852      	ldr	r2, [r2, #4]
 800cc60:	4311      	orrs	r1, r2
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	6892      	ldr	r2, [r2, #8]
 800cc66:	3a01      	subs	r2, #1
 800cc68:	0152      	lsls	r2, r2, #5
 800cc6a:	4311      	orrs	r1, r2
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	68d2      	ldr	r2, [r2, #12]
 800cc70:	0252      	lsls	r2, r2, #9
 800cc72:	430a      	orrs	r2, r1
 800cc74:	431a      	orrs	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr
 800cc88:	ffc00000 	.word	0xffc00000

0800cc8c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	695a      	ldr	r2, [r3, #20]
 800cc9a:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	0052      	lsls	r2, r2, #1
 800cca2:	431a      	orrs	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	ffffc001 	.word	0xffffc001

0800ccbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	f107 001c 	add.w	r0, r7, #28
 800ccca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d120      	bne.n	800cd16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	4b20      	ldr	r3, [pc, #128]	; (800cd68 <USB_CoreInit+0xac>)
 800cce6:	4013      	ands	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ccf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d105      	bne.n	800cd0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f9d8 	bl	800d0c0 <USB_CoreReset>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
 800cd14:	e010      	b.n	800cd38 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f9cc 	bl	800d0c0 <USB_CoreReset>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d10b      	bne.n	800cd56 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f043 0206 	orr.w	r2, r3, #6
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f043 0220 	orr.w	r2, r3, #32
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd62:	b004      	add	sp, #16
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	ffbdffbf 	.word	0xffbdffbf

0800cd6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	f043 0201 	orr.w	r2, r3, #1
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b083      	sub	sp, #12
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	f023 0201 	bic.w	r2, r3, #1
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cdcc:	78fb      	ldrb	r3, [r7, #3]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d115      	bne.n	800cdfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cdde:	2001      	movs	r0, #1
 800cde0:	f7f7 fb76 	bl	80044d0 <HAL_Delay>
      ms++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f95a 	bl	800d0a4 <USB_GetMode>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d01e      	beq.n	800ce34 <USB_SetCurrentMode+0x84>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b31      	cmp	r3, #49	; 0x31
 800cdfa:	d9f0      	bls.n	800cdde <USB_SetCurrentMode+0x2e>
 800cdfc:	e01a      	b.n	800ce34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cdfe:	78fb      	ldrb	r3, [r7, #3]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d115      	bne.n	800ce30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce10:	2001      	movs	r0, #1
 800ce12:	f7f7 fb5d 	bl	80044d0 <HAL_Delay>
      ms++;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f941 	bl	800d0a4 <USB_GetMode>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d005      	beq.n	800ce34 <USB_SetCurrentMode+0x84>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b31      	cmp	r3, #49	; 0x31
 800ce2c:	d9f0      	bls.n	800ce10 <USB_SetCurrentMode+0x60>
 800ce2e:	e001      	b.n	800ce34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e005      	b.n	800ce40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b32      	cmp	r3, #50	; 0x32
 800ce38:	d101      	bne.n	800ce3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e000      	b.n	800ce40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4a13      	ldr	r2, [pc, #76]	; (800ceac <USB_FlushTxFifo+0x64>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d901      	bls.n	800ce68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e01b      	b.n	800cea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	daf2      	bge.n	800ce56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	019b      	lsls	r3, r3, #6
 800ce78:	f043 0220 	orr.w	r2, r3, #32
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	3301      	adds	r3, #1
 800ce84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4a08      	ldr	r2, [pc, #32]	; (800ceac <USB_FlushTxFifo+0x64>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d901      	bls.n	800ce92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e006      	b.n	800cea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	f003 0320 	and.w	r3, r3, #32
 800ce9a:	2b20      	cmp	r3, #32
 800ce9c:	d0f0      	beq.n	800ce80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	00030d40 	.word	0x00030d40

0800ceb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	4a11      	ldr	r2, [pc, #68]	; (800cf0c <USB_FlushRxFifo+0x5c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d901      	bls.n	800cece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e018      	b.n	800cf00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	daf2      	bge.n	800cebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2210      	movs	r2, #16
 800cede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3301      	adds	r3, #1
 800cee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4a08      	ldr	r2, [pc, #32]	; (800cf0c <USB_FlushRxFifo+0x5c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d901      	bls.n	800cef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e006      	b.n	800cf00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	f003 0310 	and.w	r3, r3, #16
 800cefa:	2b10      	cmp	r3, #16
 800cefc:	d0f0      	beq.n	800cee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3714      	adds	r7, #20
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	00030d40 	.word	0x00030d40

0800cf10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b089      	sub	sp, #36	; 0x24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	460b      	mov	r3, r1
 800cf20:	71fb      	strb	r3, [r7, #7]
 800cf22:	4613      	mov	r3, r2
 800cf24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d123      	bne.n	800cf7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf36:	88bb      	ldrh	r3, [r7, #4]
 800cf38:	3303      	adds	r3, #3
 800cf3a:	089b      	lsrs	r3, r3, #2
 800cf3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e018      	b.n	800cf76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	031a      	lsls	r2, r3, #12
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf50:	461a      	mov	r2, r3
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	3301      	adds	r3, #1
 800cf62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	3301      	adds	r3, #1
 800cf68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	3301      	adds	r3, #1
 800cf74:	61bb      	str	r3, [r7, #24]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d3e2      	bcc.n	800cf44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3724      	adds	r7, #36	; 0x24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b08b      	sub	sp, #44	; 0x2c
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4613      	mov	r3, r2
 800cf98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	089b      	lsrs	r3, r3, #2
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfaa:	88fb      	ldrh	r3, [r7, #6]
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	623b      	str	r3, [r7, #32]
 800cfb6:	e014      	b.n	800cfe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	601a      	str	r2, [r3, #0]
    pDest++;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	3301      	adds	r3, #1
 800cfce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	3301      	adds	r3, #1
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	623b      	str	r3, [r7, #32]
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d3e6      	bcc.n	800cfb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cfea:	8bfb      	ldrh	r3, [r7, #30]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01e      	beq.n	800d02e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cffa:	461a      	mov	r2, r3
 800cffc:	f107 0310 	add.w	r3, r7, #16
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	fa22 f303 	lsr.w	r3, r2, r3
 800d010:	b2da      	uxtb	r2, r3
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	701a      	strb	r2, [r3, #0]
      i++;
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	3301      	adds	r3, #1
 800d01a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	3301      	adds	r3, #1
 800d020:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d022:	8bfb      	ldrh	r3, [r7, #30]
 800d024:	3b01      	subs	r3, #1
 800d026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d028:	8bfb      	ldrh	r3, [r7, #30]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1ea      	bne.n	800d004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d030:	4618      	mov	r0, r3
 800d032:	372c      	adds	r7, #44	; 0x2c
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	695b      	ldr	r3, [r3, #20]
 800d048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	4013      	ands	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d054:	68fb      	ldr	r3, [r7, #12]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d062:	b480      	push	{r7}
 800d064:	b085      	sub	sp, #20
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	460b      	mov	r3, r1
 800d06c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	015a      	lsls	r2, r3, #5
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	4413      	add	r3, r2
 800d07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	015a      	lsls	r2, r3, #5
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	4413      	add	r3, r2
 800d08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	4013      	ands	r3, r2
 800d094:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d096:	68bb      	ldr	r3, [r7, #8]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	f003 0301 	and.w	r3, r3, #1
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4a13      	ldr	r2, [pc, #76]	; (800d124 <USB_CoreReset+0x64>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d901      	bls.n	800d0de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	e01b      	b.n	800d116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	daf2      	bge.n	800d0cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	f043 0201 	orr.w	r2, r3, #1
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	4a09      	ldr	r2, [pc, #36]	; (800d124 <USB_CoreReset+0x64>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d901      	bls.n	800d108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d104:	2303      	movs	r3, #3
 800d106:	e006      	b.n	800d116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b01      	cmp	r3, #1
 800d112:	d0f0      	beq.n	800d0f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	00030d40 	.word	0x00030d40

0800d128 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d128:	b084      	sub	sp, #16
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b086      	sub	sp, #24
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d148:	461a      	mov	r2, r3
 800d14a:	2300      	movs	r3, #0
 800d14c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d162:	2b00      	cmp	r3, #0
 800d164:	d018      	beq.n	800d198 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d10a      	bne.n	800d182 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d17a:	f043 0304 	orr.w	r3, r3, #4
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	e014      	b.n	800d1ac <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d190:	f023 0304 	bic.w	r3, r3, #4
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	e009      	b.n	800d1ac <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1a6:	f023 0304 	bic.w	r3, r3, #4
 800d1aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d1ac:	2110      	movs	r1, #16
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fe4a 	bl	800ce48 <USB_FlushTxFifo>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff fe76 	bl	800ceb0 <USB_FlushRxFifo>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	613b      	str	r3, [r7, #16]
 800d1d2:	e015      	b.n	800d200 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	015a      	lsls	r2, r3, #5
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	429a      	cmp	r2, r3
 800d206:	d3e5      	bcc.n	800d1d4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f04f 32ff 	mov.w	r2, #4294967295
 800d214:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00b      	beq.n	800d23a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d228:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a13      	ldr	r2, [pc, #76]	; (800d27c <USB_HostInit+0x154>)
 800d22e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a13      	ldr	r2, [pc, #76]	; (800d280 <USB_HostInit+0x158>)
 800d234:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d238:	e009      	b.n	800d24e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2280      	movs	r2, #128	; 0x80
 800d23e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a10      	ldr	r2, [pc, #64]	; (800d284 <USB_HostInit+0x15c>)
 800d244:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a0f      	ldr	r2, [pc, #60]	; (800d288 <USB_HostInit+0x160>)
 800d24a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	2b00      	cmp	r3, #0
 800d252:	d105      	bne.n	800d260 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	f043 0210 	orr.w	r2, r3, #16
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	4b09      	ldr	r3, [pc, #36]	; (800d28c <USB_HostInit+0x164>)
 800d266:	4313      	orrs	r3, r2
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d278:	b004      	add	sp, #16
 800d27a:	4770      	bx	lr
 800d27c:	01000200 	.word	0x01000200
 800d280:	00e00300 	.word	0x00e00300
 800d284:	00600080 	.word	0x00600080
 800d288:	004000e0 	.word	0x004000e0
 800d28c:	a3200008 	.word	0xa3200008

0800d290 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d2ae:	f023 0303 	bic.w	r3, r3, #3
 800d2b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d107      	bne.n	800d2e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2d8:	461a      	mov	r2, r3
 800d2da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d2de:	6053      	str	r3, [r2, #4]
 800d2e0:	e009      	b.n	800d2f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d2e2:	78fb      	ldrb	r3, [r7, #3]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d106      	bne.n	800d2f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f241 7370 	movw	r3, #6000	; 0x1770
 800d2f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d310:	2300      	movs	r3, #0
 800d312:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d324:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d332:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d334:	2064      	movs	r0, #100	; 0x64
 800d336:	f7f7 f8cb 	bl	80044d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d346:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d348:	200a      	movs	r0, #10
 800d34a:	f7f7 f8c1 	bl	80044d0 <HAL_Delay>

  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d368:	2300      	movs	r3, #0
 800d36a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d37c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <USB_DriveVbus+0x44>
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d106      	bne.n	800d39c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d39a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3a6:	d109      	bne.n	800d3bc <USB_DriveVbus+0x64>
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	b085      	sub	sp, #20
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	0c5b      	lsrs	r3, r3, #17
 800d3e8:	f003 0303 	and.w	r3, r3, #3
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	b29b      	uxth	r3, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
	...

0800d41c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	4608      	mov	r0, r1
 800d426:	4611      	mov	r1, r2
 800d428:	461a      	mov	r2, r3
 800d42a:	4603      	mov	r3, r0
 800d42c:	70fb      	strb	r3, [r7, #3]
 800d42e:	460b      	mov	r3, r1
 800d430:	70bb      	strb	r3, [r7, #2]
 800d432:	4613      	mov	r3, r2
 800d434:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d43e:	78fb      	ldrb	r3, [r7, #3]
 800d440:	015a      	lsls	r2, r3, #5
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	4413      	add	r3, r2
 800d446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d44a:	461a      	mov	r2, r3
 800d44c:	f04f 33ff 	mov.w	r3, #4294967295
 800d450:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d452:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d456:	2b03      	cmp	r3, #3
 800d458:	d87e      	bhi.n	800d558 <USB_HC_Init+0x13c>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USB_HC_Init+0x44>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d471 	.word	0x0800d471
 800d464:	0800d51b 	.word	0x0800d51b
 800d468:	0800d471 	.word	0x0800d471
 800d46c:	0800d4dd 	.word	0x0800d4dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	4413      	add	r3, r2
 800d478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47c:	461a      	mov	r2, r3
 800d47e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d482:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d484:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	da10      	bge.n	800d4ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d48c:	78fb      	ldrb	r3, [r7, #3]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	4413      	add	r3, r2
 800d494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	0151      	lsls	r1, r2, #5
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	440a      	add	r2, r1
 800d4a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d4ac:	e057      	b.n	800d55e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d051      	beq.n	800d55e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d4ba:	78fb      	ldrb	r3, [r7, #3]
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	78fa      	ldrb	r2, [r7, #3]
 800d4ca:	0151      	lsls	r1, r2, #5
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	440a      	add	r2, r1
 800d4d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4d8:	60d3      	str	r3, [r2, #12]
      break;
 800d4da:	e040      	b.n	800d55e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f240 639d 	movw	r3, #1693	; 0x69d
 800d4ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d4f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da34      	bge.n	800d562 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	78fa      	ldrb	r2, [r7, #3]
 800d508:	0151      	lsls	r1, r2, #5
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	440a      	add	r2, r1
 800d50e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d516:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d518:	e023      	b.n	800d562 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d51a:	78fb      	ldrb	r3, [r7, #3]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	4413      	add	r3, r2
 800d522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d526:	461a      	mov	r2, r3
 800d528:	f240 2325 	movw	r3, #549	; 0x225
 800d52c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d52e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d532:	2b00      	cmp	r3, #0
 800d534:	da17      	bge.n	800d566 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	78fa      	ldrb	r2, [r7, #3]
 800d546:	0151      	lsls	r1, r2, #5
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	440a      	add	r2, r1
 800d54c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d550:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d554:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d556:	e006      	b.n	800d566 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	77fb      	strb	r3, [r7, #31]
      break;
 800d55c:	e004      	b.n	800d568 <USB_HC_Init+0x14c>
      break;
 800d55e:	bf00      	nop
 800d560:	e002      	b.n	800d568 <USB_HC_Init+0x14c>
      break;
 800d562:	bf00      	nop
 800d564:	e000      	b.n	800d568 <USB_HC_Init+0x14c>
      break;
 800d566:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d568:	78fb      	ldrb	r3, [r7, #3]
 800d56a:	015a      	lsls	r2, r3, #5
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	4413      	add	r3, r2
 800d570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	78fa      	ldrb	r2, [r7, #3]
 800d578:	0151      	lsls	r1, r2, #5
 800d57a:	693a      	ldr	r2, [r7, #16]
 800d57c:	440a      	add	r2, r1
 800d57e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d582:	f043 0302 	orr.w	r3, r3, #2
 800d586:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	2101      	movs	r1, #1
 800d598:	fa01 f303 	lsl.w	r3, r1, r3
 800d59c:	6939      	ldr	r1, [r7, #16]
 800d59e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d5b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da03      	bge.n	800d5c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5be:	61bb      	str	r3, [r7, #24]
 800d5c0:	e001      	b.n	800d5c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff feff 	bl	800d3ca <USB_GetHostSpeed>
 800d5cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d5ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d106      	bne.n	800d5e4 <USB_HC_Init+0x1c8>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d003      	beq.n	800d5e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d5dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5e0:	617b      	str	r3, [r7, #20]
 800d5e2:	e001      	b.n	800d5e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5e8:	787b      	ldrb	r3, [r7, #1]
 800d5ea:	059b      	lsls	r3, r3, #22
 800d5ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d5f0:	78bb      	ldrb	r3, [r7, #2]
 800d5f2:	02db      	lsls	r3, r3, #11
 800d5f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d5fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d5fe:	049b      	lsls	r3, r3, #18
 800d600:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d604:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d606:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d608:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d60c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d612:	78fb      	ldrb	r3, [r7, #3]
 800d614:	0159      	lsls	r1, r3, #5
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	440b      	add	r3, r1
 800d61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d61e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d624:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d626:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d003      	beq.n	800d636 <USB_HC_Init+0x21a>
 800d62e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d632:	2b01      	cmp	r3, #1
 800d634:	d10f      	bne.n	800d656 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d636:	78fb      	ldrb	r3, [r7, #3]
 800d638:	015a      	lsls	r2, r3, #5
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	78fa      	ldrb	r2, [r7, #3]
 800d646:	0151      	lsls	r1, r2, #5
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	440a      	add	r2, r1
 800d64c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d654:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d656:	7ffb      	ldrb	r3, [r7, #31]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3720      	adds	r7, #32
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08c      	sub	sp, #48	; 0x30
 800d664:	af02      	add	r7, sp, #8
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4613      	mov	r3, r2
 800d66c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d67c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d686:	2b00      	cmp	r3, #0
 800d688:	d02d      	beq.n	800d6e6 <USB_HC_StartXfer+0x86>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	791b      	ldrb	r3, [r3, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d129      	bne.n	800d6e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d117      	bne.n	800d6c8 <USB_HC_StartXfer+0x68>
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	79db      	ldrb	r3, [r3, #7]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <USB_HC_StartXfer+0x48>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	79db      	ldrb	r3, [r3, #7]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d10f      	bne.n	800d6c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	015a      	lsls	r2, r3, #5
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	69fa      	ldr	r2, [r7, #28]
 800d6b8:	0151      	lsls	r1, r2, #5
 800d6ba:	6a3a      	ldr	r2, [r7, #32]
 800d6bc:	440a      	add	r2, r1
 800d6be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <USB_HC_StartXfer+0x86>
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	795b      	ldrb	r3, [r3, #5]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d107      	bne.n	800d6e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	785b      	ldrb	r3, [r3, #1]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 fa0f 	bl	800db00 <USB_DoPing>
      return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e0f8      	b.n	800d8d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d018      	beq.n	800d720 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	8912      	ldrh	r2, [r2, #8]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	8912      	ldrh	r2, [r2, #8]
 800d6fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800d702:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d706:	8b7b      	ldrh	r3, [r7, #26]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d90b      	bls.n	800d724 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d70c:	8b7b      	ldrh	r3, [r7, #26]
 800d70e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	8912      	ldrh	r2, [r2, #8]
 800d716:	fb03 f202 	mul.w	r2, r3, r2
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	611a      	str	r2, [r3, #16]
 800d71e:	e001      	b.n	800d724 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d720:	2301      	movs	r3, #1
 800d722:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	78db      	ldrb	r3, [r3, #3]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d007      	beq.n	800d73c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d72c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	8912      	ldrh	r2, [r2, #8]
 800d732:	fb03 f202 	mul.w	r2, r3, r2
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	611a      	str	r2, [r3, #16]
 800d73a:	e003      	b.n	800d744 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	695a      	ldr	r2, [r3, #20]
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d74c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d74e:	04d9      	lsls	r1, r3, #19
 800d750:	4b63      	ldr	r3, [pc, #396]	; (800d8e0 <USB_HC_StartXfer+0x280>)
 800d752:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d754:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	7a9b      	ldrb	r3, [r3, #10]
 800d75a:	075b      	lsls	r3, r3, #29
 800d75c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d760:	69f9      	ldr	r1, [r7, #28]
 800d762:	0148      	lsls	r0, r1, #5
 800d764:	6a39      	ldr	r1, [r7, #32]
 800d766:	4401      	add	r1, r0
 800d768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d76c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d76e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d009      	beq.n	800d78a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	68d9      	ldr	r1, [r3, #12]
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	6a3b      	ldr	r3, [r7, #32]
 800d780:	4413      	add	r3, r2
 800d782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d786:	460a      	mov	r2, r1
 800d788:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	bf0c      	ite	eq
 800d79a:	2301      	moveq	r3, #1
 800d79c:	2300      	movne	r3, #0
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	69fa      	ldr	r2, [r7, #28]
 800d7b2:	0151      	lsls	r1, r2, #5
 800d7b4:	6a3a      	ldr	r2, [r7, #32]
 800d7b6:	440a      	add	r2, r1
 800d7b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	7e7b      	ldrb	r3, [r7, #25]
 800d7d2:	075b      	lsls	r3, r3, #29
 800d7d4:	69f9      	ldr	r1, [r7, #28]
 800d7d6:	0148      	lsls	r0, r1, #5
 800d7d8:	6a39      	ldr	r1, [r7, #32]
 800d7da:	4401      	add	r1, r0
 800d7dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	015a      	lsls	r2, r3, #5
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	78db      	ldrb	r3, [r3, #3]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d80a:	613b      	str	r3, [r7, #16]
 800d80c:	e003      	b.n	800d816 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d814:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d81c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	015a      	lsls	r2, r3, #5
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	4413      	add	r3, r2
 800d826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d82a:	461a      	mov	r2, r3
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	e04e      	b.n	800d8d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	78db      	ldrb	r3, [r3, #3]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d149      	bne.n	800d8d6 <USB_HC_StartXfer+0x276>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d045      	beq.n	800d8d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	79db      	ldrb	r3, [r3, #7]
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d830      	bhi.n	800d8b4 <USB_HC_StartXfer+0x254>
 800d852:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <USB_HC_StartXfer+0x1f8>)
 800d854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d858:	0800d869 	.word	0x0800d869
 800d85c:	0800d88d 	.word	0x0800d88d
 800d860:	0800d869 	.word	0x0800d869
 800d864:	0800d88d 	.word	0x0800d88d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	3303      	adds	r3, #3
 800d86e:	089b      	lsrs	r3, r3, #2
 800d870:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d872:	8afa      	ldrh	r2, [r7, #22]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d878:	b29b      	uxth	r3, r3
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d91c      	bls.n	800d8b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	f043 0220 	orr.w	r2, r3, #32
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	619a      	str	r2, [r3, #24]
        }
        break;
 800d88a:	e015      	b.n	800d8b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	695b      	ldr	r3, [r3, #20]
 800d890:	3303      	adds	r3, #3
 800d892:	089b      	lsrs	r3, r3, #2
 800d894:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d896:	8afa      	ldrh	r2, [r7, #22]
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d90a      	bls.n	800d8bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	619a      	str	r2, [r3, #24]
        }
        break;
 800d8b2:	e003      	b.n	800d8bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d8b4:	bf00      	nop
 800d8b6:	e002      	b.n	800d8be <USB_HC_StartXfer+0x25e>
        break;
 800d8b8:	bf00      	nop
 800d8ba:	e000      	b.n	800d8be <USB_HC_StartXfer+0x25e>
        break;
 800d8bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	68d9      	ldr	r1, [r3, #12]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	785a      	ldrb	r2, [r3, #1]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	9000      	str	r0, [sp, #0]
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f7ff fb1d 	bl	800cf10 <USB_WritePacket>
  }

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	; 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	1ff80000 	.word	0x1ff80000

0800d8e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	b29b      	uxth	r3, r3
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d906:	b480      	push	{r7}
 800d908:	b089      	sub	sp, #36	; 0x24
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d916:	78fb      	ldrb	r3, [r7, #3]
 800d918:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	4413      	add	r3, r2
 800d926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	0c9b      	lsrs	r3, r3, #18
 800d92e:	f003 0303 	and.w	r3, r3, #3
 800d932:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	015a      	lsls	r2, r3, #5
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	4413      	add	r3, r2
 800d93c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	0fdb      	lsrs	r3, r3, #31
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f003 0320 	and.w	r3, r3, #32
 800d952:	2b20      	cmp	r3, #32
 800d954:	d104      	bne.n	800d960 <USB_HC_Halt+0x5a>
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e0c8      	b.n	800daf2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <USB_HC_Halt+0x66>
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d163      	bne.n	800da34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	015a      	lsls	r2, r3, #5
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	4413      	add	r3, r2
 800d974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	0151      	lsls	r1, r2, #5
 800d97e:	69fa      	ldr	r2, [r7, #28]
 800d980:	440a      	add	r2, r1
 800d982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d98a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f003 0320 	and.w	r3, r3, #32
 800d994:	2b00      	cmp	r3, #0
 800d996:	f040 80ab 	bne.w	800daf0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d133      	bne.n	800da0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	015a      	lsls	r2, r3, #5
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	0151      	lsls	r1, r2, #5
 800d9b8:	69fa      	ldr	r2, [r7, #28]
 800d9ba:	440a      	add	r2, r1
 800d9bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	015a      	lsls	r2, r3, #5
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	69ba      	ldr	r2, [r7, #24]
 800d9d6:	0151      	lsls	r1, r2, #5
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	440a      	add	r2, r1
 800d9dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9f2:	d81d      	bhi.n	800da30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	015a      	lsls	r2, r3, #5
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da0a:	d0ec      	beq.n	800d9e6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da0c:	e070      	b.n	800daf0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	015a      	lsls	r2, r3, #5
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	4413      	add	r3, r2
 800da16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	69ba      	ldr	r2, [r7, #24]
 800da1e:	0151      	lsls	r1, r2, #5
 800da20:	69fa      	ldr	r2, [r7, #28]
 800da22:	440a      	add	r2, r1
 800da24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da2e:	e05f      	b.n	800daf0 <USB_HC_Halt+0x1ea>
            break;
 800da30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800da32:	e05d      	b.n	800daf0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	0151      	lsls	r1, r2, #5
 800da46:	69fa      	ldr	r2, [r7, #28]
 800da48:	440a      	add	r2, r1
 800da4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d133      	bne.n	800dacc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	015a      	lsls	r2, r3, #5
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	4413      	add	r3, r2
 800da6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	69ba      	ldr	r2, [r7, #24]
 800da74:	0151      	lsls	r1, r2, #5
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	440a      	add	r2, r1
 800da7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	0151      	lsls	r1, r2, #5
 800da96:	69fa      	ldr	r2, [r7, #28]
 800da98:	440a      	add	r2, r1
 800da9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800daa2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3301      	adds	r3, #1
 800daa8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dab0:	d81d      	bhi.n	800daee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dac8:	d0ec      	beq.n	800daa4 <USB_HC_Halt+0x19e>
 800daca:	e011      	b.n	800daf0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	015a      	lsls	r2, r3, #5
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	69ba      	ldr	r2, [r7, #24]
 800dadc:	0151      	lsls	r1, r2, #5
 800dade:	69fa      	ldr	r2, [r7, #28]
 800dae0:	440a      	add	r2, r1
 800dae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	e000      	b.n	800daf0 <USB_HC_Halt+0x1ea>
          break;
 800daee:	bf00      	nop
    }
  }

  return HAL_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3724      	adds	r7, #36	; 0x24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
	...

0800db00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800db14:	2301      	movs	r3, #1
 800db16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	04da      	lsls	r2, r3, #19
 800db1c:	4b15      	ldr	r3, [pc, #84]	; (800db74 <USB_DoPing+0x74>)
 800db1e:	4013      	ands	r3, r2
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	440a      	add	r2, r1
 800db28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	015a      	lsls	r2, r3, #5
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	4413      	add	r3, r2
 800db5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db5e:	461a      	mov	r2, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	371c      	adds	r7, #28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	1ff80000 	.word	0x1ff80000

0800db78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff f8fe 	bl	800cd8e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db92:	2110      	movs	r1, #16
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff f957 	bl	800ce48 <USB_FlushTxFifo>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff f983 	bl	800ceb0 <USB_FlushRxFifo>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61bb      	str	r3, [r7, #24]
 800dbb8:	e01f      	b.n	800dbfa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	015a      	lsls	r2, r3, #5
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbe0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	015a      	lsls	r2, r3, #5
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbee:	461a      	mov	r2, r3
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	61bb      	str	r3, [r7, #24]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	2b0f      	cmp	r3, #15
 800dbfe:	d9dc      	bls.n	800dbba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dc00:	2300      	movs	r3, #0
 800dc02:	61bb      	str	r3, [r7, #24]
 800dc04:	e034      	b.n	800dc70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	015a      	lsls	r2, r3, #5
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	015a      	lsls	r2, r3, #5
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	4413      	add	r3, r2
 800dc36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3301      	adds	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc4c:	d80c      	bhi.n	800dc68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	015a      	lsls	r2, r3, #5
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	4413      	add	r3, r2
 800dc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc64:	d0ec      	beq.n	800dc40 <USB_StopHost+0xc8>
 800dc66:	e000      	b.n	800dc6a <USB_StopHost+0xf2>
        break;
 800dc68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	61bb      	str	r3, [r7, #24]
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	2b0f      	cmp	r3, #15
 800dc74:	d9c7      	bls.n	800dc06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff f86d 	bl	800cd6c <USB_EnableGlobalInt>

  return ret;
 800dc92:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dc9c:	b590      	push	{r4, r7, lr}
 800dc9e:	b089      	sub	sp, #36	; 0x24
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800dca4:	2301      	movs	r3, #1
 800dca6:	2202      	movs	r2, #2
 800dca8:	2102      	movs	r1, #2
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fc85 	bl	800e5ba <USBH_FindInterface>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	2bff      	cmp	r3, #255	; 0xff
 800dcb8:	d002      	beq.n	800dcc0 <USBH_CDC_InterfaceInit+0x24>
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d901      	bls.n	800dcc4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	e13d      	b.n	800df40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 fc5a 	bl	800e582 <USBH_SelectInterface>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800dcd8:	2302      	movs	r3, #2
 800dcda:	e131      	b.n	800df40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800dce2:	2050      	movs	r0, #80	; 0x50
 800dce4:	f002 fae8 	bl	80102b8 <malloc>
 800dce8:	4603      	mov	r3, r0
 800dcea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcf2:	69db      	ldr	r3, [r3, #28]
 800dcf4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d101      	bne.n	800dd00 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	e11f      	b.n	800df40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800dd00:	2250      	movs	r2, #80	; 0x50
 800dd02:	2100      	movs	r1, #0
 800dd04:	68b8      	ldr	r0, [r7, #8]
 800dd06:	f002 fae7 	bl	80102d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	211a      	movs	r1, #26
 800dd10:	fb01 f303 	mul.w	r3, r1, r3
 800dd14:	4413      	add	r3, r2
 800dd16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	b25b      	sxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da15      	bge.n	800dd4e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	211a      	movs	r1, #26
 800dd28:	fb01 f303 	mul.w	r3, r1, r3
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd32:	781a      	ldrb	r2, [r3, #0]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	211a      	movs	r1, #26
 800dd3e:	fb01 f303 	mul.w	r3, r1, r3
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dd48:	881a      	ldrh	r2, [r3, #0]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	785b      	ldrb	r3, [r3, #1]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 ff26 	bl	800fba6 <USBH_AllocPipe>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	7819      	ldrb	r1, [r3, #0]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	7858      	ldrb	r0, [r3, #1]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	8952      	ldrh	r2, [r2, #10]
 800dd7a:	9202      	str	r2, [sp, #8]
 800dd7c:	2203      	movs	r2, #3
 800dd7e:	9201      	str	r2, [sp, #4]
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	4623      	mov	r3, r4
 800dd84:	4602      	mov	r2, r0
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f001 fede 	bl	800fb48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2200      	movs	r2, #0
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f002 f9e1 	bl	801015c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	210a      	movs	r1, #10
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fc0a 	bl	800e5ba <USBH_FindInterface>
 800dda6:	4603      	mov	r3, r0
 800dda8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	2bff      	cmp	r3, #255	; 0xff
 800ddae:	d002      	beq.n	800ddb6 <USBH_CDC_InterfaceInit+0x11a>
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d901      	bls.n	800ddba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ddb6:	2302      	movs	r3, #2
 800ddb8:	e0c2      	b.n	800df40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	211a      	movs	r1, #26
 800ddc0:	fb01 f303 	mul.w	r3, r1, r3
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	da16      	bge.n	800de00 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	211a      	movs	r1, #26
 800ddd8:	fb01 f303 	mul.w	r3, r1, r3
 800dddc:	4413      	add	r3, r2
 800ddde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	211a      	movs	r1, #26
 800ddee:	fb01 f303 	mul.w	r3, r1, r3
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ddf8:	881a      	ldrh	r2, [r3, #0]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	835a      	strh	r2, [r3, #26]
 800ddfe:	e015      	b.n	800de2c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	211a      	movs	r1, #26
 800de06:	fb01 f303 	mul.w	r3, r1, r3
 800de0a:	4413      	add	r3, r2
 800de0c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800de10:	781a      	ldrb	r2, [r3, #0]
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	211a      	movs	r1, #26
 800de1c:	fb01 f303 	mul.w	r3, r1, r3
 800de20:	4413      	add	r3, r2
 800de22:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800de26:	881a      	ldrh	r2, [r3, #0]
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	211a      	movs	r1, #26
 800de32:	fb01 f303 	mul.w	r3, r1, r3
 800de36:	4413      	add	r3, r2
 800de38:	f203 3356 	addw	r3, r3, #854	; 0x356
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	b25b      	sxtb	r3, r3
 800de40:	2b00      	cmp	r3, #0
 800de42:	da16      	bge.n	800de72 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800de44:	7bfb      	ldrb	r3, [r7, #15]
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	211a      	movs	r1, #26
 800de4a:	fb01 f303 	mul.w	r3, r1, r3
 800de4e:	4413      	add	r3, r2
 800de50:	f203 3356 	addw	r3, r3, #854	; 0x356
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	211a      	movs	r1, #26
 800de60:	fb01 f303 	mul.w	r3, r1, r3
 800de64:	4413      	add	r3, r2
 800de66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800de6a:	881a      	ldrh	r2, [r3, #0]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	835a      	strh	r2, [r3, #26]
 800de70:	e015      	b.n	800de9e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	211a      	movs	r1, #26
 800de78:	fb01 f303 	mul.w	r3, r1, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	211a      	movs	r1, #26
 800de8e:	fb01 f303 	mul.w	r3, r1, r3
 800de92:	4413      	add	r3, r2
 800de94:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800de98:	881a      	ldrh	r2, [r3, #0]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	7b9b      	ldrb	r3, [r3, #14]
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f001 fe7e 	bl	800fba6 <USBH_AllocPipe>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	7bdb      	ldrb	r3, [r3, #15]
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f001 fe74 	bl	800fba6 <USBH_AllocPipe>
 800debe:	4603      	mov	r3, r0
 800dec0:	461a      	mov	r2, r3
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	7b59      	ldrb	r1, [r3, #13]
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	7b98      	ldrb	r0, [r3, #14]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	8b12      	ldrh	r2, [r2, #24]
 800dede:	9202      	str	r2, [sp, #8]
 800dee0:	2202      	movs	r2, #2
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	4623      	mov	r3, r4
 800dee8:	4602      	mov	r2, r0
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f001 fe2c 	bl	800fb48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	7b19      	ldrb	r1, [r3, #12]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	7bd8      	ldrb	r0, [r3, #15]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	8b52      	ldrh	r2, [r2, #26]
 800df08:	9202      	str	r2, [sp, #8]
 800df0a:	2202      	movs	r2, #2
 800df0c:	9201      	str	r2, [sp, #4]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	4623      	mov	r3, r4
 800df12:	4602      	mov	r2, r0
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 fe17 	bl	800fb48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	7b5b      	ldrb	r3, [r3, #13]
 800df26:	2200      	movs	r2, #0
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f002 f916 	bl	801015c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	7b1b      	ldrb	r3, [r3, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	4619      	mov	r1, r3
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f002 f90f 	bl	801015c <USBH_LL_SetToggle>

  return USBH_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	bd90      	pop	{r4, r7, pc}

0800df48 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df56:	69db      	ldr	r3, [r3, #28]
 800df58:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00e      	beq.n	800df80 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f001 fe0c 	bl	800fb86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	4619      	mov	r1, r3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f001 fe37 	bl	800fbe8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	7b1b      	ldrb	r3, [r3, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00e      	beq.n	800dfa6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	7b1b      	ldrb	r3, [r3, #12]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fdf9 	bl	800fb86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	7b1b      	ldrb	r3, [r3, #12]
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f001 fe24 	bl	800fbe8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	7b5b      	ldrb	r3, [r3, #13]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00e      	beq.n	800dfcc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	7b5b      	ldrb	r3, [r3, #13]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f001 fde6 	bl	800fb86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	7b5b      	ldrb	r3, [r3, #13]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f001 fe11 	bl	800fbe8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfd2:	69db      	ldr	r3, [r3, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00b      	beq.n	800dff0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f002 f971 	bl	80102c8 <free>
    phost->pActiveClass->pData = 0U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfec:	2200      	movs	r2, #0
 800dfee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b084      	sub	sp, #16
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3340      	adds	r3, #64	; 0x40
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f8b1 	bl	800e17a <GetLineCoding>
 800e018:	4603      	mov	r3, r0
 800e01a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d105      	bne.n	800e02e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e028:	2102      	movs	r1, #2
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e02e:	7afb      	ldrb	r3, [r7, #11]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e040:	2301      	movs	r3, #1
 800e042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e04e:	69db      	ldr	r3, [r3, #28]
 800e050:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e058:	2b04      	cmp	r3, #4
 800e05a:	d877      	bhi.n	800e14c <USBH_CDC_Process+0x114>
 800e05c:	a201      	add	r2, pc, #4	; (adr r2, 800e064 <USBH_CDC_Process+0x2c>)
 800e05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e062:	bf00      	nop
 800e064:	0800e079 	.word	0x0800e079
 800e068:	0800e07f 	.word	0x0800e07f
 800e06c:	0800e0af 	.word	0x0800e0af
 800e070:	0800e123 	.word	0x0800e123
 800e074:	0800e131 	.word	0x0800e131
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	73fb      	strb	r3, [r7, #15]
      break;
 800e07c:	e06d      	b.n	800e15a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e082:	4619      	mov	r1, r3
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f897 	bl	800e1b8 <SetLineCoding>
 800e08a:	4603      	mov	r3, r0
 800e08c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2202      	movs	r2, #2
 800e098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e09c:	e058      	b.n	800e150 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d055      	beq.n	800e150 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2204      	movs	r2, #4
 800e0a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e0ac:	e050      	b.n	800e150 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	3340      	adds	r3, #64	; 0x40
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f860 	bl	800e17a <GetLineCoding>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e0be:	7bbb      	ldrb	r3, [r7, #14]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d126      	bne.n	800e112 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0d6:	791b      	ldrb	r3, [r3, #4]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d13b      	bne.n	800e154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d133      	bne.n	800e154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d12b      	bne.n	800e154 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e104:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e106:	429a      	cmp	r2, r3
 800e108:	d124      	bne.n	800e154 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f958 	bl	800e3c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e110:	e020      	b.n	800e154 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e112:	7bbb      	ldrb	r3, [r7, #14]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d01d      	beq.n	800e154 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2204      	movs	r2, #4
 800e11c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e120:	e018      	b.n	800e154 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f867 	bl	800e1f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f8da 	bl	800e2e2 <CDC_ProcessReception>
      break;
 800e12e:	e014      	b.n	800e15a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e130:	2100      	movs	r1, #0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f001 f80f 	bl	800f156 <USBH_ClrFeature>
 800e138:	4603      	mov	r3, r0
 800e13a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e13c:	7bbb      	ldrb	r3, [r7, #14]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10a      	bne.n	800e158 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e14a:	e005      	b.n	800e158 <USBH_CDC_Process+0x120>

    default:
      break;
 800e14c:	bf00      	nop
 800e14e:	e004      	b.n	800e15a <USBH_CDC_Process+0x122>
      break;
 800e150:	bf00      	nop
 800e152:	e002      	b.n	800e15a <USBH_CDC_Process+0x122>
      break;
 800e154:	bf00      	nop
 800e156:	e000      	b.n	800e15a <USBH_CDC_Process+0x122>
      break;
 800e158:	bf00      	nop

  }

  return status;
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	22a1      	movs	r2, #161	; 0xa1
 800e188:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2221      	movs	r2, #33	; 0x21
 800e18e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2207      	movs	r2, #7
 800e1a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2207      	movs	r2, #7
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f001 fa7b 	bl	800f6a4 <USBH_CtlReq>
 800e1ae:	4603      	mov	r3, r0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2221      	movs	r2, #33	; 0x21
 800e1c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2220      	movs	r2, #32
 800e1cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2207      	movs	r2, #7
 800e1de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	2207      	movs	r2, #7
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f001 fa5c 	bl	800f6a4 <USBH_CtlReq>
 800e1ec:	4603      	mov	r3, r0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b086      	sub	sp, #24
 800e1fa:	af02      	add	r7, sp, #8
 800e1fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e208:	2300      	movs	r3, #0
 800e20a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e212:	2b01      	cmp	r3, #1
 800e214:	d002      	beq.n	800e21c <CDC_ProcessTransmission+0x26>
 800e216:	2b02      	cmp	r3, #2
 800e218:	d023      	beq.n	800e262 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e21a:	e05e      	b.n	800e2da <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	8b12      	ldrh	r2, [r2, #24]
 800e224:	4293      	cmp	r3, r2
 800e226:	d90b      	bls.n	800e240 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	69d9      	ldr	r1, [r3, #28]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8b1a      	ldrh	r2, [r3, #24]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	7b5b      	ldrb	r3, [r3, #13]
 800e234:	2001      	movs	r0, #1
 800e236:	9000      	str	r0, [sp, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 fc42 	bl	800fac2 <USBH_BulkSendData>
 800e23e:	e00b      	b.n	800e258 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800e248:	b29a      	uxth	r2, r3
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	7b5b      	ldrb	r3, [r3, #13]
 800e24e:	2001      	movs	r0, #1
 800e250:	9000      	str	r0, [sp, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f001 fc35 	bl	800fac2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2202      	movs	r2, #2
 800e25c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e260:	e03b      	b.n	800e2da <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	7b5b      	ldrb	r3, [r3, #13]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f001 ff4d 	bl	8010108 <USBH_LL_GetURBState>
 800e26e:	4603      	mov	r3, r0
 800e270:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e272:	7afb      	ldrb	r3, [r7, #11]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d128      	bne.n	800e2ca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	8b12      	ldrh	r2, [r2, #24]
 800e280:	4293      	cmp	r3, r2
 800e282:	d90e      	bls.n	800e2a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	8b12      	ldrh	r2, [r2, #24]
 800e28c:	1a9a      	subs	r2, r3, r2
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	69db      	ldr	r3, [r3, #28]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	8b12      	ldrh	r2, [r2, #24]
 800e29a:	441a      	add	r2, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	61da      	str	r2, [r3, #28]
 800e2a0:	e002      	b.n	800e2a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e2b8:	e00e      	b.n	800e2d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f868 	bl	800e398 <USBH_CDC_TransmitCallback>
      break;
 800e2c8:	e006      	b.n	800e2d8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e2ca:	7afb      	ldrb	r3, [r7, #11]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d103      	bne.n	800e2d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e2d8:	bf00      	nop
  }
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b086      	sub	sp, #24
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2f0:	69db      	ldr	r3, [r3, #28]
 800e2f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d002      	beq.n	800e308 <CDC_ProcessReception+0x26>
 800e302:	2b04      	cmp	r3, #4
 800e304:	d00e      	beq.n	800e324 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e306:	e043      	b.n	800e390 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	6a19      	ldr	r1, [r3, #32]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	8b5a      	ldrh	r2, [r3, #26]
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	7b1b      	ldrb	r3, [r3, #12]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f001 fbf9 	bl	800fb0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2204      	movs	r2, #4
 800e31e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e322:	e035      	b.n	800e390 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	7b1b      	ldrb	r3, [r3, #12]
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f001 feec 	bl	8010108 <USBH_LL_GetURBState>
 800e330:	4603      	mov	r3, r0
 800e332:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e334:	7cfb      	ldrb	r3, [r7, #19]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d129      	bne.n	800e38e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	7b1b      	ldrb	r3, [r3, #12]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 fe4f 	bl	800ffe4 <USBH_LL_GetLastXferSize>
 800e346:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d016      	beq.n	800e380 <CDC_ProcessReception+0x9e>
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	8b5b      	ldrh	r3, [r3, #26]
 800e356:	461a      	mov	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d910      	bls.n	800e380 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	1ad2      	subs	r2, r2, r3
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	6a1a      	ldr	r2, [r3, #32]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	441a      	add	r2, r3
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	2203      	movs	r2, #3
 800e37a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e37e:	e006      	b.n	800e38e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f80f 	bl	800e3ac <USBH_CDC_ReceiveCallback>
      break;
 800e38e:	bf00      	nop
  }
}
 800e390:	bf00      	nop
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e029      	b.n	800e440 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	79fa      	ldrb	r2, [r7, #7]
 800e3f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f000 f81f 	bl	800e448 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d003      	beq.n	800e438 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f001 fd1f 	bl	800fe7c <USBH_LL_Init>

  return USBH_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e450:	2300      	movs	r3, #0
 800e452:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e454:	2300      	movs	r3, #0
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	e009      	b.n	800e46e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	33e0      	adds	r3, #224	; 0xe0
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3301      	adds	r3, #1
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b0f      	cmp	r3, #15
 800e472:	d9f2      	bls.n	800e45a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e474:	2300      	movs	r3, #0
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	e009      	b.n	800e48e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e484:	2200      	movs	r2, #0
 800e486:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3301      	adds	r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e494:	d3f1      	bcc.n	800e47a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2240      	movs	r2, #64	; 0x40
 800e4ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	331c      	adds	r3, #28
 800e4e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 fef3 	bl	80102d8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e4f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f001 feea 	bl	80102d8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f203 3326 	addw	r3, r3, #806	; 0x326
 800e50a:	2212      	movs	r2, #18
 800e50c:	2100      	movs	r1, #0
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fee2 	bl	80102d8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e51a:	223e      	movs	r2, #62	; 0x3e
 800e51c:	2100      	movs	r1, #0
 800e51e:	4618      	mov	r0, r3
 800e520:	f001 feda 	bl	80102d8 <memset>

  return USBH_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e52e:	b480      	push	{r7}
 800e530:	b085      	sub	sp, #20
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d016      	beq.n	800e570 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10e      	bne.n	800e56a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e552:	1c59      	adds	r1, r3, #1
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	33de      	adds	r3, #222	; 0xde
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	73fb      	strb	r3, [r7, #15]
 800e568:	e004      	b.n	800e574 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e56a:	2302      	movs	r3, #2
 800e56c:	73fb      	strb	r3, [r7, #15]
 800e56e:	e001      	b.n	800e574 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e570:	2302      	movs	r3, #2
 800e572:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e574:	7bfb      	ldrb	r3, [r7, #15]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr

0800e582 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e582:	b480      	push	{r7}
 800e584:	b085      	sub	sp, #20
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	460b      	mov	r3, r1
 800e58c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e598:	78fa      	ldrb	r2, [r7, #3]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d204      	bcs.n	800e5a8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	78fa      	ldrb	r2, [r7, #3]
 800e5a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e5a6:	e001      	b.n	800e5ac <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b087      	sub	sp, #28
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	4608      	mov	r0, r1
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	70fb      	strb	r3, [r7, #3]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70bb      	strb	r3, [r7, #2]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e5e2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e5e4:	e025      	b.n	800e632 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
 800e5e8:	221a      	movs	r2, #26
 800e5ea:	fb02 f303 	mul.w	r3, r2, r3
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	3302      	adds	r3, #2
 800e5f6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	795b      	ldrb	r3, [r3, #5]
 800e5fc:	78fa      	ldrb	r2, [r7, #3]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d002      	beq.n	800e608 <USBH_FindInterface+0x4e>
 800e602:	78fb      	ldrb	r3, [r7, #3]
 800e604:	2bff      	cmp	r3, #255	; 0xff
 800e606:	d111      	bne.n	800e62c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e60c:	78ba      	ldrb	r2, [r7, #2]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d002      	beq.n	800e618 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e612:	78bb      	ldrb	r3, [r7, #2]
 800e614:	2bff      	cmp	r3, #255	; 0xff
 800e616:	d109      	bne.n	800e62c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e61c:	787a      	ldrb	r2, [r7, #1]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d002      	beq.n	800e628 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e622:	787b      	ldrb	r3, [r7, #1]
 800e624:	2bff      	cmp	r3, #255	; 0xff
 800e626:	d101      	bne.n	800e62c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	e006      	b.n	800e63a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	3301      	adds	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d9d6      	bls.n	800e5e6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e638:	23ff      	movs	r3, #255	; 0xff
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	371c      	adds	r7, #28
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f001 fc50 	bl	800fef4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e654:	2101      	movs	r1, #1
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f001 fd69 	bl	801012e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
	...

0800e668 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b088      	sub	sp, #32
 800e66c:	af04      	add	r7, sp, #16
 800e66e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e670:	2302      	movs	r3, #2
 800e672:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e674:	2300      	movs	r3, #0
 800e676:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	2b01      	cmp	r3, #1
 800e682:	d102      	bne.n	800e68a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2203      	movs	r2, #3
 800e688:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	2b0b      	cmp	r3, #11
 800e692:	f200 81be 	bhi.w	800ea12 <USBH_Process+0x3aa>
 800e696:	a201      	add	r2, pc, #4	; (adr r2, 800e69c <USBH_Process+0x34>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e6cd 	.word	0x0800e6cd
 800e6a0:	0800e6ff 	.word	0x0800e6ff
 800e6a4:	0800e767 	.word	0x0800e767
 800e6a8:	0800e9ad 	.word	0x0800e9ad
 800e6ac:	0800ea13 	.word	0x0800ea13
 800e6b0:	0800e80b 	.word	0x0800e80b
 800e6b4:	0800e953 	.word	0x0800e953
 800e6b8:	0800e841 	.word	0x0800e841
 800e6bc:	0800e861 	.word	0x0800e861
 800e6c0:	0800e881 	.word	0x0800e881
 800e6c4:	0800e8c5 	.word	0x0800e8c5
 800e6c8:	0800e995 	.word	0x0800e995
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 819e 	beq.w	800ea16 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e6e0:	20c8      	movs	r0, #200	; 0xc8
 800e6e2:	f001 fd6b 	bl	80101bc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f001 fc61 	bl	800ffae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e6fc:	e18b      	b.n	800ea16 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e704:	2b01      	cmp	r3, #1
 800e706:	d107      	bne.n	800e718 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2202      	movs	r2, #2
 800e714:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e716:	e18d      	b.n	800ea34 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e71e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e722:	d914      	bls.n	800e74e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e72a:	3301      	adds	r3, #1
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d903      	bls.n	800e746 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	220d      	movs	r2, #13
 800e742:	701a      	strb	r2, [r3, #0]
      break;
 800e744:	e176      	b.n	800ea34 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	701a      	strb	r2, [r3, #0]
      break;
 800e74c:	e172      	b.n	800ea34 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e754:	f103 020a 	add.w	r2, r3, #10
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e75e:	200a      	movs	r0, #10
 800e760:	f001 fd2c 	bl	80101bc <USBH_Delay>
      break;
 800e764:	e166      	b.n	800ea34 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d005      	beq.n	800e77c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e776:	2104      	movs	r1, #4
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e77c:	2064      	movs	r0, #100	; 0x64
 800e77e:	f001 fd1d 	bl	80101bc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f001 fbec 	bl	800ff60 <USBH_LL_GetSpeed>
 800e788:	4603      	mov	r3, r0
 800e78a:	461a      	mov	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2205      	movs	r2, #5
 800e796:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e798:	2100      	movs	r1, #0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f001 fa03 	bl	800fba6 <USBH_AllocPipe>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e7a8:	2180      	movs	r1, #128	; 0x80
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 f9fb 	bl	800fba6 <USBH_AllocPipe>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	7919      	ldrb	r1, [r3, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e7cc:	b292      	uxth	r2, r2
 800e7ce:	9202      	str	r2, [sp, #8]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	9201      	str	r2, [sp, #4]
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2280      	movs	r2, #128	; 0x80
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f001 f9b4 	bl	800fb48 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7959      	ldrb	r1, [r3, #5]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	9202      	str	r2, [sp, #8]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	9201      	str	r2, [sp, #4]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4603      	mov	r3, r0
 800e800:	2200      	movs	r2, #0
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 f9a0 	bl	800fb48 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e808:	e114      	b.n	800ea34 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f918 	bl	800ea40 <USBH_HandleEnum>
 800e810:	4603      	mov	r3, r0
 800e812:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e814:	7bbb      	ldrb	r3, [r7, #14]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f040 80fe 	bne.w	800ea1a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d103      	bne.n	800e838 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2208      	movs	r2, #8
 800e834:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e836:	e0f0      	b.n	800ea1a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2207      	movs	r2, #7
 800e83c:	701a      	strb	r2, [r3, #0]
      break;
 800e83e:	e0ec      	b.n	800ea1a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80e9 	beq.w	800ea1e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e852:	2101      	movs	r1, #1
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2208      	movs	r2, #8
 800e85c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e85e:	e0de      	b.n	800ea1e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e866:	b29b      	uxth	r3, r3
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fc2c 	bl	800f0c8 <USBH_SetCfg>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	f040 80d5 	bne.w	800ea22 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2209      	movs	r2, #9
 800e87c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e87e:	e0d0      	b.n	800ea22 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e886:	f003 0320 	and.w	r3, r3, #32
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d016      	beq.n	800e8bc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e88e:	2101      	movs	r1, #1
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 fc3c 	bl	800f10e <USBH_SetFeature>
 800e896:	4603      	mov	r3, r0
 800e898:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d103      	bne.n	800e8aa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	220a      	movs	r2, #10
 800e8a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e8a8:	e0bd      	b.n	800ea26 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800e8aa:	7bbb      	ldrb	r3, [r7, #14]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	f040 80b9 	bne.w	800ea26 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	220a      	movs	r2, #10
 800e8b8:	701a      	strb	r2, [r3, #0]
      break;
 800e8ba:	e0b4      	b.n	800ea26 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	220a      	movs	r2, #10
 800e8c0:	701a      	strb	r2, [r3, #0]
      break;
 800e8c2:	e0b0      	b.n	800ea26 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 80ad 	beq.w	800ea2a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	73fb      	strb	r3, [r7, #15]
 800e8dc:	e016      	b.n	800e90c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e8de:	7bfa      	ldrb	r2, [r7, #15]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	32de      	adds	r2, #222	; 0xde
 800e8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e8:	791a      	ldrb	r2, [r3, #4]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d108      	bne.n	800e906 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e8f4:	7bfa      	ldrb	r2, [r7, #15]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	32de      	adds	r2, #222	; 0xde
 800e8fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e904:	e005      	b.n	800e912 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e906:	7bfb      	ldrb	r3, [r7, #15]
 800e908:	3301      	adds	r3, #1
 800e90a:	73fb      	strb	r3, [r7, #15]
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0e5      	beq.n	800e8de <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d016      	beq.n	800e94a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	4798      	blx	r3
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d109      	bne.n	800e942 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2206      	movs	r2, #6
 800e932:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e93a:	2103      	movs	r1, #3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e940:	e073      	b.n	800ea2a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	220d      	movs	r2, #13
 800e946:	701a      	strb	r2, [r3, #0]
      break;
 800e948:	e06f      	b.n	800ea2a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	220d      	movs	r2, #13
 800e94e:	701a      	strb	r2, [r3, #0]
      break;
 800e950:	e06b      	b.n	800ea2a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d017      	beq.n	800e98c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	4798      	blx	r3
 800e968:	4603      	mov	r3, r0
 800e96a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d103      	bne.n	800e97c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	220b      	movs	r2, #11
 800e978:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e97a:	e058      	b.n	800ea2e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b02      	cmp	r3, #2
 800e982:	d154      	bne.n	800ea2e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	220d      	movs	r2, #13
 800e988:	701a      	strb	r2, [r3, #0]
      break;
 800e98a:	e050      	b.n	800ea2e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	220d      	movs	r2, #13
 800e990:	701a      	strb	r2, [r3, #0]
      break;
 800e992:	e04c      	b.n	800ea2e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d049      	beq.n	800ea32 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
      }
      break;
 800e9aa:	e042      	b.n	800ea32 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff fd47 	bl	800e448 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d005      	beq.n	800e9ee <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9e8:	2105      	movs	r1, #5
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d107      	bne.n	800ea0a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff fe1f 	bl	800e646 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ea08:	e014      	b.n	800ea34 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 fa72 	bl	800fef4 <USBH_LL_Start>
      break;
 800ea10:	e010      	b.n	800ea34 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ea12:	bf00      	nop
 800ea14:	e00e      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea16:	bf00      	nop
 800ea18:	e00c      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea1a:	bf00      	nop
 800ea1c:	e00a      	b.n	800ea34 <USBH_Process+0x3cc>
    break;
 800ea1e:	bf00      	nop
 800ea20:	e008      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea22:	bf00      	nop
 800ea24:	e006      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea26:	bf00      	nop
 800ea28:	e004      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea2a:	bf00      	nop
 800ea2c:	e002      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea2e:	bf00      	nop
 800ea30:	e000      	b.n	800ea34 <USBH_Process+0x3cc>
      break;
 800ea32:	bf00      	nop
  }
  return USBH_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop

0800ea40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af04      	add	r7, sp, #16
 800ea46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	785b      	ldrb	r3, [r3, #1]
 800ea54:	2b07      	cmp	r3, #7
 800ea56:	f200 81c1 	bhi.w	800eddc <USBH_HandleEnum+0x39c>
 800ea5a:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <USBH_HandleEnum+0x20>)
 800ea5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea60:	0800ea81 	.word	0x0800ea81
 800ea64:	0800eb3f 	.word	0x0800eb3f
 800ea68:	0800eba9 	.word	0x0800eba9
 800ea6c:	0800ec37 	.word	0x0800ec37
 800ea70:	0800eca1 	.word	0x0800eca1
 800ea74:	0800ed11 	.word	0x0800ed11
 800ea78:	0800ed57 	.word	0x0800ed57
 800ea7c:	0800ed9d 	.word	0x0800ed9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ea80:	2108      	movs	r1, #8
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fa50 	bl	800ef28 <USBH_Get_DevDesc>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea8c:	7bbb      	ldrb	r3, [r7, #14]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d130      	bne.n	800eaf4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7919      	ldrb	r1, [r3, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eab6:	b292      	uxth	r2, r2
 800eab8:	9202      	str	r2, [sp, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	9201      	str	r2, [sp, #4]
 800eabe:	9300      	str	r3, [sp, #0]
 800eac0:	4603      	mov	r3, r0
 800eac2:	2280      	movs	r2, #128	; 0x80
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f001 f83f 	bl	800fb48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	7959      	ldrb	r1, [r3, #5]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eade:	b292      	uxth	r2, r2
 800eae0:	9202      	str	r2, [sp, #8]
 800eae2:	2200      	movs	r2, #0
 800eae4:	9201      	str	r2, [sp, #4]
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	4603      	mov	r3, r0
 800eaea:	2200      	movs	r2, #0
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f001 f82b 	bl	800fb48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eaf2:	e175      	b.n	800ede0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eaf4:	7bbb      	ldrb	r3, [r7, #14]
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	f040 8172 	bne.w	800ede0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb02:	3301      	adds	r3, #1
 800eb04:	b2da      	uxtb	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d903      	bls.n	800eb1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	220d      	movs	r2, #13
 800eb1a:	701a      	strb	r2, [r3, #0]
      break;
 800eb1c:	e160      	b.n	800ede0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	795b      	ldrb	r3, [r3, #5]
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f001 f85f 	bl	800fbe8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	791b      	ldrb	r3, [r3, #4]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 f859 	bl	800fbe8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	701a      	strb	r2, [r3, #0]
      break;
 800eb3c:	e150      	b.n	800ede0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eb3e:	2112      	movs	r1, #18
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f9f1 	bl	800ef28 <USBH_Get_DevDesc>
 800eb46:	4603      	mov	r3, r0
 800eb48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eb4a:	7bbb      	ldrb	r3, [r7, #14]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d103      	bne.n	800eb58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2202      	movs	r2, #2
 800eb54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eb56:	e145      	b.n	800ede4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb58:	7bbb      	ldrb	r3, [r7, #14]
 800eb5a:	2b03      	cmp	r3, #3
 800eb5c:	f040 8142 	bne.w	800ede4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb66:	3301      	adds	r3, #1
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d903      	bls.n	800eb82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	220d      	movs	r2, #13
 800eb7e:	701a      	strb	r2, [r3, #0]
      break;
 800eb80:	e130      	b.n	800ede4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	795b      	ldrb	r3, [r3, #5]
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 f82d 	bl	800fbe8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	791b      	ldrb	r3, [r3, #4]
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f827 	bl	800fbe8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	701a      	strb	r2, [r3, #0]
      break;
 800eba6:	e11d      	b.n	800ede4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eba8:	2101      	movs	r1, #1
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa68 	bl	800f080 <USBH_SetAddress>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ebb4:	7bbb      	ldrb	r3, [r7, #14]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d132      	bne.n	800ec20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ebba:	2002      	movs	r0, #2
 800ebbc:	f001 fafe 	bl	80101bc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2203      	movs	r2, #3
 800ebcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	7919      	ldrb	r1, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ebe2:	b292      	uxth	r2, r2
 800ebe4:	9202      	str	r2, [sp, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	9201      	str	r2, [sp, #4]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	4603      	mov	r3, r0
 800ebee:	2280      	movs	r2, #128	; 0x80
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 ffa9 	bl	800fb48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	7959      	ldrb	r1, [r3, #5]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ec0a:	b292      	uxth	r2, r2
 800ec0c:	9202      	str	r2, [sp, #8]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	9201      	str	r2, [sp, #4]
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	4603      	mov	r3, r0
 800ec16:	2200      	movs	r2, #0
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 ff95 	bl	800fb48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ec1e:	e0e3      	b.n	800ede8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec20:	7bbb      	ldrb	r3, [r7, #14]
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	f040 80e0 	bne.w	800ede8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	220d      	movs	r2, #13
 800ec2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	705a      	strb	r2, [r3, #1]
      break;
 800ec34:	e0d8      	b.n	800ede8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ec36:	2109      	movs	r1, #9
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f99d 	bl	800ef78 <USBH_Get_CfgDesc>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec42:	7bbb      	ldrb	r3, [r7, #14]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d103      	bne.n	800ec50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2204      	movs	r2, #4
 800ec4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec4e:	e0cd      	b.n	800edec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec50:	7bbb      	ldrb	r3, [r7, #14]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	f040 80ca 	bne.w	800edec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec5e:	3301      	adds	r3, #1
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d903      	bls.n	800ec7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	220d      	movs	r2, #13
 800ec76:	701a      	strb	r2, [r3, #0]
      break;
 800ec78:	e0b8      	b.n	800edec <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	795b      	ldrb	r3, [r3, #5]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 ffb1 	bl	800fbe8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	791b      	ldrb	r3, [r3, #4]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 ffab 	bl	800fbe8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	701a      	strb	r2, [r3, #0]
      break;
 800ec9e:	e0a5      	b.n	800edec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800eca6:	4619      	mov	r1, r3
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 f965 	bl	800ef78 <USBH_Get_CfgDesc>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ecb2:	7bbb      	ldrb	r3, [r7, #14]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d103      	bne.n	800ecc0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2205      	movs	r2, #5
 800ecbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ecbe:	e097      	b.n	800edf0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	f040 8094 	bne.w	800edf0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecce:	3301      	adds	r3, #1
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecde:	2b03      	cmp	r3, #3
 800ece0:	d903      	bls.n	800ecea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	220d      	movs	r2, #13
 800ece6:	701a      	strb	r2, [r3, #0]
      break;
 800ece8:	e082      	b.n	800edf0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	795b      	ldrb	r3, [r3, #5]
 800ecee:	4619      	mov	r1, r3
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 ff79 	bl	800fbe8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	791b      	ldrb	r3, [r3, #4]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 ff73 	bl	800fbe8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
      break;
 800ed0e:	e06f      	b.n	800edf0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d019      	beq.n	800ed4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed26:	23ff      	movs	r3, #255	; 0xff
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f000 f949 	bl	800efc0 <USBH_Get_StringDesc>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed32:	7bbb      	ldrb	r3, [r7, #14]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d103      	bne.n	800ed40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2206      	movs	r2, #6
 800ed3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ed3e:	e059      	b.n	800edf4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d156      	bne.n	800edf4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2206      	movs	r2, #6
 800ed4a:	705a      	strb	r2, [r3, #1]
      break;
 800ed4c:	e052      	b.n	800edf4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2206      	movs	r2, #6
 800ed52:	705a      	strb	r2, [r3, #1]
      break;
 800ed54:	e04e      	b.n	800edf4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d019      	beq.n	800ed94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed6c:	23ff      	movs	r3, #255	; 0xff
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f926 	bl	800efc0 <USBH_Get_StringDesc>
 800ed74:	4603      	mov	r3, r0
 800ed76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed78:	7bbb      	ldrb	r3, [r7, #14]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d103      	bne.n	800ed86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2207      	movs	r2, #7
 800ed82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ed84:	e038      	b.n	800edf8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed86:	7bbb      	ldrb	r3, [r7, #14]
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d135      	bne.n	800edf8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2207      	movs	r2, #7
 800ed90:	705a      	strb	r2, [r3, #1]
      break;
 800ed92:	e031      	b.n	800edf8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2207      	movs	r2, #7
 800ed98:	705a      	strb	r2, [r3, #1]
      break;
 800ed9a:	e02d      	b.n	800edf8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d017      	beq.n	800edd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800edb2:	23ff      	movs	r3, #255	; 0xff
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f903 	bl	800efc0 <USBH_Get_StringDesc>
 800edba:	4603      	mov	r3, r0
 800edbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800edbe:	7bbb      	ldrb	r3, [r7, #14]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d102      	bne.n	800edca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800edc8:	e018      	b.n	800edfc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800edca:	7bbb      	ldrb	r3, [r7, #14]
 800edcc:	2b03      	cmp	r3, #3
 800edce:	d115      	bne.n	800edfc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73fb      	strb	r3, [r7, #15]
      break;
 800edd4:	e012      	b.n	800edfc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73fb      	strb	r3, [r7, #15]
      break;
 800edda:	e00f      	b.n	800edfc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800eddc:	bf00      	nop
 800edde:	e00e      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800ede0:	bf00      	nop
 800ede2:	e00c      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800ede4:	bf00      	nop
 800ede6:	e00a      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800ede8:	bf00      	nop
 800edea:	e008      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800edec:	bf00      	nop
 800edee:	e006      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800edf0:	bf00      	nop
 800edf2:	e004      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800edf4:	bf00      	nop
 800edf6:	e002      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800edf8:	bf00      	nop
 800edfa:	e000      	b.n	800edfe <USBH_HandleEnum+0x3be>
      break;
 800edfc:	bf00      	nop
  }
  return Status;
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b082      	sub	sp, #8
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 f804 	bl	800ee4a <USBH_HandleSof>
}
 800ee42:	bf00      	nop
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b082      	sub	sp, #8
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b0b      	cmp	r3, #11
 800ee5a:	d10a      	bne.n	800ee72 <USBH_HandleSof+0x28>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d005      	beq.n	800ee72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	4798      	blx	r3
  }
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b083      	sub	sp, #12
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ee8a:	bf00      	nop
}
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr

0800ee96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ee96:	b480      	push	{r7}
 800ee98:	b083      	sub	sp, #12
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2200      	movs	r2, #0
 800eea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800eea6:	bf00      	nop
}
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eeb2:	b480      	push	{r7}
 800eeb4:	b083      	sub	sp, #12
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f001 f812 	bl	800ff2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	791b      	ldrb	r3, [r3, #4]
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 fe6b 	bl	800fbe8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	795b      	ldrb	r3, [r3, #5]
 800ef16:	4619      	mov	r1, r3
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fe65 	bl	800fbe8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	460b      	mov	r3, r1
 800ef32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ef3a:	78fb      	ldrb	r3, [r7, #3]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	4613      	mov	r3, r2
 800ef42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef46:	2100      	movs	r1, #0
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f864 	bl	800f016 <USBH_GetDescriptor>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10a      	bne.n	800ef6e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ef64:	78fa      	ldrb	r2, [r7, #3]
 800ef66:	b292      	uxth	r2, r2
 800ef68:	4619      	mov	r1, r3
 800ef6a:	f000 f919 	bl	800f1a0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	331c      	adds	r3, #28
 800ef88:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ef8a:	887b      	ldrh	r3, [r7, #2]
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef94:	2100      	movs	r1, #0
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 f83d 	bl	800f016 <USBH_GetDescriptor>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d107      	bne.n	800efb6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800efa6:	887b      	ldrh	r3, [r7, #2]
 800efa8:	461a      	mov	r2, r3
 800efaa:	68b9      	ldr	r1, [r7, #8]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f987 	bl	800f2c0 <USBH_ParseCfgDesc>
 800efb2:	4603      	mov	r3, r0
 800efb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800efb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b088      	sub	sp, #32
 800efc4:	af02      	add	r7, sp, #8
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	607a      	str	r2, [r7, #4]
 800efca:	461a      	mov	r2, r3
 800efcc:	460b      	mov	r3, r1
 800efce:	72fb      	strb	r3, [r7, #11]
 800efd0:	4613      	mov	r3, r2
 800efd2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800efd4:	7afb      	ldrb	r3, [r7, #11]
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800efdc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800efe4:	893b      	ldrh	r3, [r7, #8]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	460b      	mov	r3, r1
 800efea:	2100      	movs	r1, #0
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f000 f812 	bl	800f016 <USBH_GetDescriptor>
 800eff2:	4603      	mov	r3, r0
 800eff4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800eff6:	7dfb      	ldrb	r3, [r7, #23]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d107      	bne.n	800f00c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f002:	893a      	ldrh	r2, [r7, #8]
 800f004:	6879      	ldr	r1, [r7, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	f000 fafe 	bl	800f608 <USBH_ParseStringDesc>
  }

  return status;
 800f00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3718      	adds	r7, #24
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b084      	sub	sp, #16
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	60f8      	str	r0, [r7, #12]
 800f01e:	607b      	str	r3, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	72fb      	strb	r3, [r7, #11]
 800f024:	4613      	mov	r3, r2
 800f026:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	789b      	ldrb	r3, [r3, #2]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d11c      	bne.n	800f06a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f030:	7afb      	ldrb	r3, [r7, #11]
 800f032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f036:	b2da      	uxtb	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2206      	movs	r2, #6
 800f040:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	893a      	ldrh	r2, [r7, #8]
 800f046:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f048:	893b      	ldrh	r3, [r7, #8]
 800f04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f04e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f052:	d104      	bne.n	800f05e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f240 4209 	movw	r2, #1033	; 0x409
 800f05a:	829a      	strh	r2, [r3, #20]
 800f05c:	e002      	b.n	800f064 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	8b3a      	ldrh	r2, [r7, #24]
 800f068:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f06a:	8b3b      	ldrh	r3, [r7, #24]
 800f06c:	461a      	mov	r2, r3
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f000 fb17 	bl	800f6a4 <USBH_CtlReq>
 800f076:	4603      	mov	r3, r0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	460b      	mov	r3, r1
 800f08a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	789b      	ldrb	r3, [r3, #2]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d10f      	bne.n	800f0b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2205      	movs	r2, #5
 800f09e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 faf3 	bl	800f6a4 <USBH_CtlReq>
 800f0be:	4603      	mov	r3, r0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	789b      	ldrb	r3, [r3, #2]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d10e      	bne.n	800f0fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2209      	movs	r2, #9
 800f0e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	887a      	ldrh	r2, [r7, #2]
 800f0ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fad0 	bl	800f6a4 <USBH_CtlReq>
 800f104:	4603      	mov	r3, r0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	460b      	mov	r3, r1
 800f118:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	789b      	ldrb	r3, [r3, #2]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d10f      	bne.n	800f142 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2203      	movs	r2, #3
 800f12c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f12e:	78fb      	ldrb	r3, [r7, #3]
 800f130:	b29a      	uxth	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f142:	2200      	movs	r2, #0
 800f144:	2100      	movs	r1, #0
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 faac 	bl	800f6a4 <USBH_CtlReq>
 800f14c:	4603      	mov	r3, r0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b082      	sub	sp, #8
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	460b      	mov	r3, r1
 800f160:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	789b      	ldrb	r3, [r3, #2]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d10f      	bne.n	800f18a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2202      	movs	r2, #2
 800f16e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f17c:	78fb      	ldrb	r3, [r7, #3]
 800f17e:	b29a      	uxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800f18a:	2200      	movs	r2, #0
 800f18c:	2100      	movs	r1, #0
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fa88 	bl	800f6a4 <USBH_CtlReq>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	781a      	ldrb	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	785a      	ldrb	r2, [r3, #1]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	3302      	adds	r3, #2
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	3303      	adds	r3, #3
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	791a      	ldrb	r2, [r3, #4]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	795a      	ldrb	r2, [r3, #5]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	799a      	ldrb	r2, [r3, #6]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	79da      	ldrb	r2, [r3, #7]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	79db      	ldrb	r3, [r3, #7]
 800f1fe:	2b20      	cmp	r3, #32
 800f200:	dc0e      	bgt.n	800f220 <USBH_ParseDevDesc+0x80>
 800f202:	2b08      	cmp	r3, #8
 800f204:	db13      	blt.n	800f22e <USBH_ParseDevDesc+0x8e>
 800f206:	3b08      	subs	r3, #8
 800f208:	2201      	movs	r2, #1
 800f20a:	409a      	lsls	r2, r3
 800f20c:	4b2b      	ldr	r3, [pc, #172]	; (800f2bc <USBH_ParseDevDesc+0x11c>)
 800f20e:	4013      	ands	r3, r2
 800f210:	2b00      	cmp	r3, #0
 800f212:	bf14      	ite	ne
 800f214:	2301      	movne	r3, #1
 800f216:	2300      	moveq	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <USBH_ParseDevDesc+0x84>
 800f21e:	e006      	b.n	800f22e <USBH_ParseDevDesc+0x8e>
 800f220:	2b40      	cmp	r3, #64	; 0x40
 800f222:	d104      	bne.n	800f22e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	79da      	ldrb	r2, [r3, #7]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	71da      	strb	r2, [r3, #7]
      break;
 800f22c:	e003      	b.n	800f236 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2240      	movs	r2, #64	; 0x40
 800f232:	71da      	strb	r2, [r3, #7]
      break;
 800f234:	bf00      	nop
  }

  if (length > 8U)
 800f236:	88fb      	ldrh	r3, [r7, #6]
 800f238:	2b08      	cmp	r3, #8
 800f23a:	d939      	bls.n	800f2b0 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	3308      	adds	r3, #8
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	b29a      	uxth	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	3309      	adds	r3, #9
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	b29b      	uxth	r3, r3
 800f250:	4313      	orrs	r3, r2
 800f252:	b29a      	uxth	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	330a      	adds	r3, #10
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	b29a      	uxth	r2, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	330b      	adds	r3, #11
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	b29b      	uxth	r3, r3
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	4313      	orrs	r3, r2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	330c      	adds	r3, #12
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	330d      	adds	r3, #13
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	b29b      	uxth	r3, r3
 800f284:	021b      	lsls	r3, r3, #8
 800f286:	b29b      	uxth	r3, r3
 800f288:	4313      	orrs	r3, r2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	7b9a      	ldrb	r2, [r3, #14]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	7bda      	ldrb	r2, [r3, #15]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	7c1a      	ldrb	r2, [r3, #16]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	7c5a      	ldrb	r2, [r3, #17]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	745a      	strb	r2, [r3, #17]
  }
}
 800f2b0:	bf00      	nop
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	01000101 	.word	0x01000101

0800f2c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b08c      	sub	sp, #48	; 0x30
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f2d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	781a      	ldrb	r2, [r3, #0]
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	785a      	ldrb	r2, [r3, #1]
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	3302      	adds	r3, #2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	b29a      	uxth	r2, r3
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	3303      	adds	r3, #3
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	b29b      	uxth	r3, r3
 800f310:	021b      	lsls	r3, r3, #8
 800f312:	b29b      	uxth	r3, r3
 800f314:	4313      	orrs	r3, r2
 800f316:	b29b      	uxth	r3, r3
 800f318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f31c:	bf28      	it	cs
 800f31e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800f322:	b29a      	uxth	r2, r3
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	791a      	ldrb	r2, [r3, #4]
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	795a      	ldrb	r2, [r3, #5]
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	799a      	ldrb	r2, [r3, #6]
 800f33c:	6a3b      	ldr	r3, [r7, #32]
 800f33e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	79da      	ldrb	r2, [r3, #7]
 800f344:	6a3b      	ldr	r3, [r7, #32]
 800f346:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	7a1a      	ldrb	r2, [r3, #8]
 800f34c:	6a3b      	ldr	r3, [r7, #32]
 800f34e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800f350:	6a3b      	ldr	r3, [r7, #32]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	2b09      	cmp	r3, #9
 800f356:	d002      	beq.n	800f35e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	2209      	movs	r2, #9
 800f35c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f35e:	88fb      	ldrh	r3, [r7, #6]
 800f360:	2b09      	cmp	r3, #9
 800f362:	f240 8099 	bls.w	800f498 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 800f366:	2309      	movs	r3, #9
 800f368:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f36e:	e07d      	b.n	800f46c <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f370:	f107 0316 	add.w	r3, r7, #22
 800f374:	4619      	mov	r1, r3
 800f376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f378:	f000 f979 	bl	800f66e <USBH_GetNextDesc>
 800f37c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	785b      	ldrb	r3, [r3, #1]
 800f382:	2b04      	cmp	r3, #4
 800f384:	d172      	bne.n	800f46c <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b09      	cmp	r3, #9
 800f38c:	d002      	beq.n	800f394 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	2209      	movs	r2, #9
 800f392:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f398:	221a      	movs	r2, #26
 800f39a:	fb02 f303 	mul.w	r3, r2, r3
 800f39e:	3308      	adds	r3, #8
 800f3a0:	6a3a      	ldr	r2, [r7, #32]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	3302      	adds	r3, #2
 800f3a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f3a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3aa:	69f8      	ldr	r0, [r7, #28]
 800f3ac:	f000 f87a 	bl	800f4a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f3ba:	e03f      	b.n	800f43c <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f3bc:	f107 0316 	add.w	r3, r7, #22
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3c4:	f000 f953 	bl	800f66e <USBH_GetNextDesc>
 800f3c8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	785b      	ldrb	r3, [r3, #1]
 800f3ce:	2b05      	cmp	r3, #5
 800f3d0:	d134      	bne.n	800f43c <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	795b      	ldrb	r3, [r3, #5]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d10f      	bne.n	800f3fa <USBH_ParseCfgDesc+0x13a>
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	799b      	ldrb	r3, [r3, #6]
 800f3de:	2b02      	cmp	r3, #2
 800f3e0:	d10b      	bne.n	800f3fa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	79db      	ldrb	r3, [r3, #7]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10b      	bne.n	800f402 <USBH_ParseCfgDesc+0x142>
 800f3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	2b09      	cmp	r3, #9
 800f3f0:	d007      	beq.n	800f402 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 800f3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f4:	2209      	movs	r2, #9
 800f3f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f3f8:	e003      	b.n	800f402 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fc:	2207      	movs	r2, #7
 800f3fe:	701a      	strb	r2, [r3, #0]
 800f400:	e000      	b.n	800f404 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f402:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f408:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f40c:	3201      	adds	r2, #1
 800f40e:	00d2      	lsls	r2, r2, #3
 800f410:	211a      	movs	r1, #26
 800f412:	fb01 f303 	mul.w	r3, r1, r3
 800f416:	4413      	add	r3, r2
 800f418:	3308      	adds	r3, #8
 800f41a:	6a3a      	ldr	r2, [r7, #32]
 800f41c:	4413      	add	r3, r2
 800f41e:	3304      	adds	r3, #4
 800f420:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f424:	69b9      	ldr	r1, [r7, #24]
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f000 f86c 	bl	800f504 <USBH_ParseEPDesc>
 800f42c:	4603      	mov	r3, r0
 800f42e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f436:	3301      	adds	r3, #1
 800f438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	791b      	ldrb	r3, [r3, #4]
 800f440:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f444:	429a      	cmp	r2, r3
 800f446:	d204      	bcs.n	800f452 <USBH_ParseCfgDesc+0x192>
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	885a      	ldrh	r2, [r3, #2]
 800f44c:	8afb      	ldrh	r3, [r7, #22]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d8b4      	bhi.n	800f3bc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	791b      	ldrb	r3, [r3, #4]
 800f456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d201      	bcs.n	800f462 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 800f45e:	2303      	movs	r3, #3
 800f460:	e01c      	b.n	800f49c <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 800f462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f466:	3301      	adds	r3, #1
 800f468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f470:	2b01      	cmp	r3, #1
 800f472:	d805      	bhi.n	800f480 <USBH_ParseCfgDesc+0x1c0>
 800f474:	6a3b      	ldr	r3, [r7, #32]
 800f476:	885a      	ldrh	r2, [r3, #2]
 800f478:	8afb      	ldrh	r3, [r7, #22]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	f63f af78 	bhi.w	800f370 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	791b      	ldrb	r3, [r3, #4]
 800f484:	2b02      	cmp	r3, #2
 800f486:	bf28      	it	cs
 800f488:	2302      	movcs	r3, #2
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f490:	429a      	cmp	r2, r3
 800f492:	d201      	bcs.n	800f498 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 800f494:	2303      	movs	r3, #3
 800f496:	e001      	b.n	800f49c <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 800f498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3730      	adds	r7, #48	; 0x30
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	781a      	ldrb	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	785a      	ldrb	r2, [r3, #1]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	789a      	ldrb	r2, [r3, #2]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	78da      	ldrb	r2, [r3, #3]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	791a      	ldrb	r2, [r3, #4]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	795a      	ldrb	r2, [r3, #5]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	799a      	ldrb	r2, [r3, #6]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	79da      	ldrb	r2, [r3, #7]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	7a1a      	ldrb	r2, [r3, #8]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	721a      	strb	r2, [r3, #8]
}
 800f4f6:	bf00      	nop
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
	...

0800f504 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 800f504:	b480      	push	{r7}
 800f506:	b087      	sub	sp, #28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	781a      	ldrb	r2, [r3, #0]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	785a      	ldrb	r2, [r3, #1]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	789a      	ldrb	r2, [r3, #2]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	78da      	ldrb	r2, [r3, #3]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3304      	adds	r3, #4
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	3305      	adds	r3, #5
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	b29b      	uxth	r3, r3
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	b29b      	uxth	r3, r3
 800f548:	4313      	orrs	r3, r2
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	799a      	ldrb	r2, [r3, #6]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	889b      	ldrh	r3, [r3, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d102      	bne.n	800f566 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f560:	2303      	movs	r3, #3
 800f562:	75fb      	strb	r3, [r7, #23]
 800f564:	e00d      	b.n	800f582 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	889a      	ldrh	r2, [r3, #4]
 800f56a:	4b26      	ldr	r3, [pc, #152]	; (800f604 <USBH_ParseEPDesc+0x100>)
 800f56c:	4013      	ands	r3, r2
 800f56e:	b29a      	uxth	r2, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	889b      	ldrh	r3, [r3, #4]
 800f578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d116      	bne.n	800f5ba <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	78db      	ldrb	r3, [r3, #3]
 800f590:	f003 0303 	and.w	r3, r3, #3
 800f594:	2b01      	cmp	r3, #1
 800f596:	d005      	beq.n	800f5a4 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	78db      	ldrb	r3, [r3, #3]
 800f59c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f5a0:	2b03      	cmp	r3, #3
 800f5a2:	d127      	bne.n	800f5f4 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	799b      	ldrb	r3, [r3, #6]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <USBH_ParseEPDesc+0xb0>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	799b      	ldrb	r3, [r3, #6]
 800f5b0:	2b10      	cmp	r3, #16
 800f5b2:	d91f      	bls.n	800f5f4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	75fb      	strb	r3, [r7, #23]
 800f5b8:	e01c      	b.n	800f5f4 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	78db      	ldrb	r3, [r3, #3]
 800f5be:	f003 0303 	and.w	r3, r3, #3
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d10a      	bne.n	800f5dc <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	799b      	ldrb	r3, [r3, #6]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d003      	beq.n	800f5d6 <USBH_ParseEPDesc+0xd2>
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	799b      	ldrb	r3, [r3, #6]
 800f5d2:	2b10      	cmp	r3, #16
 800f5d4:	d90e      	bls.n	800f5f4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	75fb      	strb	r3, [r7, #23]
 800f5da:	e00b      	b.n	800f5f4 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	78db      	ldrb	r3, [r3, #3]
 800f5e0:	f003 0303 	and.w	r3, r3, #3
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d105      	bne.n	800f5f4 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	799b      	ldrb	r3, [r3, #6]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d101      	bne.n	800f5f4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	371c      	adds	r7, #28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop
 800f604:	fffff800 	.word	0xfffff800

0800f608 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	4613      	mov	r3, r2
 800f614:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b03      	cmp	r3, #3
 800f61e:	d120      	bne.n	800f662 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	1e9a      	subs	r2, r3, #2
 800f626:	88fb      	ldrh	r3, [r7, #6]
 800f628:	4293      	cmp	r3, r2
 800f62a:	bf28      	it	cs
 800f62c:	4613      	movcs	r3, r2
 800f62e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3302      	adds	r3, #2
 800f634:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f636:	2300      	movs	r3, #0
 800f638:	82fb      	strh	r3, [r7, #22]
 800f63a:	e00b      	b.n	800f654 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f63c:	8afb      	ldrh	r3, [r7, #22]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	4413      	add	r3, r2
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	3301      	adds	r3, #1
 800f64c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f64e:	8afb      	ldrh	r3, [r7, #22]
 800f650:	3302      	adds	r3, #2
 800f652:	82fb      	strh	r3, [r7, #22]
 800f654:	8afa      	ldrh	r2, [r7, #22]
 800f656:	8abb      	ldrh	r3, [r7, #20]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d3ef      	bcc.n	800f63c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	2200      	movs	r2, #0
 800f660:	701a      	strb	r2, [r3, #0]
  }
}
 800f662:	bf00      	nop
 800f664:	371c      	adds	r7, #28
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f66e:	b480      	push	{r7}
 800f670:	b085      	sub	sp, #20
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	881a      	ldrh	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	b29b      	uxth	r3, r3
 800f682:	4413      	add	r3, r2
 800f684:	b29a      	uxth	r2, r3
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4413      	add	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f696:	68fb      	ldr	r3, [r7, #12]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3714      	adds	r7, #20
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	789b      	ldrb	r3, [r3, #2]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d002      	beq.n	800f6c4 <USBH_CtlReq+0x20>
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d00f      	beq.n	800f6e2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f6c2:	e027      	b.n	800f714 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	88fa      	ldrh	r2, [r7, #6]
 800f6ce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2202      	movs	r2, #2
 800f6da:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	75fb      	strb	r3, [r7, #23]
      break;
 800f6e0:	e018      	b.n	800f714 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 f81c 	bl	800f720 <USBH_HandleControl>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d002      	beq.n	800f6f8 <USBH_CtlReq+0x54>
 800f6f2:	7dfb      	ldrb	r3, [r7, #23]
 800f6f4:	2b03      	cmp	r3, #3
 800f6f6:	d106      	bne.n	800f706 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	761a      	strb	r2, [r3, #24]
      break;
 800f704:	e005      	b.n	800f712 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f706:	7dfb      	ldrb	r3, [r7, #23]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d102      	bne.n	800f712 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2201      	movs	r2, #1
 800f710:	709a      	strb	r2, [r3, #2]
      break;
 800f712:	bf00      	nop
  }
  return status;
 800f714:	7dfb      	ldrb	r3, [r7, #23]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
	...

0800f720 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af02      	add	r7, sp, #8
 800f726:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f728:	2301      	movs	r3, #1
 800f72a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	7e1b      	ldrb	r3, [r3, #24]
 800f734:	3b01      	subs	r3, #1
 800f736:	2b0a      	cmp	r3, #10
 800f738:	f200 8156 	bhi.w	800f9e8 <USBH_HandleControl+0x2c8>
 800f73c:	a201      	add	r2, pc, #4	; (adr r2, 800f744 <USBH_HandleControl+0x24>)
 800f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f742:	bf00      	nop
 800f744:	0800f771 	.word	0x0800f771
 800f748:	0800f78b 	.word	0x0800f78b
 800f74c:	0800f7f5 	.word	0x0800f7f5
 800f750:	0800f81b 	.word	0x0800f81b
 800f754:	0800f853 	.word	0x0800f853
 800f758:	0800f87d 	.word	0x0800f87d
 800f75c:	0800f8cf 	.word	0x0800f8cf
 800f760:	0800f8f1 	.word	0x0800f8f1
 800f764:	0800f92d 	.word	0x0800f92d
 800f768:	0800f953 	.word	0x0800f953
 800f76c:	0800f991 	.word	0x0800f991
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f103 0110 	add.w	r1, r3, #16
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	795b      	ldrb	r3, [r3, #5]
 800f77a:	461a      	mov	r2, r3
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f943 	bl	800fa08 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2202      	movs	r2, #2
 800f786:	761a      	strb	r2, [r3, #24]
      break;
 800f788:	e139      	b.n	800f9fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	795b      	ldrb	r3, [r3, #5]
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fcb9 	bl	8010108 <USBH_LL_GetURBState>
 800f796:	4603      	mov	r3, r0
 800f798:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f79a:	7bbb      	ldrb	r3, [r7, #14]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d11e      	bne.n	800f7de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7c1b      	ldrb	r3, [r3, #16]
 800f7a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f7a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	8adb      	ldrh	r3, [r3, #22]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f7b2:	7b7b      	ldrb	r3, [r7, #13]
 800f7b4:	2b80      	cmp	r3, #128	; 0x80
 800f7b6:	d103      	bne.n	800f7c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2203      	movs	r2, #3
 800f7bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f7be:	e115      	b.n	800f9ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2205      	movs	r2, #5
 800f7c4:	761a      	strb	r2, [r3, #24]
      break;
 800f7c6:	e111      	b.n	800f9ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f7c8:	7b7b      	ldrb	r3, [r7, #13]
 800f7ca:	2b80      	cmp	r3, #128	; 0x80
 800f7cc:	d103      	bne.n	800f7d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2209      	movs	r2, #9
 800f7d2:	761a      	strb	r2, [r3, #24]
      break;
 800f7d4:	e10a      	b.n	800f9ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2207      	movs	r2, #7
 800f7da:	761a      	strb	r2, [r3, #24]
      break;
 800f7dc:	e106      	b.n	800f9ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f7de:	7bbb      	ldrb	r3, [r7, #14]
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d003      	beq.n	800f7ec <USBH_HandleControl+0xcc>
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	f040 8100 	bne.w	800f9ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	220b      	movs	r2, #11
 800f7f0:	761a      	strb	r2, [r3, #24]
      break;
 800f7f2:	e0fb      	b.n	800f9ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6899      	ldr	r1, [r3, #8]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	899a      	ldrh	r2, [r3, #12]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	791b      	ldrb	r3, [r3, #4]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f93a 	bl	800fa86 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2204      	movs	r2, #4
 800f816:	761a      	strb	r2, [r3, #24]
      break;
 800f818:	e0f1      	b.n	800f9fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	791b      	ldrb	r3, [r3, #4]
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 fc71 	bl	8010108 <USBH_LL_GetURBState>
 800f826:	4603      	mov	r3, r0
 800f828:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f82a:	7bbb      	ldrb	r3, [r7, #14]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d102      	bne.n	800f836 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2209      	movs	r2, #9
 800f834:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f836:	7bbb      	ldrb	r3, [r7, #14]
 800f838:	2b05      	cmp	r3, #5
 800f83a:	d102      	bne.n	800f842 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f83c:	2303      	movs	r3, #3
 800f83e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f840:	e0d6      	b.n	800f9f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f842:	7bbb      	ldrb	r3, [r7, #14]
 800f844:	2b04      	cmp	r3, #4
 800f846:	f040 80d3 	bne.w	800f9f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	220b      	movs	r2, #11
 800f84e:	761a      	strb	r2, [r3, #24]
      break;
 800f850:	e0ce      	b.n	800f9f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6899      	ldr	r1, [r3, #8]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	899a      	ldrh	r2, [r3, #12]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	795b      	ldrb	r3, [r3, #5]
 800f85e:	2001      	movs	r0, #1
 800f860:	9000      	str	r0, [sp, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f8ea 	bl	800fa3c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2206      	movs	r2, #6
 800f878:	761a      	strb	r2, [r3, #24]
      break;
 800f87a:	e0c0      	b.n	800f9fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	795b      	ldrb	r3, [r3, #5]
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fc40 	bl	8010108 <USBH_LL_GetURBState>
 800f888:	4603      	mov	r3, r0
 800f88a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f88c:	7bbb      	ldrb	r3, [r7, #14]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d103      	bne.n	800f89a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2207      	movs	r2, #7
 800f896:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f898:	e0ac      	b.n	800f9f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f89a:	7bbb      	ldrb	r3, [r7, #14]
 800f89c:	2b05      	cmp	r3, #5
 800f89e:	d105      	bne.n	800f8ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	220c      	movs	r2, #12
 800f8a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f8a6:	2303      	movs	r3, #3
 800f8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800f8aa:	e0a3      	b.n	800f9f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f8ac:	7bbb      	ldrb	r3, [r7, #14]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d103      	bne.n	800f8ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2205      	movs	r2, #5
 800f8b6:	761a      	strb	r2, [r3, #24]
      break;
 800f8b8:	e09c      	b.n	800f9f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f8ba:	7bbb      	ldrb	r3, [r7, #14]
 800f8bc:	2b04      	cmp	r3, #4
 800f8be:	f040 8099 	bne.w	800f9f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	220b      	movs	r2, #11
 800f8c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f8cc:	e092      	b.n	800f9f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	791b      	ldrb	r3, [r3, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 f8d5 	bl	800fa86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f8e2:	b29a      	uxth	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2208      	movs	r2, #8
 800f8ec:	761a      	strb	r2, [r3, #24]

      break;
 800f8ee:	e086      	b.n	800f9fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	791b      	ldrb	r3, [r3, #4]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fc06 	bl	8010108 <USBH_LL_GetURBState>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f900:	7bbb      	ldrb	r3, [r7, #14]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d105      	bne.n	800f912 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	220d      	movs	r2, #13
 800f90a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f90c:	2300      	movs	r3, #0
 800f90e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f910:	e072      	b.n	800f9f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f912:	7bbb      	ldrb	r3, [r7, #14]
 800f914:	2b04      	cmp	r3, #4
 800f916:	d103      	bne.n	800f920 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	220b      	movs	r2, #11
 800f91c:	761a      	strb	r2, [r3, #24]
      break;
 800f91e:	e06b      	b.n	800f9f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f920:	7bbb      	ldrb	r3, [r7, #14]
 800f922:	2b05      	cmp	r3, #5
 800f924:	d168      	bne.n	800f9f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f926:	2303      	movs	r3, #3
 800f928:	73fb      	strb	r3, [r7, #15]
      break;
 800f92a:	e065      	b.n	800f9f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	795b      	ldrb	r3, [r3, #5]
 800f930:	2201      	movs	r2, #1
 800f932:	9200      	str	r2, [sp, #0]
 800f934:	2200      	movs	r2, #0
 800f936:	2100      	movs	r1, #0
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f87f 	bl	800fa3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f944:	b29a      	uxth	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	220a      	movs	r2, #10
 800f94e:	761a      	strb	r2, [r3, #24]
      break;
 800f950:	e055      	b.n	800f9fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	795b      	ldrb	r3, [r3, #5]
 800f956:	4619      	mov	r1, r3
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 fbd5 	bl	8010108 <USBH_LL_GetURBState>
 800f95e:	4603      	mov	r3, r0
 800f960:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f962:	7bbb      	ldrb	r3, [r7, #14]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d105      	bne.n	800f974 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f968:	2300      	movs	r3, #0
 800f96a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	220d      	movs	r2, #13
 800f970:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f972:	e043      	b.n	800f9fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f974:	7bbb      	ldrb	r3, [r7, #14]
 800f976:	2b02      	cmp	r3, #2
 800f978:	d103      	bne.n	800f982 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2209      	movs	r2, #9
 800f97e:	761a      	strb	r2, [r3, #24]
      break;
 800f980:	e03c      	b.n	800f9fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f982:	7bbb      	ldrb	r3, [r7, #14]
 800f984:	2b04      	cmp	r3, #4
 800f986:	d139      	bne.n	800f9fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	220b      	movs	r2, #11
 800f98c:	761a      	strb	r2, [r3, #24]
      break;
 800f98e:	e035      	b.n	800f9fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7e5b      	ldrb	r3, [r3, #25]
 800f994:	3301      	adds	r3, #1
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	765a      	strb	r2, [r3, #25]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	7e5b      	ldrb	r3, [r3, #25]
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d806      	bhi.n	800f9b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f9b0:	e025      	b.n	800f9fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9b8:	2106      	movs	r1, #6
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	795b      	ldrb	r3, [r3, #5]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f90c 	bl	800fbe8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	791b      	ldrb	r3, [r3, #4]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f906 	bl	800fbe8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800f9e6:	e00a      	b.n	800f9fe <USBH_HandleControl+0x2de>

    default:
      break;
 800f9e8:	bf00      	nop
 800f9ea:	e008      	b.n	800f9fe <USBH_HandleControl+0x2de>
      break;
 800f9ec:	bf00      	nop
 800f9ee:	e006      	b.n	800f9fe <USBH_HandleControl+0x2de>
      break;
 800f9f0:	bf00      	nop
 800f9f2:	e004      	b.n	800f9fe <USBH_HandleControl+0x2de>
      break;
 800f9f4:	bf00      	nop
 800f9f6:	e002      	b.n	800f9fe <USBH_HandleControl+0x2de>
      break;
 800f9f8:	bf00      	nop
 800f9fa:	e000      	b.n	800f9fe <USBH_HandleControl+0x2de>
      break;
 800f9fc:	bf00      	nop
  }

  return status;
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b088      	sub	sp, #32
 800fa0c:	af04      	add	r7, sp, #16
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	4613      	mov	r3, r2
 800fa14:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fa16:	79f9      	ldrb	r1, [r7, #7]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	9303      	str	r3, [sp, #12]
 800fa1c:	2308      	movs	r3, #8
 800fa1e:	9302      	str	r3, [sp, #8]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	9301      	str	r3, [sp, #4]
 800fa24:	2300      	movs	r3, #0
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	2300      	movs	r3, #0
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f000 fb3a 	bl	80100a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b088      	sub	sp, #32
 800fa40:	af04      	add	r7, sp, #16
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	4611      	mov	r1, r2
 800fa48:	461a      	mov	r2, r3
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	80fb      	strh	r3, [r7, #6]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fa60:	7979      	ldrb	r1, [r7, #5]
 800fa62:	7e3b      	ldrb	r3, [r7, #24]
 800fa64:	9303      	str	r3, [sp, #12]
 800fa66:	88fb      	ldrh	r3, [r7, #6]
 800fa68:	9302      	str	r3, [sp, #8]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	2301      	movs	r3, #1
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	2300      	movs	r3, #0
 800fa74:	2200      	movs	r2, #0
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f000 fb15 	bl	80100a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b088      	sub	sp, #32
 800fa8a:	af04      	add	r7, sp, #16
 800fa8c:	60f8      	str	r0, [r7, #12]
 800fa8e:	60b9      	str	r1, [r7, #8]
 800fa90:	4611      	mov	r1, r2
 800fa92:	461a      	mov	r2, r3
 800fa94:	460b      	mov	r3, r1
 800fa96:	80fb      	strh	r3, [r7, #6]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fa9c:	7979      	ldrb	r1, [r7, #5]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9303      	str	r3, [sp, #12]
 800faa2:	88fb      	ldrh	r3, [r7, #6]
 800faa4:	9302      	str	r3, [sp, #8]
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	9301      	str	r3, [sp, #4]
 800faaa:	2301      	movs	r3, #1
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	2300      	movs	r3, #0
 800fab0:	2201      	movs	r2, #1
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 faf7 	bl	80100a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800fab8:	2300      	movs	r3, #0

}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b088      	sub	sp, #32
 800fac6:	af04      	add	r7, sp, #16
 800fac8:	60f8      	str	r0, [r7, #12]
 800faca:	60b9      	str	r1, [r7, #8]
 800facc:	4611      	mov	r1, r2
 800face:	461a      	mov	r2, r3
 800fad0:	460b      	mov	r3, r1
 800fad2:	80fb      	strh	r3, [r7, #6]
 800fad4:	4613      	mov	r3, r2
 800fad6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fae6:	7979      	ldrb	r1, [r7, #5]
 800fae8:	7e3b      	ldrb	r3, [r7, #24]
 800faea:	9303      	str	r3, [sp, #12]
 800faec:	88fb      	ldrh	r3, [r7, #6]
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	2301      	movs	r3, #1
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	2302      	movs	r3, #2
 800fafa:	2200      	movs	r2, #0
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 fad2 	bl	80100a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af04      	add	r7, sp, #16
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4611      	mov	r1, r2
 800fb18:	461a      	mov	r2, r3
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	80fb      	strh	r3, [r7, #6]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fb22:	7979      	ldrb	r1, [r7, #5]
 800fb24:	2300      	movs	r3, #0
 800fb26:	9303      	str	r3, [sp, #12]
 800fb28:	88fb      	ldrh	r3, [r7, #6]
 800fb2a:	9302      	str	r3, [sp, #8]
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	2301      	movs	r3, #1
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	2302      	movs	r3, #2
 800fb36:	2201      	movs	r2, #1
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f000 fab4 	bl	80100a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3710      	adds	r7, #16
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af04      	add	r7, sp, #16
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	4608      	mov	r0, r1
 800fb52:	4611      	mov	r1, r2
 800fb54:	461a      	mov	r2, r3
 800fb56:	4603      	mov	r3, r0
 800fb58:	70fb      	strb	r3, [r7, #3]
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	70bb      	strb	r3, [r7, #2]
 800fb5e:	4613      	mov	r3, r2
 800fb60:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fb62:	7878      	ldrb	r0, [r7, #1]
 800fb64:	78ba      	ldrb	r2, [r7, #2]
 800fb66:	78f9      	ldrb	r1, [r7, #3]
 800fb68:	8b3b      	ldrh	r3, [r7, #24]
 800fb6a:	9302      	str	r3, [sp, #8]
 800fb6c:	7d3b      	ldrb	r3, [r7, #20]
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	7c3b      	ldrb	r3, [r7, #16]
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	4603      	mov	r3, r0
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fa47 	bl	801000a <USBH_LL_OpenPipe>

  return USBH_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	460b      	mov	r3, r1
 800fb90:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	4619      	mov	r1, r3
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fa66 	bl	8010068 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f836 	bl	800fc24 <USBH_GetFreePipe>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fbbc:	89fb      	ldrh	r3, [r7, #14]
 800fbbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d00a      	beq.n	800fbdc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800fbc6:	78fa      	ldrb	r2, [r7, #3]
 800fbc8:	89fb      	ldrh	r3, [r7, #14]
 800fbca:	f003 030f 	and.w	r3, r3, #15
 800fbce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbd2:	6879      	ldr	r1, [r7, #4]
 800fbd4:	33e0      	adds	r3, #224	; 0xe0
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	440b      	add	r3, r1
 800fbda:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fbdc:	89fb      	ldrh	r3, [r7, #14]
 800fbde:	b2db      	uxtb	r3, r3
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800fbf4:	78fb      	ldrb	r3, [r7, #3]
 800fbf6:	2b0f      	cmp	r3, #15
 800fbf8:	d80d      	bhi.n	800fc16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fbfa:	78fb      	ldrb	r3, [r7, #3]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	33e0      	adds	r3, #224	; 0xe0
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	685a      	ldr	r2, [r3, #4]
 800fc06:	78fb      	ldrb	r3, [r7, #3]
 800fc08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fc0c:	6879      	ldr	r1, [r7, #4]
 800fc0e:	33e0      	adds	r3, #224	; 0xe0
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	440b      	add	r3, r1
 800fc14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fc16:	2300      	movs	r3, #0
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
 800fc34:	e00f      	b.n	800fc56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	33e0      	adds	r3, #224	; 0xe0
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	4413      	add	r3, r2
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d102      	bne.n	800fc50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	e007      	b.n	800fc60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800fc50:	7bfb      	ldrb	r3, [r7, #15]
 800fc52:	3301      	adds	r3, #1
 800fc54:	73fb      	strb	r3, [r7, #15]
 800fc56:	7bfb      	ldrb	r3, [r7, #15]
 800fc58:	2b0f      	cmp	r3, #15
 800fc5a:	d9ec      	bls.n	800fc36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fc5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3714      	adds	r7, #20
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fc70:	2201      	movs	r2, #1
 800fc72:	490e      	ldr	r1, [pc, #56]	; (800fcac <MX_USB_HOST_Init+0x40>)
 800fc74:	480e      	ldr	r0, [pc, #56]	; (800fcb0 <MX_USB_HOST_Init+0x44>)
 800fc76:	f7fe fbad 	bl	800e3d4 <USBH_Init>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fc80:	f7f1 fe92 	bl	80019a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fc84:	490b      	ldr	r1, [pc, #44]	; (800fcb4 <MX_USB_HOST_Init+0x48>)
 800fc86:	480a      	ldr	r0, [pc, #40]	; (800fcb0 <MX_USB_HOST_Init+0x44>)
 800fc88:	f7fe fc51 	bl	800e52e <USBH_RegisterClass>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fc92:	f7f1 fe89 	bl	80019a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fc96:	4806      	ldr	r0, [pc, #24]	; (800fcb0 <MX_USB_HOST_Init+0x44>)
 800fc98:	f7fe fcd5 	bl	800e646 <USBH_Start>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fca2:	f7f1 fe81 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fca6:	bf00      	nop
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	0800fccd 	.word	0x0800fccd
 800fcb0:	20000cf4 	.word	0x20000cf4
 800fcb4:	20000020 	.word	0x20000020

0800fcb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fcbc:	4802      	ldr	r0, [pc, #8]	; (800fcc8 <MX_USB_HOST_Process+0x10>)
 800fcbe:	f7fe fcd3 	bl	800e668 <USBH_Process>
}
 800fcc2:	bf00      	nop
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20000cf4 	.word	0x20000cf4

0800fccc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fcd8:	78fb      	ldrb	r3, [r7, #3]
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d819      	bhi.n	800fd14 <USBH_UserProcess+0x48>
 800fce0:	a201      	add	r2, pc, #4	; (adr r2, 800fce8 <USBH_UserProcess+0x1c>)
 800fce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce6:	bf00      	nop
 800fce8:	0800fd15 	.word	0x0800fd15
 800fcec:	0800fd05 	.word	0x0800fd05
 800fcf0:	0800fd15 	.word	0x0800fd15
 800fcf4:	0800fd0d 	.word	0x0800fd0d
 800fcf8:	0800fcfd 	.word	0x0800fcfd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fcfc:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <USBH_UserProcess+0x58>)
 800fcfe:	2203      	movs	r2, #3
 800fd00:	701a      	strb	r2, [r3, #0]
  break;
 800fd02:	e008      	b.n	800fd16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fd04:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <USBH_UserProcess+0x58>)
 800fd06:	2202      	movs	r2, #2
 800fd08:	701a      	strb	r2, [r3, #0]
  break;
 800fd0a:	e004      	b.n	800fd16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fd0c:	4b05      	ldr	r3, [pc, #20]	; (800fd24 <USBH_UserProcess+0x58>)
 800fd0e:	2201      	movs	r2, #1
 800fd10:	701a      	strb	r2, [r3, #0]
  break;
 800fd12:	e000      	b.n	800fd16 <USBH_UserProcess+0x4a>

  default:
  break;
 800fd14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fd16:	bf00      	nop
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	200010cc 	.word	0x200010cc

0800fd28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b08a      	sub	sp, #40	; 0x28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd30:	f107 0314 	add.w	r3, r7, #20
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	605a      	str	r2, [r3, #4]
 800fd3a:	609a      	str	r2, [r3, #8]
 800fd3c:	60da      	str	r2, [r3, #12]
 800fd3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd48:	d13c      	bne.n	800fdc4 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd4a:	4b20      	ldr	r3, [pc, #128]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd4e:	4a1f      	ldr	r2, [pc, #124]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd50:	f043 0301 	orr.w	r3, r3, #1
 800fd54:	6313      	str	r3, [r2, #48]	; 0x30
 800fd56:	4b1d      	ldr	r3, [pc, #116]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	613b      	str	r3, [r7, #16]
 800fd60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800fd62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fd66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd68:	2302      	movs	r3, #2
 800fd6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd70:	2303      	movs	r3, #3
 800fd72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd74:	230a      	movs	r3, #10
 800fd76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd78:	f107 0314 	add.w	r3, r7, #20
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	4814      	ldr	r0, [pc, #80]	; (800fdd0 <HAL_HCD_MspInit+0xa8>)
 800fd80:	f7f6 f954 	bl	800602c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd84:	4b11      	ldr	r3, [pc, #68]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd88:	4a10      	ldr	r2, [pc, #64]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd8e:	6353      	str	r3, [r2, #52]	; 0x34
 800fd90:	4b0e      	ldr	r3, [pc, #56]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd98:	60fb      	str	r3, [r7, #12]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fda0:	4a0a      	ldr	r2, [pc, #40]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fda2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fda6:	6453      	str	r3, [r2, #68]	; 0x44
 800fda8:	4b08      	ldr	r3, [pc, #32]	; (800fdcc <HAL_HCD_MspInit+0xa4>)
 800fdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdb0:	60bb      	str	r3, [r7, #8]
 800fdb2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	2043      	movs	r0, #67	; 0x43
 800fdba:	f7f4 ff1c 	bl	8004bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fdbe:	2043      	movs	r0, #67	; 0x43
 800fdc0:	f7f4 ff35 	bl	8004c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fdc4:	bf00      	nop
 800fdc6:	3728      	adds	r7, #40	; 0x28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	40023800 	.word	0x40023800
 800fdd0:	40020000 	.word	0x40020000

0800fdd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff f81f 	bl	800ee26 <USBH_LL_IncTimer>
}
 800fde8:	bf00      	nop
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff f857 	bl	800eeb2 <USBH_LL_Connect>
}
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff f860 	bl	800eee0 <USBH_LL_Disconnect>
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	70fb      	strb	r3, [r7, #3]
 800fe34:	4613      	mov	r3, r2
 800fe36:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fe38:	bf00      	nop
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff f811 	bl	800ee7a <USBH_LL_PortEnabled>
}
 800fe58:	bf00      	nop
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff f811 	bl	800ee96 <USBH_LL_PortDisabled>
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d12a      	bne.n	800fee4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fe8e:	4a18      	ldr	r2, [pc, #96]	; (800fef0 <USBH_LL_Init+0x74>)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a15      	ldr	r2, [pc, #84]	; (800fef0 <USBH_LL_Init+0x74>)
 800fe9a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe9e:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <USBH_LL_Init+0x74>)
 800fea0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fea4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fea6:	4b12      	ldr	r3, [pc, #72]	; (800fef0 <USBH_LL_Init+0x74>)
 800fea8:	2208      	movs	r2, #8
 800feaa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800feac:	4b10      	ldr	r3, [pc, #64]	; (800fef0 <USBH_LL_Init+0x74>)
 800feae:	2201      	movs	r2, #1
 800feb0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800feb2:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <USBH_LL_Init+0x74>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800feb8:	4b0d      	ldr	r3, [pc, #52]	; (800fef0 <USBH_LL_Init+0x74>)
 800feba:	2202      	movs	r2, #2
 800febc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800febe:	4b0c      	ldr	r3, [pc, #48]	; (800fef0 <USBH_LL_Init+0x74>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fec4:	480a      	ldr	r0, [pc, #40]	; (800fef0 <USBH_LL_Init+0x74>)
 800fec6:	f7f6 fa76 	bl	80063b6 <HAL_HCD_Init>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fed0:	f7f1 fd6a 	bl	80019a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fed4:	4806      	ldr	r0, [pc, #24]	; (800fef0 <USBH_LL_Init+0x74>)
 800fed6:	f7f6 fe5a 	bl	8006b8e <HAL_HCD_GetCurrentFrame>
 800feda:	4603      	mov	r3, r0
 800fedc:	4619      	mov	r1, r3
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7fe ff92 	bl	800ee08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	200010d0 	.word	0x200010d0

0800fef4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fefc:	2300      	movs	r3, #0
 800fefe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f6 fdc9 	bl	8006aa2 <HAL_HCD_Start>
 800ff10:	4603      	mov	r3, r0
 800ff12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 f95c 	bl	80101d4 <USBH_Get_USB_Status>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff36:	2300      	movs	r3, #0
 800ff38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7f6 fdd1 	bl	8006ae8 <HAL_HCD_Stop>
 800ff46:	4603      	mov	r3, r0
 800ff48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff4a:	7bfb      	ldrb	r3, [r7, #15]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 f941 	bl	80101d4 <USBH_Get_USB_Status>
 800ff52:	4603      	mov	r3, r0
 800ff54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f6 fe19 	bl	8006baa <HAL_HCD_GetCurrentSpeed>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b02      	cmp	r3, #2
 800ff7c:	d00c      	beq.n	800ff98 <USBH_LL_GetSpeed+0x38>
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d80d      	bhi.n	800ff9e <USBH_LL_GetSpeed+0x3e>
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d002      	beq.n	800ff8c <USBH_LL_GetSpeed+0x2c>
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d003      	beq.n	800ff92 <USBH_LL_GetSpeed+0x32>
 800ff8a:	e008      	b.n	800ff9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ff90:	e008      	b.n	800ffa4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ff92:	2301      	movs	r3, #1
 800ff94:	73fb      	strb	r3, [r7, #15]
    break;
 800ff96:	e005      	b.n	800ffa4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ff98:	2302      	movs	r3, #2
 800ff9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff9c:	e002      	b.n	800ffa4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	73fb      	strb	r3, [r7, #15]
    break;
 800ffa2:	bf00      	nop
  }
  return  speed;
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b084      	sub	sp, #16
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7f6 fdac 	bl	8006b22 <HAL_HCD_ResetPort>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffce:	7bfb      	ldrb	r3, [r7, #15]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 f8ff 	bl	80101d4 <USBH_Get_USB_Status>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	460b      	mov	r3, r1
 800ffee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fff6:	78fa      	ldrb	r2, [r7, #3]
 800fff8:	4611      	mov	r1, r2
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f6 fdb3 	bl	8006b66 <HAL_HCD_HC_GetXferCount>
 8010000:	4603      	mov	r3, r0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801000a:	b590      	push	{r4, r7, lr}
 801000c:	b089      	sub	sp, #36	; 0x24
 801000e:	af04      	add	r7, sp, #16
 8010010:	6078      	str	r0, [r7, #4]
 8010012:	4608      	mov	r0, r1
 8010014:	4611      	mov	r1, r2
 8010016:	461a      	mov	r2, r3
 8010018:	4603      	mov	r3, r0
 801001a:	70fb      	strb	r3, [r7, #3]
 801001c:	460b      	mov	r3, r1
 801001e:	70bb      	strb	r3, [r7, #2]
 8010020:	4613      	mov	r3, r2
 8010022:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010024:	2300      	movs	r3, #0
 8010026:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010028:	2300      	movs	r3, #0
 801002a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010032:	787c      	ldrb	r4, [r7, #1]
 8010034:	78ba      	ldrb	r2, [r7, #2]
 8010036:	78f9      	ldrb	r1, [r7, #3]
 8010038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801003a:	9302      	str	r3, [sp, #8]
 801003c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	4623      	mov	r3, r4
 801004a:	f7f6 fa16 	bl	800647a <HAL_HCD_HC_Init>
 801004e:	4603      	mov	r3, r0
 8010050:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	4618      	mov	r0, r3
 8010056:	f000 f8bd 	bl	80101d4 <USBH_Get_USB_Status>
 801005a:	4603      	mov	r3, r0
 801005c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801005e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	bd90      	pop	{r4, r7, pc}

08010068 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	460b      	mov	r3, r1
 8010072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010074:	2300      	movs	r3, #0
 8010076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010082:	78fa      	ldrb	r2, [r7, #3]
 8010084:	4611      	mov	r1, r2
 8010086:	4618      	mov	r0, r3
 8010088:	f7f6 fa86 	bl	8006598 <HAL_HCD_HC_Halt>
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f89e 	bl	80101d4 <USBH_Get_USB_Status>
 8010098:	4603      	mov	r3, r0
 801009a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801009c:	7bbb      	ldrb	r3, [r7, #14]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80100a6:	b590      	push	{r4, r7, lr}
 80100a8:	b089      	sub	sp, #36	; 0x24
 80100aa:	af04      	add	r7, sp, #16
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	4608      	mov	r0, r1
 80100b0:	4611      	mov	r1, r2
 80100b2:	461a      	mov	r2, r3
 80100b4:	4603      	mov	r3, r0
 80100b6:	70fb      	strb	r3, [r7, #3]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70bb      	strb	r3, [r7, #2]
 80100bc:	4613      	mov	r3, r2
 80100be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100ce:	787c      	ldrb	r4, [r7, #1]
 80100d0:	78ba      	ldrb	r2, [r7, #2]
 80100d2:	78f9      	ldrb	r1, [r7, #3]
 80100d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100d8:	9303      	str	r3, [sp, #12]
 80100da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100dc:	9302      	str	r3, [sp, #8]
 80100de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e0:	9301      	str	r3, [sp, #4]
 80100e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	4623      	mov	r3, r4
 80100ea:	f7f6 fa79 	bl	80065e0 <HAL_HCD_HC_SubmitRequest>
 80100ee:	4603      	mov	r3, r0
 80100f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80100f2:	7bfb      	ldrb	r3, [r7, #15]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 f86d 	bl	80101d4 <USBH_Get_USB_Status>
 80100fa:	4603      	mov	r3, r0
 80100fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	bd90      	pop	{r4, r7, pc}

08010108 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801011a:	78fa      	ldrb	r2, [r7, #3]
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f7f6 fd0d 	bl	8006b3e <HAL_HCD_HC_GetURBState>
 8010124:	4603      	mov	r3, r0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	460b      	mov	r3, r1
 8010138:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010140:	2b01      	cmp	r3, #1
 8010142:	d103      	bne.n	801014c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010144:	78fb      	ldrb	r3, [r7, #3]
 8010146:	4618      	mov	r0, r3
 8010148:	f000 f870 	bl	801022c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801014c:	20c8      	movs	r0, #200	; 0xc8
 801014e:	f7f4 f9bf 	bl	80044d0 <HAL_Delay>
  return USBH_OK;
 8010152:	2300      	movs	r3, #0
}
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
 8010168:	4613      	mov	r3, r2
 801016a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010172:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	212c      	movs	r1, #44	; 0x2c
 801017a:	fb01 f303 	mul.w	r3, r1, r3
 801017e:	4413      	add	r3, r2
 8010180:	333b      	adds	r3, #59	; 0x3b
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d009      	beq.n	801019c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010188:	78fb      	ldrb	r3, [r7, #3]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	212c      	movs	r1, #44	; 0x2c
 801018e:	fb01 f303 	mul.w	r3, r1, r3
 8010192:	4413      	add	r3, r2
 8010194:	3354      	adds	r3, #84	; 0x54
 8010196:	78ba      	ldrb	r2, [r7, #2]
 8010198:	701a      	strb	r2, [r3, #0]
 801019a:	e008      	b.n	80101ae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801019c:	78fb      	ldrb	r3, [r7, #3]
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	212c      	movs	r1, #44	; 0x2c
 80101a2:	fb01 f303 	mul.w	r3, r1, r3
 80101a6:	4413      	add	r3, r2
 80101a8:	3355      	adds	r3, #85	; 0x55
 80101aa:	78ba      	ldrb	r2, [r7, #2]
 80101ac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80101ae:	2300      	movs	r3, #0
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3714      	adds	r7, #20
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7f4 f983 	bl	80044d0 <HAL_Delay>
}
 80101ca:	bf00      	nop
 80101cc:	3708      	adds	r7, #8
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
	...

080101d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	4603      	mov	r3, r0
 80101dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101de:	2300      	movs	r3, #0
 80101e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d817      	bhi.n	8010218 <USBH_Get_USB_Status+0x44>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <USBH_Get_USB_Status+0x1c>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	08010201 	.word	0x08010201
 80101f4:	08010207 	.word	0x08010207
 80101f8:	0801020d 	.word	0x0801020d
 80101fc:	08010213 	.word	0x08010213
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010200:	2300      	movs	r3, #0
 8010202:	73fb      	strb	r3, [r7, #15]
    break;
 8010204:	e00b      	b.n	801021e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010206:	2302      	movs	r3, #2
 8010208:	73fb      	strb	r3, [r7, #15]
    break;
 801020a:	e008      	b.n	801021e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801020c:	2301      	movs	r3, #1
 801020e:	73fb      	strb	r3, [r7, #15]
    break;
 8010210:	e005      	b.n	801021e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010212:	2302      	movs	r3, #2
 8010214:	73fb      	strb	r3, [r7, #15]
    break;
 8010216:	e002      	b.n	801021e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010218:	2302      	movs	r3, #2
 801021a:	73fb      	strb	r3, [r7, #15]
    break;
 801021c:	bf00      	nop
  }
  return usb_status;
 801021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801023a:	79fb      	ldrb	r3, [r7, #7]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
 8010244:	e001      	b.n	801024a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010246:	2301      	movs	r3, #1
 8010248:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801024a:	7bfb      	ldrb	r3, [r7, #15]
 801024c:	461a      	mov	r2, r3
 801024e:	2120      	movs	r1, #32
 8010250:	4803      	ldr	r0, [pc, #12]	; (8010260 <MX_DriverVbusFS+0x34>)
 8010252:	f7f6 f897 	bl	8006384 <HAL_GPIO_WritePin>
}
 8010256:	bf00      	nop
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	40020c00 	.word	0x40020c00

08010264 <__errno>:
 8010264:	4b01      	ldr	r3, [pc, #4]	; (801026c <__errno+0x8>)
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	20000040 	.word	0x20000040

08010270 <__libc_init_array>:
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	4d0d      	ldr	r5, [pc, #52]	; (80102a8 <__libc_init_array+0x38>)
 8010274:	4c0d      	ldr	r4, [pc, #52]	; (80102ac <__libc_init_array+0x3c>)
 8010276:	1b64      	subs	r4, r4, r5
 8010278:	10a4      	asrs	r4, r4, #2
 801027a:	2600      	movs	r6, #0
 801027c:	42a6      	cmp	r6, r4
 801027e:	d109      	bne.n	8010294 <__libc_init_array+0x24>
 8010280:	4d0b      	ldr	r5, [pc, #44]	; (80102b0 <__libc_init_array+0x40>)
 8010282:	4c0c      	ldr	r4, [pc, #48]	; (80102b4 <__libc_init_array+0x44>)
 8010284:	f000 f92e 	bl	80104e4 <_init>
 8010288:	1b64      	subs	r4, r4, r5
 801028a:	10a4      	asrs	r4, r4, #2
 801028c:	2600      	movs	r6, #0
 801028e:	42a6      	cmp	r6, r4
 8010290:	d105      	bne.n	801029e <__libc_init_array+0x2e>
 8010292:	bd70      	pop	{r4, r5, r6, pc}
 8010294:	f855 3b04 	ldr.w	r3, [r5], #4
 8010298:	4798      	blx	r3
 801029a:	3601      	adds	r6, #1
 801029c:	e7ee      	b.n	801027c <__libc_init_array+0xc>
 801029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a2:	4798      	blx	r3
 80102a4:	3601      	adds	r6, #1
 80102a6:	e7f2      	b.n	801028e <__libc_init_array+0x1e>
 80102a8:	08012c70 	.word	0x08012c70
 80102ac:	08012c70 	.word	0x08012c70
 80102b0:	08012c70 	.word	0x08012c70
 80102b4:	08012c74 	.word	0x08012c74

080102b8 <malloc>:
 80102b8:	4b02      	ldr	r3, [pc, #8]	; (80102c4 <malloc+0xc>)
 80102ba:	4601      	mov	r1, r0
 80102bc:	6818      	ldr	r0, [r3, #0]
 80102be:	f000 b87f 	b.w	80103c0 <_malloc_r>
 80102c2:	bf00      	nop
 80102c4:	20000040 	.word	0x20000040

080102c8 <free>:
 80102c8:	4b02      	ldr	r3, [pc, #8]	; (80102d4 <free+0xc>)
 80102ca:	4601      	mov	r1, r0
 80102cc:	6818      	ldr	r0, [r3, #0]
 80102ce:	f000 b80b 	b.w	80102e8 <_free_r>
 80102d2:	bf00      	nop
 80102d4:	20000040 	.word	0x20000040

080102d8 <memset>:
 80102d8:	4402      	add	r2, r0
 80102da:	4603      	mov	r3, r0
 80102dc:	4293      	cmp	r3, r2
 80102de:	d100      	bne.n	80102e2 <memset+0xa>
 80102e0:	4770      	bx	lr
 80102e2:	f803 1b01 	strb.w	r1, [r3], #1
 80102e6:	e7f9      	b.n	80102dc <memset+0x4>

080102e8 <_free_r>:
 80102e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ea:	2900      	cmp	r1, #0
 80102ec:	d044      	beq.n	8010378 <_free_r+0x90>
 80102ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102f2:	9001      	str	r0, [sp, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f1a1 0404 	sub.w	r4, r1, #4
 80102fa:	bfb8      	it	lt
 80102fc:	18e4      	addlt	r4, r4, r3
 80102fe:	f000 f8e3 	bl	80104c8 <__malloc_lock>
 8010302:	4a1e      	ldr	r2, [pc, #120]	; (801037c <_free_r+0x94>)
 8010304:	9801      	ldr	r0, [sp, #4]
 8010306:	6813      	ldr	r3, [r2, #0]
 8010308:	b933      	cbnz	r3, 8010318 <_free_r+0x30>
 801030a:	6063      	str	r3, [r4, #4]
 801030c:	6014      	str	r4, [r2, #0]
 801030e:	b003      	add	sp, #12
 8010310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010314:	f000 b8de 	b.w	80104d4 <__malloc_unlock>
 8010318:	42a3      	cmp	r3, r4
 801031a:	d908      	bls.n	801032e <_free_r+0x46>
 801031c:	6825      	ldr	r5, [r4, #0]
 801031e:	1961      	adds	r1, r4, r5
 8010320:	428b      	cmp	r3, r1
 8010322:	bf01      	itttt	eq
 8010324:	6819      	ldreq	r1, [r3, #0]
 8010326:	685b      	ldreq	r3, [r3, #4]
 8010328:	1949      	addeq	r1, r1, r5
 801032a:	6021      	streq	r1, [r4, #0]
 801032c:	e7ed      	b.n	801030a <_free_r+0x22>
 801032e:	461a      	mov	r2, r3
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	b10b      	cbz	r3, 8010338 <_free_r+0x50>
 8010334:	42a3      	cmp	r3, r4
 8010336:	d9fa      	bls.n	801032e <_free_r+0x46>
 8010338:	6811      	ldr	r1, [r2, #0]
 801033a:	1855      	adds	r5, r2, r1
 801033c:	42a5      	cmp	r5, r4
 801033e:	d10b      	bne.n	8010358 <_free_r+0x70>
 8010340:	6824      	ldr	r4, [r4, #0]
 8010342:	4421      	add	r1, r4
 8010344:	1854      	adds	r4, r2, r1
 8010346:	42a3      	cmp	r3, r4
 8010348:	6011      	str	r1, [r2, #0]
 801034a:	d1e0      	bne.n	801030e <_free_r+0x26>
 801034c:	681c      	ldr	r4, [r3, #0]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	6053      	str	r3, [r2, #4]
 8010352:	4421      	add	r1, r4
 8010354:	6011      	str	r1, [r2, #0]
 8010356:	e7da      	b.n	801030e <_free_r+0x26>
 8010358:	d902      	bls.n	8010360 <_free_r+0x78>
 801035a:	230c      	movs	r3, #12
 801035c:	6003      	str	r3, [r0, #0]
 801035e:	e7d6      	b.n	801030e <_free_r+0x26>
 8010360:	6825      	ldr	r5, [r4, #0]
 8010362:	1961      	adds	r1, r4, r5
 8010364:	428b      	cmp	r3, r1
 8010366:	bf04      	itt	eq
 8010368:	6819      	ldreq	r1, [r3, #0]
 801036a:	685b      	ldreq	r3, [r3, #4]
 801036c:	6063      	str	r3, [r4, #4]
 801036e:	bf04      	itt	eq
 8010370:	1949      	addeq	r1, r1, r5
 8010372:	6021      	streq	r1, [r4, #0]
 8010374:	6054      	str	r4, [r2, #4]
 8010376:	e7ca      	b.n	801030e <_free_r+0x26>
 8010378:	b003      	add	sp, #12
 801037a:	bd30      	pop	{r4, r5, pc}
 801037c:	200013d4 	.word	0x200013d4

08010380 <sbrk_aligned>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	4e0e      	ldr	r6, [pc, #56]	; (80103bc <sbrk_aligned+0x3c>)
 8010384:	460c      	mov	r4, r1
 8010386:	6831      	ldr	r1, [r6, #0]
 8010388:	4605      	mov	r5, r0
 801038a:	b911      	cbnz	r1, 8010392 <sbrk_aligned+0x12>
 801038c:	f000 f88c 	bl	80104a8 <_sbrk_r>
 8010390:	6030      	str	r0, [r6, #0]
 8010392:	4621      	mov	r1, r4
 8010394:	4628      	mov	r0, r5
 8010396:	f000 f887 	bl	80104a8 <_sbrk_r>
 801039a:	1c43      	adds	r3, r0, #1
 801039c:	d00a      	beq.n	80103b4 <sbrk_aligned+0x34>
 801039e:	1cc4      	adds	r4, r0, #3
 80103a0:	f024 0403 	bic.w	r4, r4, #3
 80103a4:	42a0      	cmp	r0, r4
 80103a6:	d007      	beq.n	80103b8 <sbrk_aligned+0x38>
 80103a8:	1a21      	subs	r1, r4, r0
 80103aa:	4628      	mov	r0, r5
 80103ac:	f000 f87c 	bl	80104a8 <_sbrk_r>
 80103b0:	3001      	adds	r0, #1
 80103b2:	d101      	bne.n	80103b8 <sbrk_aligned+0x38>
 80103b4:	f04f 34ff 	mov.w	r4, #4294967295
 80103b8:	4620      	mov	r0, r4
 80103ba:	bd70      	pop	{r4, r5, r6, pc}
 80103bc:	200013d8 	.word	0x200013d8

080103c0 <_malloc_r>:
 80103c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c4:	1ccd      	adds	r5, r1, #3
 80103c6:	f025 0503 	bic.w	r5, r5, #3
 80103ca:	3508      	adds	r5, #8
 80103cc:	2d0c      	cmp	r5, #12
 80103ce:	bf38      	it	cc
 80103d0:	250c      	movcc	r5, #12
 80103d2:	2d00      	cmp	r5, #0
 80103d4:	4607      	mov	r7, r0
 80103d6:	db01      	blt.n	80103dc <_malloc_r+0x1c>
 80103d8:	42a9      	cmp	r1, r5
 80103da:	d905      	bls.n	80103e8 <_malloc_r+0x28>
 80103dc:	230c      	movs	r3, #12
 80103de:	603b      	str	r3, [r7, #0]
 80103e0:	2600      	movs	r6, #0
 80103e2:	4630      	mov	r0, r6
 80103e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e8:	4e2e      	ldr	r6, [pc, #184]	; (80104a4 <_malloc_r+0xe4>)
 80103ea:	f000 f86d 	bl	80104c8 <__malloc_lock>
 80103ee:	6833      	ldr	r3, [r6, #0]
 80103f0:	461c      	mov	r4, r3
 80103f2:	bb34      	cbnz	r4, 8010442 <_malloc_r+0x82>
 80103f4:	4629      	mov	r1, r5
 80103f6:	4638      	mov	r0, r7
 80103f8:	f7ff ffc2 	bl	8010380 <sbrk_aligned>
 80103fc:	1c43      	adds	r3, r0, #1
 80103fe:	4604      	mov	r4, r0
 8010400:	d14d      	bne.n	801049e <_malloc_r+0xde>
 8010402:	6834      	ldr	r4, [r6, #0]
 8010404:	4626      	mov	r6, r4
 8010406:	2e00      	cmp	r6, #0
 8010408:	d140      	bne.n	801048c <_malloc_r+0xcc>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	4631      	mov	r1, r6
 801040e:	4638      	mov	r0, r7
 8010410:	eb04 0803 	add.w	r8, r4, r3
 8010414:	f000 f848 	bl	80104a8 <_sbrk_r>
 8010418:	4580      	cmp	r8, r0
 801041a:	d13a      	bne.n	8010492 <_malloc_r+0xd2>
 801041c:	6821      	ldr	r1, [r4, #0]
 801041e:	3503      	adds	r5, #3
 8010420:	1a6d      	subs	r5, r5, r1
 8010422:	f025 0503 	bic.w	r5, r5, #3
 8010426:	3508      	adds	r5, #8
 8010428:	2d0c      	cmp	r5, #12
 801042a:	bf38      	it	cc
 801042c:	250c      	movcc	r5, #12
 801042e:	4629      	mov	r1, r5
 8010430:	4638      	mov	r0, r7
 8010432:	f7ff ffa5 	bl	8010380 <sbrk_aligned>
 8010436:	3001      	adds	r0, #1
 8010438:	d02b      	beq.n	8010492 <_malloc_r+0xd2>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	442b      	add	r3, r5
 801043e:	6023      	str	r3, [r4, #0]
 8010440:	e00e      	b.n	8010460 <_malloc_r+0xa0>
 8010442:	6822      	ldr	r2, [r4, #0]
 8010444:	1b52      	subs	r2, r2, r5
 8010446:	d41e      	bmi.n	8010486 <_malloc_r+0xc6>
 8010448:	2a0b      	cmp	r2, #11
 801044a:	d916      	bls.n	801047a <_malloc_r+0xba>
 801044c:	1961      	adds	r1, r4, r5
 801044e:	42a3      	cmp	r3, r4
 8010450:	6025      	str	r5, [r4, #0]
 8010452:	bf18      	it	ne
 8010454:	6059      	strne	r1, [r3, #4]
 8010456:	6863      	ldr	r3, [r4, #4]
 8010458:	bf08      	it	eq
 801045a:	6031      	streq	r1, [r6, #0]
 801045c:	5162      	str	r2, [r4, r5]
 801045e:	604b      	str	r3, [r1, #4]
 8010460:	4638      	mov	r0, r7
 8010462:	f104 060b 	add.w	r6, r4, #11
 8010466:	f000 f835 	bl	80104d4 <__malloc_unlock>
 801046a:	f026 0607 	bic.w	r6, r6, #7
 801046e:	1d23      	adds	r3, r4, #4
 8010470:	1af2      	subs	r2, r6, r3
 8010472:	d0b6      	beq.n	80103e2 <_malloc_r+0x22>
 8010474:	1b9b      	subs	r3, r3, r6
 8010476:	50a3      	str	r3, [r4, r2]
 8010478:	e7b3      	b.n	80103e2 <_malloc_r+0x22>
 801047a:	6862      	ldr	r2, [r4, #4]
 801047c:	42a3      	cmp	r3, r4
 801047e:	bf0c      	ite	eq
 8010480:	6032      	streq	r2, [r6, #0]
 8010482:	605a      	strne	r2, [r3, #4]
 8010484:	e7ec      	b.n	8010460 <_malloc_r+0xa0>
 8010486:	4623      	mov	r3, r4
 8010488:	6864      	ldr	r4, [r4, #4]
 801048a:	e7b2      	b.n	80103f2 <_malloc_r+0x32>
 801048c:	4634      	mov	r4, r6
 801048e:	6876      	ldr	r6, [r6, #4]
 8010490:	e7b9      	b.n	8010406 <_malloc_r+0x46>
 8010492:	230c      	movs	r3, #12
 8010494:	603b      	str	r3, [r7, #0]
 8010496:	4638      	mov	r0, r7
 8010498:	f000 f81c 	bl	80104d4 <__malloc_unlock>
 801049c:	e7a1      	b.n	80103e2 <_malloc_r+0x22>
 801049e:	6025      	str	r5, [r4, #0]
 80104a0:	e7de      	b.n	8010460 <_malloc_r+0xa0>
 80104a2:	bf00      	nop
 80104a4:	200013d4 	.word	0x200013d4

080104a8 <_sbrk_r>:
 80104a8:	b538      	push	{r3, r4, r5, lr}
 80104aa:	4d06      	ldr	r5, [pc, #24]	; (80104c4 <_sbrk_r+0x1c>)
 80104ac:	2300      	movs	r3, #0
 80104ae:	4604      	mov	r4, r0
 80104b0:	4608      	mov	r0, r1
 80104b2:	602b      	str	r3, [r5, #0]
 80104b4:	f7f2 fcca 	bl	8002e4c <_sbrk>
 80104b8:	1c43      	adds	r3, r0, #1
 80104ba:	d102      	bne.n	80104c2 <_sbrk_r+0x1a>
 80104bc:	682b      	ldr	r3, [r5, #0]
 80104be:	b103      	cbz	r3, 80104c2 <_sbrk_r+0x1a>
 80104c0:	6023      	str	r3, [r4, #0]
 80104c2:	bd38      	pop	{r3, r4, r5, pc}
 80104c4:	200013dc 	.word	0x200013dc

080104c8 <__malloc_lock>:
 80104c8:	4801      	ldr	r0, [pc, #4]	; (80104d0 <__malloc_lock+0x8>)
 80104ca:	f000 b809 	b.w	80104e0 <__retarget_lock_acquire_recursive>
 80104ce:	bf00      	nop
 80104d0:	200013e0 	.word	0x200013e0

080104d4 <__malloc_unlock>:
 80104d4:	4801      	ldr	r0, [pc, #4]	; (80104dc <__malloc_unlock+0x8>)
 80104d6:	f000 b804 	b.w	80104e2 <__retarget_lock_release_recursive>
 80104da:	bf00      	nop
 80104dc:	200013e0 	.word	0x200013e0

080104e0 <__retarget_lock_acquire_recursive>:
 80104e0:	4770      	bx	lr

080104e2 <__retarget_lock_release_recursive>:
 80104e2:	4770      	bx	lr

080104e4 <_init>:
 80104e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e6:	bf00      	nop
 80104e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ea:	bc08      	pop	{r3}
 80104ec:	469e      	mov	lr, r3
 80104ee:	4770      	bx	lr

080104f0 <_fini>:
 80104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f2:	bf00      	nop
 80104f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104f6:	bc08      	pop	{r3}
 80104f8:	469e      	mov	lr, r3
 80104fa:	4770      	bx	lr
