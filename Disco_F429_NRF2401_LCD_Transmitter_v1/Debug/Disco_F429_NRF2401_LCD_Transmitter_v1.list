
Disco_F429_NRF2401_LCD_Transmitter_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b930  0800b930  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b938  0800b938  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b938  0800b938  0001b938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800b940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000008a8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000904  20000904  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024925  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004715  00000000  00000000  000449b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f00  00000000  00000000  000490c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d50  00000000  00000000  0004afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f16  00000000  00000000  0004cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b2a  00000000  00000000  00075c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece35  00000000  00000000  00099758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018658d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000846c  00000000  00000000  001865e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009d4c 	.word	0x08009d4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08009d4c 	.word	0x08009d4c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f003 fa9c 	bl	8003a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f842 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fb4c 	bl	8000ba8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000510:	f000 f8b0 	bl	8000674 <MX_CRC_Init>
  MX_FMC_Init();
 8000514:	f000 faf8 	bl	8000b08 <MX_FMC_Init>
  MX_I2C3_Init();
 8000518:	f000 f8f2 	bl	8000700 <MX_I2C3_Init>
  MX_SPI5_Init();
 800051c:	f000 fa18 	bl	8000950 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000520:	f000 fa4c 	bl	80009bc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000524:	f000 fa9a 	bl	8000a5c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000528:	f000 fac2 	bl	8000ab0 <MX_USB_OTG_HS_HCD_Init>
  MX_DMA2D_Init();
 800052c:	f000 f8b6 	bl	800069c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000530:	f000 f926 	bl	8000780 <MX_LTDC_Init>
  MX_SPI3_Init();
 8000534:	f000 f9d6 	bl	80008e4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* Configure LED3 and LED4 */
    BSP_LED_Init(LED3);
 8000538:	2000      	movs	r0, #0
 800053a:	f001 fe85 	bl	8002248 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800053e:	2001      	movs	r0, #1
 8000540:	f001 fe82 	bl	8002248 <BSP_LED_Init>

    /*##-1- LCD Initialization #################################################*/
    /* Initialize the LCD */
    BSP_LCD_Init();
 8000544:	f002 f88c 	bl	8002660 <BSP_LCD_Init>

    //set the layer buffer address into SDRAM
    BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000548:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800054c:	2001      	movs	r0, #1
 800054e:	f002 f909 	bl	8002764 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);//select on whil layer we write
 8000552:	2001      	movs	r0, #1
 8000554:	f002 f96a 	bl	800282c <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();//turn on LCD
 8000558:	f002 fb1c 	bl	8002b94 <BSP_LCD_DisplayOn>
    BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <main+0x88>)
 800055e:	f002 f9d7 	bl	8002910 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x88>)
 8000564:	f002 f98a 	bl	800287c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f002 f96e 	bl	800284c <BSP_LCD_SetTextColor>
    //write text
    BSP_LCD_DisplayStringAtLine(0,(uint8_t*) "NRF Transmitter");
 8000570:	4906      	ldr	r1, [pc, #24]	; (800058c <main+0x8c>)
 8000572:	2000      	movs	r0, #0
 8000574:	f002 faf6 	bl	8002b64 <BSP_LCD_DisplayStringAtLine>
//    	snprintf(msg, 20, "%d", nr);
//    	BSP_LCD_DisplayStringAtLine(nr%13, (uint8_t*) msg);
//    	HAL_Delay(1);
//    }

    HAL_Delay(2000);
 8000578:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800057c:	f003 faa2 	bl	8003ac4 <HAL_Delay>

    runRadio();
 8000580:	f000 fd8e 	bl	80010a0 <runRadio>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x84>
 8000586:	bf00      	nop
 8000588:	ff0000ff 	.word	0xff0000ff
 800058c:	08009d64 	.word	0x08009d64

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f009 fbcc 	bl	8009d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <SystemClock_Config+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a25      	ldr	r2, [pc, #148]	; (8000670 <SystemClock_Config+0xe0>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000604:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800060e:	2308      	movs	r3, #8
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f006 f93c 	bl	8006894 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 fbf7 	bl	8000e14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000626:	f006 f8e5 	bl	80067f4 <HAL_PWREx_EnableOverDrive>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000630:	f000 fbf0 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fb96 	bl	8006d84 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800065e:	f000 fbd9 	bl	8000e14 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x20>)
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <MX_CRC_Init+0x24>)
 800067c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_CRC_Init+0x20>)
 8000680:	f003 fb26 	bl	8003cd0 <HAL_CRC_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800068a:	f000 fbc3 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000078 	.word	0x20000078
 8000698:	40023000 	.word	0x40023000

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_DMA2D_Init+0x60>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006d2:	f003 fcd7 	bl	8004084 <HAL_DMA2D_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006dc:	f000 fb9a 	bl	8000e14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006e0:	2101      	movs	r1, #1
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_DMA2D_Init+0x5c>)
 80006e4:	f003 fe2c 	bl	8004340 <HAL_DMA2D_ConfigLayer>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ee:	f000 fb91 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000080 	.word	0x20000080
 80006fc:	4002b000 	.word	0x4002b000

08000700 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C3_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C3_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C3_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C3_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C3_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C3_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C3_Init+0x74>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_I2C3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_I2C3_Init+0x74>)
 800073e:	f005 fbc9 	bl	8005ed4 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fb64 	bl	8000e14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C3_Init+0x74>)
 8000750:	f005 fd04 	bl	800615c <HAL_I2CEx_ConfigAnalogFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800075a:	f000 fb5b 	bl	8000e14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C3_Init+0x74>)
 8000762:	f005 fd37 	bl	80061d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 fb52 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000c0 	.word	0x200000c0
 8000778:	40005c00 	.word	0x40005c00
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09a      	sub	sp, #104	; 0x68
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f009 fad4 	bl	8009d3c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f009 face 	bl	8009d3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007a0:	4b4e      	ldr	r3, [pc, #312]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007a2:	4a4f      	ldr	r2, [pc, #316]	; (80008e0 <MX_LTDC_Init+0x160>)
 80007a4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007a6:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ac:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007b2:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007b8:	4b48      	ldr	r3, [pc, #288]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007c4:	4b45      	ldr	r3, [pc, #276]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007cc:	220e      	movs	r2, #14
 80007ce:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007d0:	4b42      	ldr	r3, [pc, #264]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007d8:	f240 228e 	movw	r2, #654	; 0x28e
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007e0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007e8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80007ee:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007f0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <MX_LTDC_Init+0x15c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_LTDC_Init+0x15c>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_LTDC_Init+0x15c>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800080e:	4833      	ldr	r0, [pc, #204]	; (80008dc <MX_LTDC_Init+0x15c>)
 8000810:	f005 fd20 	bl	8006254 <HAL_LTDC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800081a:	f000 fafb 	bl	8000e14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800082e:	2300      	movs	r3, #0
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000840:	2305      	movs	r3, #5
 8000842:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000862:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_LTDC_Init+0x15c>)
 800086c:	f005 fdc2 	bl	80063f4 <HAL_LTDC_ConfigLayer>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000876:	f000 facd 	bl	8000e14 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800089c:	2305      	movs	r3, #5
 800089e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_LTDC_Init+0x15c>)
 80008c6:	f005 fd95 	bl	80063f4 <HAL_LTDC_ConfigLayer>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80008d0:	f000 faa0 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3768      	adds	r7, #104	; 0x68
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000114 	.word	0x20000114
 80008e0:	40016800 	.word	0x40016800

080008e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI3_Init+0x64>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_SPI3_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI3_Init+0x64>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI3_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI3_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI3_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI3_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI3_Init+0x64>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI3_Init+0x64>)
 8000918:	2210      	movs	r2, #16
 800091a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_SPI3_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI3_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_SPI3_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI3_Init+0x64>)
 8000930:	220a      	movs	r2, #10
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_SPI3_Init+0x64>)
 8000936:	f006 fec8 	bl	80076ca <HAL_SPI_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 fa68 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001bc 	.word	0x200001bc
 800094c:	40003c00 	.word	0x40003c00

08000950 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_SPI5_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI5_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI5_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI5_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000984:	2218      	movs	r2, #24
 8000986:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SPI5_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI5_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SPI5_Init+0x64>)
 80009a2:	f006 fe92 	bl	80076ca <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 fa32 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000214 	.word	0x20000214
 80009b8:	40015000 	.word	0x40015000

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009da:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <MX_TIM1_Init+0x9c>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM1_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a06:	f007 fc3f 	bl	8008288 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 fa00 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a22:	f007 fdf9 	bl	8008618 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f9f2 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM1_Init+0x98>)
 8000a3e:	f008 f815 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f9e4 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000026c 	.word	0x2000026c
 8000a58:	40010000 	.word	0x40010000

08000a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART1_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f008 f87a 	bl	8008b8c <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f9b9 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002b4 	.word	0x200002b4
 8000aac:	40011000 	.word	0x40011000

08000ab0 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aec:	f004 f841 	bl	8004b72 <HAL_HCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 f98d 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200002f8 	.word	0x200002f8
 8000b04:	40040000 	.word	0x40040000

08000b08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b22:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <MX_FMC_Init+0x9c>)
 8000b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_FMC_Init+0x98>)
 8000b8a:	f006 fd0d 	bl	80075a8 <HAL_SDRAM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b94:	f000 f93e 	bl	8000e14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200005fc 	.word	0x200005fc
 8000ba4:	a0000140 	.word	0xa0000140

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a83      	ldr	r2, [pc, #524]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b81      	ldr	r3, [pc, #516]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	4b7d      	ldr	r3, [pc, #500]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a7c      	ldr	r2, [pc, #496]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b7a      	ldr	r3, [pc, #488]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b76      	ldr	r3, [pc, #472]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a75      	ldr	r2, [pc, #468]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b73      	ldr	r3, [pc, #460]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b6f      	ldr	r3, [pc, #444]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a6e      	ldr	r2, [pc, #440]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b6c      	ldr	r3, [pc, #432]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b68      	ldr	r3, [pc, #416]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a67      	ldr	r2, [pc, #412]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b61      	ldr	r3, [pc, #388]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a60      	ldr	r2, [pc, #384]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a59      	ldr	r2, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a52      	ldr	r2, [pc, #328]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2160      	movs	r1, #96	; 0x60
 8000ca2:	484d      	ldr	r0, [pc, #308]	; (8000dd8 <MX_GPIO_Init+0x230>)
 8000ca4:	f003 ff32 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2116      	movs	r1, #22
 8000cac:	484b      	ldr	r0, [pc, #300]	; (8000ddc <MX_GPIO_Init+0x234>)
 8000cae:	f003 ff2d 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	484a      	ldr	r0, [pc, #296]	; (8000de0 <MX_GPIO_Init+0x238>)
 8000cb8:	f003 ff28 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cc2:	4848      	ldr	r0, [pc, #288]	; (8000de4 <MX_GPIO_Init+0x23c>)
 8000cc4:	f003 ff22 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cce:	4846      	ldr	r0, [pc, #280]	; (8000de8 <MX_GPIO_Init+0x240>)
 8000cd0:	f003 ff1c 	bl	8004b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000cd4:	2360      	movs	r3, #96	; 0x60
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	483b      	ldr	r0, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x230>)
 8000cec:	f003 fc56 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cf0:	2316      	movs	r3, #22
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4835      	ldr	r0, [pc, #212]	; (8000ddc <MX_GPIO_Init+0x234>)
 8000d08:	f003 fc48 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d0c:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	482f      	ldr	r0, [pc, #188]	; (8000de0 <MX_GPIO_Init+0x238>)
 8000d24:	f003 fc3a 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4828      	ldr	r0, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x238>)
 8000d40:	f003 fc2c 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d44:	2320      	movs	r3, #32
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <MX_GPIO_Init+0x234>)
 8000d5a:	f003 fc1f 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <MX_GPIO_Init+0x244>)
 8000d72:	f003 fc13 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <MX_GPIO_Init+0x23c>)
 8000d8c:	f003 fc06 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_GPIO_Init+0x23c>)
 8000daa:	f003 fbf7 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <MX_GPIO_Init+0x240>)
 8000dc8:	f003 fbe8 	bl	800459c <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021800 	.word	0x40021800
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e02:	f002 fe3f 	bl	8003a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40001000 	.word	0x40001000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <nRF24_CE_L+0x18>)
 8000e2a:	f003 fe6f 	bl	8004b0c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f002 fe48 	bl	8003ac4 <HAL_Delay>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2120      	movs	r1, #32
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <nRF24_CE_H+0x18>)
 8000e46:	f003 fe61 	bl	8004b0c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f002 fe3a 	bl	8003ac4 <HAL_Delay>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000

08000e58 <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f002 fe2f 	bl	8003ac4 <HAL_Delay>
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart1;

void UART_SendChar(char b) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *) &b, 1, 200);
 8000e7a:	1df9      	adds	r1, r7, #7
 8000e7c:	23c8      	movs	r3, #200	; 0xc8
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <UART_SendChar+0x20>)
 8000e82:	f007 fed0 	bl	8008c26 <HAL_UART_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002b4 	.word	0x200002b4

08000e94 <UART_SendStr>:

void UART_SendStr(char *string) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f9a5 	bl	80001ec <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	23c8      	movs	r3, #200	; 0xc8
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <UART_SendStr+0x24>)
 8000eac:	f007 febb 	bl	8008c26 <HAL_UART_Transmit>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200002b4 	.word	0x200002b4

08000ebc <Toggle_LED>:

void Toggle_LED() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <Toggle_LED+0x14>)
 8000ec6:	f003 fe3a 	bl	8004b3e <HAL_GPIO_TogglePin>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021800 	.word	0x40021800

08000ed4 <UART_SendBufHex>:
	LL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	81fb      	strh	r3, [r7, #14]
 8000ee4:	e018      	b.n	8000f18 <UART_SendBufHex+0x44>
		ch = *buf++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8000ef0:	7b7b      	ldrb	r3, [r7, #13]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <UART_SendBufHex+0x58>)
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffb7 	bl	8000e70 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <UART_SendBufHex+0x58>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ffaf 	bl	8000e70 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	3301      	adds	r3, #1
 8000f16:	81fb      	strh	r3, [r7, #14]
 8000f18:	89fa      	ldrh	r2, [r7, #14]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3e2      	bcc.n	8000ee6 <UART_SendBufHex+0x12>
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08009d74 	.word	0x08009d74

08000f30 <UART_SendHex8>:
void UART_SendHex8(uint16_t num) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <UART_SendHex8+0x38>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff91 	bl	8000e70 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <UART_SendHex8+0x38>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff89 	bl	8000e70 <UART_SendChar>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08009d74 	.word	0x08009d74

08000f6c <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da05      	bge.n	8000f8a <UART_SendInt+0x1e>
		UART_SendChar('-');
 8000f7e:	202d      	movs	r0, #45	; 0x2d
 8000f80:	f7ff ff76 	bl	8000e70 <UART_SendChar>
		num *= -1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	425b      	negs	r3, r3
 8000f88:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <UART_SendInt+0x90>)
 8000f8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f92:	1099      	asrs	r1, r3, #2
 8000f94:	17d3      	asrs	r3, r2, #31
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	1ad1      	subs	r1, r2, r3
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	1c59      	adds	r1, r3, #1
 8000fa8:	6179      	str	r1, [r7, #20]
 8000faa:	3230      	adds	r2, #48	; 0x30
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	3318      	adds	r3, #24
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <UART_SendInt+0x90>)
 8000fba:	fb82 1203 	smull	r1, r2, r2, r3
 8000fbe:	1092      	asrs	r2, r2, #2
 8000fc0:	17db      	asrs	r3, r3, #31
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dcde      	bgt.n	8000f8a <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e00a      	b.n	8000fea <UART_SendInt+0x7e>
 8000fd4:	f107 0208 	add.w	r2, r7, #8
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff46 	bl	8000e70 <UART_SendChar>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	daf1      	bge.n	8000fd4 <UART_SendInt+0x68>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	66666667 	.word	0x66666667

08001000 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <nRF24_TransmitPacket+0x94>)
 800100e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001010:	f7ff ff06 	bl	8000e20 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 fc94 	bl	8003946 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800101e:	f7ff ff0d 	bl	8000e3c <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001022:	f002 fc4a 	bl	80038ba <nRF24_GetStatus>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <nRF24_TransmitPacket+0x22>
 800103e:	e000      	b.n	8001042 <nRF24_TransmitPacket+0x42>
			break;
 8001040:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001042:	f7ff feed 	bl	8000e20 <nRF24_CE_L>

	if (!wait) {
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 800104c:	2302      	movs	r3, #2
 800104e:	e01d      	b.n	800108c <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <nRF24_TransmitPacket+0x98>)
 8001052:	f7ff ff1f 	bl	8000e94 <UART_SendStr>
	UART_SendHex8(status);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff68 	bl	8000f30 <UART_SendHex8>
	UART_SendStr("] ");
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <nRF24_TransmitPacket+0x9c>)
 8001062:	f7ff ff17 	bl	8000e94 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001066:	f002 fc59 	bl	800391c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001074:	2303      	movs	r3, #3
 8001076:	e009      	b.n	800108c <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001082:	2301      	movs	r3, #1
 8001084:	e002      	b.n	800108c <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001086:	f002 fc39 	bl	80038fc <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	000fffff 	.word	0x000fffff
 8001098:	08009d88 	.word	0x08009d88
 800109c:	08009d8c 	.word	0x08009d8c

080010a0 <runRadio>:

#endif // DEMO_TX_

int runRadio(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nDiscoF429 is online.\r\n");
 80010aa:	48be      	ldr	r0, [pc, #760]	; (80013a4 <runRadio+0x304>)
 80010ac:	f7ff fef2 	bl	8000e94 <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 80010b0:	f7ff feb6 	bl	8000e20 <nRF24_CE_L>
	Delay_ms(100);
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f7ff fecf 	bl	8000e58 <Delay_ms>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 80010ba:	48bb      	ldr	r0, [pc, #748]	; (80013a8 <runRadio+0x308>)
 80010bc:	f7ff feea 	bl	8000e94 <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	while (!nRF24_Check()) { // try indefinitely
 80010c0:	e007      	b.n	80010d2 <runRadio+0x32>
		UART_SendStr("FAIL\r\n");
 80010c2:	48ba      	ldr	r0, [pc, #744]	; (80013ac <runRadio+0x30c>)
 80010c4:	f7ff fee6 	bl	8000e94 <UART_SendStr>
		Toggle_LED();
 80010c8:	f7ff fef8 	bl	8000ebc <Toggle_LED>
		Delay_ms(50);
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f7ff fec3 	bl	8000e58 <Delay_ms>
	while (!nRF24_Check()) { // try indefinitely
 80010d2:	f002 fa41 	bl	8003558 <nRF24_Check>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f2      	beq.n	80010c2 <runRadio+0x22>
	}
	
// #pragma clang diagnostic pop
	UART_SendStr("OK\r\n");
 80010dc:	48b4      	ldr	r0, [pc, #720]	; (80013b0 <runRadio+0x310>)
 80010de:	f7ff fed9 	bl	8000e94 <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 80010e2:	f002 f9ec 	bl	80034be <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(CHANNEL_NUMBER);
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f002 fb11 	bl	800370e <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_RATE);
 80010ec:	2008      	movs	r0, #8
 80010ee:	f002 fbac 	bl	800384a <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 80010f2:	200c      	movs	r0, #12
 80010f4:	f002 faea 	bl	80036cc <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f002 fb31 	bl	8003760 <nRF24_SetAddrWidth>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR[] = { 'E', 'S', 'B' };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 80010fe:	49ad      	ldr	r1, [pc, #692]	; (80013b4 <runRadio+0x314>)
 8001100:	2006      	movs	r0, #6
 8001102:	f002 fb3d 	bl	8003780 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8001106:	49ab      	ldr	r1, [pc, #684]	; (80013b4 <runRadio+0x314>)
 8001108:	2000      	movs	r0, #0
 800110a:	f002 fb39 	bl	8003780 <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800110e:	2006      	movs	r0, #6
 8001110:	f002 fb80 	bl	8003814 <nRF24_SetTXPower>

    // Configure auto retransmit: 10 retransmissions with pause of 2500s in between
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8001114:	210a      	movs	r1, #10
 8001116:	2009      	movs	r0, #9
 8001118:	f002 fb07 	bl	800372a <nRF24_SetAutoRetr>

    // Enable Auto-ACK for pipe#0 (for ACK packets)
    nRF24_EnableAA(nRF24_PIPE0);
 800111c:	2000      	movs	r0, #0
 800111e:	f002 fbaf 	bl	8003880 <nRF24_EnableAA>

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001122:	2000      	movs	r0, #0
 8001124:	f002 fa65 	bl	80035f2 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8001128:	f002 fbf8 	bl	800391c <nRF24_ClearIRQFlags>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 800112c:	2001      	movs	r0, #1
 800112e:	f002 fa81 	bl	8003634 <nRF24_SetDynamicPayloadLength>
	nRF24_SetPayloadWithAck(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f002 faa8 	bl	8003688 <nRF24_SetPayloadWithAck>


	// Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8001138:	2002      	movs	r0, #2
 800113a:	f002 fa3b 	bl	80035b4 <nRF24_SetPowerMode>


    // Some variables
    uint32_t packets_lost = 0; // global counter of lost packets
 800113e:	2300      	movs	r3, #0
 8001140:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001144:	f102 0214 	add.w	r2, r2, #20
 8001148:	6013      	str	r3, [r2, #0]
	uint8_t otx_arc_cnt; // retransmit count


	 // The main loop

	    j = 0; /* octets a transmettre */
 800114a:	4b9b      	ldr	r3, [pc, #620]	; (80013b8 <runRadio+0x318>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

		int l;
		int Tableau_Test [32][32];

		for (k=0;k<32;k++)
 8001150:	4b9a      	ldr	r3, [pc, #616]	; (80013bc <runRadio+0x31c>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e034      	b.n	80011c2 <runRadio+0x122>
		{
			for(l=0;l<32;l++)
 8001158:	2300      	movs	r3, #0
 800115a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800115e:	f102 0210 	add.w	r2, r2, #16
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e021      	b.n	80011aa <runRadio+0x10a>
			{
			Tableau_Test [k][l] = (uint8_t) l;
 8001166:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800116a:	f103 0310 	add.w	r3, r3, #16
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b92      	ldr	r3, [pc, #584]	; (80013bc <runRadio+0x31c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800117c:	4610      	mov	r0, r2
 800117e:	015a      	lsls	r2, r3, #5
 8001180:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001184:	f103 0310 	add.w	r3, r3, #16
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4403      	add	r3, r0
 8001190:	f843 1c14 	str.w	r1, [r3, #-20]
			for(l=0;l<32;l++)
 8001194:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001198:	f103 0310 	add.w	r3, r3, #16
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80011a4:	f102 0210 	add.w	r2, r2, #16
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80011ae:	f103 0310 	add.w	r3, r3, #16
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	ddd6      	ble.n	8001166 <runRadio+0xc6>
		for (k=0;k<32;k++)
 80011b8:	4b80      	ldr	r3, [pc, #512]	; (80013bc <runRadio+0x31c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a7f      	ldr	r2, [pc, #508]	; (80013bc <runRadio+0x31c>)
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <runRadio+0x31c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b1f      	cmp	r3, #31
 80011c8:	d9c6      	bls.n	8001158 <runRadio+0xb8>
	// #pragma clang diagnostic push
	// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	    while (1) {
	// #pragma clang diagnostic pop

			payload_length = (uint8_t) 32;
 80011ca:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <runRadio+0x320>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	701a      	strb	r2, [r3, #0]

			//Prepare data packet
			for (i=0;i<32;i++)
 80011d0:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <runRadio+0x324>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e022      	b.n	800121e <runRadio+0x17e>
			{
				for(k=0;k<32;k++)
 80011d8:	4b78      	ldr	r3, [pc, #480]	; (80013bc <runRadio+0x31c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e015      	b.n	800120c <runRadio+0x16c>
				{
					nRF24_payload[k] = Tableau_Test [i][k] ;
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <runRadio+0x324>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <runRadio+0x31c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011ec:	0152      	lsls	r2, r2, #5
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80011f8:	4b70      	ldr	r3, [pc, #448]	; (80013bc <runRadio+0x31c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b2d1      	uxtb	r1, r2
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <runRadio+0x328>)
 8001200:	54d1      	strb	r1, [r2, r3]
				for(k=0;k<32;k++)
 8001202:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <runRadio+0x31c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <runRadio+0x31c>)
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <runRadio+0x31c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b1f      	cmp	r3, #31
 8001212:	d9e5      	bls.n	80011e0 <runRadio+0x140>
			for (i=0;i<32;i++)
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <runRadio+0x324>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <runRadio+0x324>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <runRadio+0x324>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b1f      	cmp	r3, #31
 8001224:	d9d8      	bls.n	80011d8 <runRadio+0x138>
	    		if (j > 0x000000FF) j = 0;
	    	}
	    	*/

	    	// Print a payload
    	UART_SendStr("PAYLOAD:>");
 8001226:	4869      	ldr	r0, [pc, #420]	; (80013cc <runRadio+0x32c>)
 8001228:	f7ff fe34 	bl	8000e94 <UART_SendStr>
    	UART_SendBufHex((char *)nRF24_payload, payload_length);
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <runRadio+0x320>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	4864      	ldr	r0, [pc, #400]	; (80013c8 <runRadio+0x328>)
 8001236:	f7ff fe4d 	bl	8000ed4 <UART_SendBufHex>
    	UART_SendStr("< ... TX: ");
 800123a:	4865      	ldr	r0, [pc, #404]	; (80013d0 <runRadio+0x330>)
 800123c:	f7ff fe2a 	bl	8000e94 <UART_SendStr>

        uint8_t *buf=nRF24_payload;
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <runRadio+0x328>)
 8001242:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001246:	f102 020c 	add.w	r2, r2, #12
 800124a:	6013      	str	r3, [r2, #0]
        uint8_t str[64]={0};
 800124c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001250:	2200      	movs	r2, #0
 8001252:	f843 2c54 	str.w	r2, [r3, #-84]
 8001256:	3b50      	subs	r3, #80	; 0x50
 8001258:	223c      	movs	r2, #60	; 0x3c
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fd6d 	bl	8009d3c <memset>
        for (i = 0; i < payload_length; i++) {
 8001262:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <runRadio+0x324>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e039      	b.n	80012de <runRadio+0x23e>
            uint8_t ch = *buf++;
 800126a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800126e:	f103 030c 	add.w	r3, r3, #12
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800127a:	f101 010c 	add.w	r1, r1, #12
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001286:	f102 0204 	add.w	r2, r2, #4
 800128a:	7013      	strb	r3, [r2, #0]
            str[2*i  ]=HEX_CHARS[(ch >> 4) % 0x10];
 800128c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001290:	f103 0304 	add.w	r3, r3, #4
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <runRadio+0x324>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <runRadio+0x334>)
 80012a4:	5c52      	ldrb	r2, [r2, r1]
 80012a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012aa:	440b      	add	r3, r1
 80012ac:	f803 2c54 	strb.w	r2, [r3, #-84]
            str[2*i+1]=HEX_CHARS[(ch & 0x0f) % 0x10];
 80012b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012b4:	f103 0304 	add.w	r3, r3, #4
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f003 020f 	and.w	r2, r3, #15
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <runRadio+0x324>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	3301      	adds	r3, #1
 80012c6:	4943      	ldr	r1, [pc, #268]	; (80013d4 <runRadio+0x334>)
 80012c8:	5c8a      	ldrb	r2, [r1, r2]
 80012ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012ce:	440b      	add	r3, r1
 80012d0:	f803 2c54 	strb.w	r2, [r3, #-84]
        for (i = 0; i < payload_length; i++) {
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <runRadio+0x324>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <runRadio+0x324>)
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <runRadio+0x320>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <runRadio+0x324>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8be      	bhi.n	800126a <runRadio+0x1ca>
        }

        /* Display message */
        int nrow;
        if (nrow>=20) {
 80012ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80012f0:	f103 0308 	add.w	r3, r3, #8
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b13      	cmp	r3, #19
 80012f8:	dd09      	ble.n	800130e <runRadio+0x26e>
        	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80012fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012fe:	f001 fb07 	bl	8002910 <BSP_LCD_Clear>
        	nrow=0;
 8001302:	2300      	movs	r3, #0
 8001304:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001308:	f102 0208 	add.w	r2, r2, #8
 800130c:	6013      	str	r3, [r2, #0]
        }
        BSP_LCD_DisplayStringAtLine(nrow++, (uint8_t*)str);
 800130e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001312:	f103 0308 	add.w	r3, r3, #8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800131e:	f101 0108 	add.w	r1, r1, #8
 8001322:	600a      	str	r2, [r1, #0]
 8001324:	b29a      	uxth	r2, r3
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	3b14      	subs	r3, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f001 fc18 	bl	8002b64 <BSP_LCD_DisplayStringAtLine>

    	// Transmit a packet
    	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <runRadio+0x320>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4823      	ldr	r0, [pc, #140]	; (80013c8 <runRadio+0x328>)
 800133c:	f7ff fe60 	bl	8001000 <nRF24_TransmitPacket>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <runRadio+0x338>)
 8001346:	701a      	strb	r2, [r3, #0]
		otx = nRF24_GetRetransmitCounters();
 8001348:	f002 fabf 	bl	80038ca <nRF24_GetRetransmitCounters>
 800134c:	4603      	mov	r3, r0
 800134e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001352:	f102 0207 	add.w	r2, r2, #7
 8001356:	7013      	strb	r3, [r2, #0]
		nRF24_ReadPayloadDpl(nRF24_payload, &payload_length );
 8001358:	4919      	ldr	r1, [pc, #100]	; (80013c0 <runRadio+0x320>)
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <runRadio+0x328>)
 800135c:	f002 fb60 	bl	8003a20 <nRF24_ReadPayloadDpl>
		otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 8001360:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001364:	f103 0307 	add.w	r3, r3, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001370:	f102 0206 	add.w	r2, r2, #6
 8001374:	7013      	strb	r3, [r2, #0]
		otx_arc_cnt  = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 8001376:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800137a:	f103 0307 	add.w	r3, r3, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001388:	f102 0205 	add.w	r2, r2, #5
 800138c:	7013      	strb	r3, [r2, #0]
    	switch (tx_res) {
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <runRadio+0x338>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d02a      	beq.n	80013ec <runRadio+0x34c>
 8001396:	2b03      	cmp	r3, #3
 8001398:	dc3e      	bgt.n	8001418 <runRadio+0x378>
 800139a:	2b01      	cmp	r3, #1
 800139c:	d01e      	beq.n	80013dc <runRadio+0x33c>
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d020      	beq.n	80013e4 <runRadio+0x344>
 80013a2:	e039      	b.n	8001418 <runRadio+0x378>
 80013a4:	08009d90 	.word	0x08009d90
 80013a8:	08009dac 	.word	0x08009dac
 80013ac:	08009dc0 	.word	0x08009dc0
 80013b0:	08009dc8 	.word	0x08009dc8
 80013b4:	08009e40 	.word	0x08009e40
 80013b8:	20000654 	.word	0x20000654
 80013bc:	20000658 	.word	0x20000658
 80013c0:	2000065c 	.word	0x2000065c
 80013c4:	20000650 	.word	0x20000650
 80013c8:	20000630 	.word	0x20000630
 80013cc:	08009dd0 	.word	0x08009dd0
 80013d0:	08009ddc 	.word	0x08009ddc
 80013d4:	08009d74 	.word	0x08009d74
 80013d8:	2000065d 	.word	0x2000065d
			case nRF24_TX_SUCCESS:
				UART_SendStr("OK");
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <runRadio+0x3d4>)
 80013de:	f7ff fd59 	bl	8000e94 <UART_SendStr>
				break;
 80013e2:	e01d      	b.n	8001420 <runRadio+0x380>
			case nRF24_TX_TIMEOUT:
				UART_SendStr("TIMEOUT");
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <runRadio+0x3d8>)
 80013e6:	f7ff fd55 	bl	8000e94 <UART_SendStr>
				break;
 80013ea:	e019      	b.n	8001420 <runRadio+0x380>
			case nRF24_TX_MAXRT:
				UART_SendStr("MAX RETRANSMIT");
 80013ec:	4823      	ldr	r0, [pc, #140]	; (800147c <runRadio+0x3dc>)
 80013ee:	f7ff fd51 	bl	8000e94 <UART_SendStr>
				packets_lost += otx_plos_cnt;
 80013f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80013f6:	f103 0306 	add.w	r3, r3, #6
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001400:	f102 0214 	add.w	r2, r2, #20
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	4413      	add	r3, r2
 8001408:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800140c:	f102 0214 	add.w	r2, r2, #20
 8001410:	6013      	str	r3, [r2, #0]
				nRF24_ResetPLOS();
 8001412:	f002 fa62 	bl	80038da <nRF24_ResetPLOS>
				break;
 8001416:	e003      	b.n	8001420 <runRadio+0x380>
			default:
				UART_SendStr("ERROR");
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <runRadio+0x3e0>)
 800141a:	f7ff fd3b 	bl	8000e94 <UART_SendStr>
				break;
 800141e:	bf00      	nop
		}
		UART_SendStr("   ACK_PAYLOAD=>");
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <runRadio+0x3e4>)
 8001422:	f7ff fd37 	bl	8000e94 <UART_SendStr>
    	UART_SendBufHex((char *) nRF24_payload, payload_length);
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <runRadio+0x3e8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <runRadio+0x3ec>)
 8001430:	f7ff fd50 	bl	8000ed4 <UART_SendBufHex>
    	UART_SendStr("<   ARC=");
 8001434:	4816      	ldr	r0, [pc, #88]	; (8001490 <runRadio+0x3f0>)
 8001436:	f7ff fd2d 	bl	8000e94 <UART_SendStr>
		UART_SendInt(otx_arc_cnt);
 800143a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800143e:	f103 0305 	add.w	r3, r3, #5
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fd91 	bl	8000f6c <UART_SendInt>
		UART_SendStr(" LOST=");
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <runRadio+0x3f4>)
 800144c:	f7ff fd22 	bl	8000e94 <UART_SendStr>
		UART_SendInt(packets_lost);
 8001450:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001454:	f103 0314 	add.w	r3, r3, #20
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fd86 	bl	8000f6c <UART_SendInt>
		UART_SendStr("\r\n");
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <runRadio+0x3f8>)
 8001462:	f7ff fd17 	bl	8000e94 <UART_SendStr>

    	// Wait ~0.5s
    	Delay_ms(500);
 8001466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146a:	f7ff fcf5 	bl	8000e58 <Delay_ms>
		Toggle_LED();
 800146e:	f7ff fd25 	bl	8000ebc <Toggle_LED>
	    while (1) {
 8001472:	e6aa      	b.n	80011ca <runRadio+0x12a>
 8001474:	08009de8 	.word	0x08009de8
 8001478:	08009dec 	.word	0x08009dec
 800147c:	08009df4 	.word	0x08009df4
 8001480:	08009e04 	.word	0x08009e04
 8001484:	08009e0c 	.word	0x08009e0c
 8001488:	2000065c 	.word	0x2000065c
 800148c:	20000630 	.word	0x20000630
 8001490:	08009e20 	.word	0x08009e20
 8001494:	08009e2c 	.word	0x08009e2c
 8001498:	08009e34 	.word	0x08009e34

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_CRC_MspInit+0x3c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d10d      	bne.n	800151a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_CRC_MspInit+0x40>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_CRC_MspInit+0x40>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_CRC_MspInit+0x40>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023000 	.word	0x40023000
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_DMA2D_MspInit+0x3c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10d      	bne.n	800155e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_DMA2D_MspInit+0x40>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_DMA2D_MspInit+0x40>)
 800154c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_DMA2D_MspInit+0x40>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	4002b000 	.word	0x4002b000
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_I2C_MspInit+0xc4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d14b      	bne.n	800162e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_I2C_MspInit+0xc8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_I2C_MspInit+0xc8>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_I2C_MspInit+0xc8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_I2C_MspInit+0xc8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <HAL_I2C_MspInit+0xc8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_I2C_MspInit+0xc8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80015ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d4:	2312      	movs	r3, #18
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e0:	2304      	movs	r3, #4
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0xcc>)
 80015ec:	f002 ffd6 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f6:	2312      	movs	r3, #18
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001602:	2304      	movs	r3, #4
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <HAL_I2C_MspInit+0xd0>)
 800160e:	f002 ffc5 	bl	800459c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_I2C_MspInit+0xc8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_I2C_MspInit+0xc8>)
 800161c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_I2C_MspInit+0xc8>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40005c00 	.word	0x40005c00
 800163c:	40023800 	.word	0x40023800
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09a      	sub	sp, #104	; 0x68
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	2230      	movs	r2, #48	; 0x30
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f008 fb67 	bl	8009d3c <memset>
  if(hltdc->Instance==LTDC)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a81      	ldr	r2, [pc, #516]	; (8001878 <HAL_LTDC_MspInit+0x230>)
 8001674:	4293      	cmp	r3, r2
 8001676:	f040 80fa 	bne.w	800186e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800167e:	2332      	movs	r3, #50	; 0x32
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001686:	2300      	movs	r3, #0
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fdca 	bl	8007228 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800169a:	f7ff fbbb 	bl	8000e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a75      	ldr	r2, [pc, #468]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b6f      	ldr	r3, [pc, #444]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b6c      	ldr	r3, [pc, #432]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a67      	ldr	r2, [pc, #412]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a60      	ldr	r2, [pc, #384]	; (800187c <HAL_LTDC_MspInit+0x234>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b5e      	ldr	r3, [pc, #376]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b5a      	ldr	r3, [pc, #360]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a59      	ldr	r2, [pc, #356]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_LTDC_MspInit+0x234>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <HAL_LTDC_MspInit+0x234>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_LTDC_MspInit+0x234>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001774:	230e      	movs	r3, #14
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800177c:	4619      	mov	r1, r3
 800177e:	4840      	ldr	r0, [pc, #256]	; (8001880 <HAL_LTDC_MspInit+0x238>)
 8001780:	f002 ff0c 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001784:	f641 0358 	movw	r3, #6232	; 0x1858
 8001788:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001796:	230e      	movs	r3, #14
 8001798:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800179e:	4619      	mov	r1, r3
 80017a0:	4838      	ldr	r0, [pc, #224]	; (8001884 <HAL_LTDC_MspInit+0x23c>)
 80017a2:	f002 fefb 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80017a6:	2303      	movs	r3, #3
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017b6:	2309      	movs	r3, #9
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017be:	4619      	mov	r1, r3
 80017c0:	4831      	ldr	r0, [pc, #196]	; (8001888 <HAL_LTDC_MspInit+0x240>)
 80017c2:	f002 feeb 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017c6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d8:	230e      	movs	r3, #14
 80017da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e0:	4619      	mov	r1, r3
 80017e2:	4829      	ldr	r0, [pc, #164]	; (8001888 <HAL_LTDC_MspInit+0x240>)
 80017e4:	f002 feda 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017e8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fa:	230e      	movs	r3, #14
 80017fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <HAL_LTDC_MspInit+0x244>)
 8001806:	f002 fec9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800180a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800181c:	230e      	movs	r3, #14
 800181e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001824:	4619      	mov	r1, r3
 8001826:	481a      	ldr	r0, [pc, #104]	; (8001890 <HAL_LTDC_MspInit+0x248>)
 8001828:	f002 feb8 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800182c:	2348      	movs	r3, #72	; 0x48
 800182e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800183c:	230e      	movs	r3, #14
 800183e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001844:	4619      	mov	r1, r3
 8001846:	4813      	ldr	r0, [pc, #76]	; (8001894 <HAL_LTDC_MspInit+0x24c>)
 8001848:	f002 fea8 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800184c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001850:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800185e:	2309      	movs	r3, #9
 8001860:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001866:	4619      	mov	r1, r3
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <HAL_LTDC_MspInit+0x244>)
 800186a:	f002 fe97 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3768      	adds	r7, #104	; 0x68
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40016800 	.word	0x40016800
 800187c:	40023800 	.word	0x40023800
 8001880:	40021400 	.word	0x40021400
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	40021800 	.word	0x40021800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00

08001898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <HAL_SPI_MspInit+0x128>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d14b      	bne.n	8001952 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a40      	ldr	r2, [pc, #256]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800190e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001920:	2306      	movs	r3, #6
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4827      	ldr	r0, [pc, #156]	; (80019c8 <HAL_SPI_MspInit+0x130>)
 800192c:	f002 fe36 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001930:	2308      	movs	r3, #8
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001940:	2306      	movs	r3, #6
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4820      	ldr	r0, [pc, #128]	; (80019cc <HAL_SPI_MspInit+0x134>)
 800194c:	f002 fe26 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001950:	e031      	b.n	80019b6 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI5)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_SPI_MspInit+0x138>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d12c      	bne.n	80019b6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 8001966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_SPI_MspInit+0x12c>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001994:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019a6:	2305      	movs	r3, #5
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <HAL_SPI_MspInit+0x13c>)
 80019b2:	f002 fdf3 	bl	800459c <HAL_GPIO_Init>
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40003c00 	.word	0x40003c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40015000 	.word	0x40015000
 80019d4:	40021400 	.word	0x40021400

080019d8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <HAL_SPI_MspDeInit+0x5c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10f      	bne.n	8001a0a <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_SPI_MspDeInit+0x60>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_SPI_MspDeInit+0x60>)
 80019f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 80019f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80019fa:	4810      	ldr	r0, [pc, #64]	; (8001a3c <HAL_SPI_MspDeInit+0x64>)
 80019fc:	f002 ff7a 	bl	80048f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001a00:	2108      	movs	r1, #8
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <HAL_SPI_MspDeInit+0x68>)
 8001a04:	f002 ff76 	bl	80048f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001a08:	e00f      	b.n	8001a2a <HAL_SPI_MspDeInit+0x52>
  else if(hspi->Instance==SPI5)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_SPI_MspDeInit+0x6c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d10a      	bne.n	8001a2a <HAL_SPI_MspDeInit+0x52>
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_SPI_MspDeInit+0x60>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_SPI_MspDeInit+0x60>)
 8001a1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001a20:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <HAL_SPI_MspDeInit+0x70>)
 8001a26:	f002 ff65 	bl	80048f4 <HAL_GPIO_DeInit>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40003c00 	.word	0x40003c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40015000 	.word	0x40015000
 8001a48:	40021400 	.word	0x40021400

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_TIM_Base_MspInit+0x3c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10d      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_TIM_Base_MspInit+0x40>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_TIM_Base_MspInit+0x40>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0x84>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12c      	bne.n	8001b0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_UART_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001aea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001afc:	2307      	movs	r3, #7
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_UART_MspInit+0x8c>)
 8001b08:	f002 fd48 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_HCD_MspInit+0xb0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d141      	bne.n	8001bc6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001b5e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001b70:	230c      	movs	r3, #12
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4817      	ldr	r0, [pc, #92]	; (8001bd8 <HAL_HCD_MspInit+0xb8>)
 8001b7c:	f002 fd0e 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <HAL_HCD_MspInit+0xb8>)
 8001b96:	f002 fd01 	bl	800459c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001ba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_HCD_MspInit+0xb4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	204d      	movs	r0, #77	; 0x4d
 8001bbc:	f002 f85e 	bl	8003c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001bc0:	204d      	movs	r0, #77	; 0x4d
 8001bc2:	f002 f877 	bl	8003cb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40040000 	.word	0x40040000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400

08001bdc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_FMC_MspInit+0x104>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d16f      	bne.n	8001cd8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_FMC_MspInit+0x104>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_FMC_MspInit+0x108>)
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	4a37      	ldr	r2, [pc, #220]	; (8001ce4 <HAL_FMC_MspInit+0x108>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6393      	str	r3, [r2, #56]	; 0x38
 8001c0e:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_FMC_MspInit+0x108>)
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001c1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c1e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	482c      	ldr	r0, [pc, #176]	; (8001ce8 <HAL_FMC_MspInit+0x10c>)
 8001c36:	f002 fcb1 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4826      	ldr	r0, [pc, #152]	; (8001cec <HAL_FMC_MspInit+0x110>)
 8001c54:	f002 fca2 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001c58:	f248 1333 	movw	r3, #33075	; 0x8133
 8001c5c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <HAL_FMC_MspInit+0x114>)
 8001c74:	f002 fc92 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001c78:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c7c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <HAL_FMC_MspInit+0x118>)
 8001c94:	f002 fc82 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001c98:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c9c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001caa:	230c      	movs	r3, #12
 8001cac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <HAL_FMC_MspInit+0x11c>)
 8001cb4:	f002 fc72 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001cb8:	2360      	movs	r3, #96	; 0x60
 8001cba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <HAL_FMC_MspInit+0x120>)
 8001cd2:	f002 fc63 	bl	800459c <HAL_GPIO_Init>
 8001cd6:	e000      	b.n	8001cda <HAL_FMC_MspInit+0xfe>
    return;
 8001cd8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000660 	.word	0x20000660
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40020400 	.word	0x40020400

08001d00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d08:	f7ff ff68 	bl	8001bdc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	; 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fa3a 	bl	80071c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d5a:	f005 fa0b 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	6378      	str	r0, [r7, #52]	; 0x34
 8001d60:	e004      	b.n	8001d6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d62:	f005 fa07 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8001d66:	4603      	mov	r3, r0
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	3b01      	subs	r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_InitTick+0xec>)
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_InitTick+0xf0>)
 8001d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_InitTick+0xec>)
 8001d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d86:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_InitTick+0xec>)
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_InitTick+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_InitTick+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_InitTick+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001da0:	4817      	ldr	r0, [pc, #92]	; (8001e00 <HAL_InitTick+0xec>)
 8001da2:	f006 fa71 	bl	8008288 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11b      	bne.n	8001dec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001db4:	4812      	ldr	r0, [pc, #72]	; (8001e00 <HAL_InitTick+0xec>)
 8001db6:	f006 fab7 	bl	8008328 <HAL_TIM_Base_Start_IT>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc8:	2036      	movs	r0, #54	; 0x36
 8001dca:	f001 ff73 	bl	8003cb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d808      	bhi.n	8001de6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	2036      	movs	r0, #54	; 0x36
 8001dda:	f001 ff4f 	bl	8003c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_InitTick+0xf4>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e002      	b.n	8001dec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3738      	adds	r7, #56	; 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	20000664 	.word	0x20000664
 8001e04:	40001000 	.word	0x40001000
 8001e08:	20000054 	.word	0x20000054

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM6_DAC_IRQHandler+0x10>)
 8001e6a:	f006 facd 	bl	8008408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000664 	.word	0x20000664

08001e78 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <OTG_HS_IRQHandler+0x10>)
 8001e7e:	f002 feda 	bl	8004c36 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200002f8 	.word	0x200002f8

08001e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ecc:	4c0b      	ldr	r4, [pc, #44]	; (8001efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eda:	f7ff ffd7 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f007 ff09 	bl	8009cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7fe fb0d 	bl	8000500 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ef4:	0800b940 	.word	0x0800b940
  ldr r2, =_sbss
 8001ef8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001efc:	20000904 	.word	0x20000904

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>

08001f02 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f06:	f000 fab1 	bl	800246c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f0a:	20ca      	movs	r0, #202	; 0xca
 8001f0c:	f000 f95d 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f10:	20c3      	movs	r0, #195	; 0xc3
 8001f12:	f000 f967 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f16:	2008      	movs	r0, #8
 8001f18:	f000 f964 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001f1c:	2050      	movs	r0, #80	; 0x50
 8001f1e:	f000 f961 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f22:	20cf      	movs	r0, #207	; 0xcf
 8001f24:	f000 f951 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f95b 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f2e:	20c1      	movs	r0, #193	; 0xc1
 8001f30:	f000 f958 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f34:	2030      	movs	r0, #48	; 0x30
 8001f36:	f000 f955 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f3a:	20ed      	movs	r0, #237	; 0xed
 8001f3c:	f000 f945 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f000 f94f 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f000 f94c 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f4c:	2012      	movs	r0, #18
 8001f4e:	f000 f949 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f52:	2081      	movs	r0, #129	; 0x81
 8001f54:	f000 f946 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f58:	20e8      	movs	r0, #232	; 0xe8
 8001f5a:	f000 f936 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f5e:	2085      	movs	r0, #133	; 0x85
 8001f60:	f000 f940 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 f93d 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f6a:	2078      	movs	r0, #120	; 0x78
 8001f6c:	f000 f93a 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001f70:	20cb      	movs	r0, #203	; 0xcb
 8001f72:	f000 f92a 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001f76:	2039      	movs	r0, #57	; 0x39
 8001f78:	f000 f934 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001f7c:	202c      	movs	r0, #44	; 0x2c
 8001f7e:	f000 f931 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f92e 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001f88:	2034      	movs	r0, #52	; 0x34
 8001f8a:	f000 f92b 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f000 f928 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001f94:	20f7      	movs	r0, #247	; 0xf7
 8001f96:	f000 f918 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001f9a:	2020      	movs	r0, #32
 8001f9c:	f000 f922 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001fa0:	20ea      	movs	r0, #234	; 0xea
 8001fa2:	f000 f912 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f91c 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 f919 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001fb2:	20b1      	movs	r0, #177	; 0xb1
 8001fb4:	f000 f909 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 f913 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001fbe:	201b      	movs	r0, #27
 8001fc0:	f000 f910 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001fc4:	20b6      	movs	r0, #182	; 0xb6
 8001fc6:	f000 f900 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f000 f90a 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001fd0:	20a2      	movs	r0, #162	; 0xa2
 8001fd2:	f000 f907 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001fd6:	20c0      	movs	r0, #192	; 0xc0
 8001fd8:	f000 f8f7 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fdc:	2010      	movs	r0, #16
 8001fde:	f000 f901 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001fe2:	20c1      	movs	r0, #193	; 0xc1
 8001fe4:	f000 f8f1 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fe8:	2010      	movs	r0, #16
 8001fea:	f000 f8fb 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001fee:	20c5      	movs	r0, #197	; 0xc5
 8001ff0:	f000 f8eb 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001ff4:	2045      	movs	r0, #69	; 0x45
 8001ff6:	f000 f8f5 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ffa:	2015      	movs	r0, #21
 8001ffc:	f000 f8f2 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002000:	20c7      	movs	r0, #199	; 0xc7
 8002002:	f000 f8e2 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002006:	2090      	movs	r0, #144	; 0x90
 8002008:	f000 f8ec 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800200c:	2036      	movs	r0, #54	; 0x36
 800200e:	f000 f8dc 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002012:	20c8      	movs	r0, #200	; 0xc8
 8002014:	f000 f8e6 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002018:	20f2      	movs	r0, #242	; 0xf2
 800201a:	f000 f8d6 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f8e0 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002024:	20b0      	movs	r0, #176	; 0xb0
 8002026:	f000 f8d0 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800202a:	20c2      	movs	r0, #194	; 0xc2
 800202c:	f000 f8da 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002030:	20b6      	movs	r0, #182	; 0xb6
 8002032:	f000 f8ca 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002036:	200a      	movs	r0, #10
 8002038:	f000 f8d4 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800203c:	20a7      	movs	r0, #167	; 0xa7
 800203e:	f000 f8d1 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002042:	2027      	movs	r0, #39	; 0x27
 8002044:	f000 f8ce 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002048:	2004      	movs	r0, #4
 800204a:	f000 f8cb 	bl	80021e4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800204e:	202a      	movs	r0, #42	; 0x2a
 8002050:	f000 f8bb 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f8c5 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f8c2 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002060:	2000      	movs	r0, #0
 8002062:	f000 f8bf 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002066:	20ef      	movs	r0, #239	; 0xef
 8002068:	f000 f8bc 	bl	80021e4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800206c:	202b      	movs	r0, #43	; 0x2b
 800206e:	f000 f8ac 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f8b6 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f8b3 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 f8b0 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002084:	203f      	movs	r0, #63	; 0x3f
 8002086:	f000 f8ad 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800208a:	20f6      	movs	r0, #246	; 0xf6
 800208c:	f000 f89d 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 f8a7 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f8a4 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800209c:	2006      	movs	r0, #6
 800209e:	f000 f8a1 	bl	80021e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80020a2:	202c      	movs	r0, #44	; 0x2c
 80020a4:	f000 f891 	bl	80021ca <ili9341_WriteReg>
  LCD_Delay(200);
 80020a8:	20c8      	movs	r0, #200	; 0xc8
 80020aa:	f000 facd 	bl	8002648 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80020ae:	2026      	movs	r0, #38	; 0x26
 80020b0:	f000 f88b 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f000 f895 	bl	80021e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80020ba:	20e0      	movs	r0, #224	; 0xe0
 80020bc:	f000 f885 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020c0:	200f      	movs	r0, #15
 80020c2:	f000 f88f 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020c6:	2029      	movs	r0, #41	; 0x29
 80020c8:	f000 f88c 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80020cc:	2024      	movs	r0, #36	; 0x24
 80020ce:	f000 f889 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020d2:	200c      	movs	r0, #12
 80020d4:	f000 f886 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80020d8:	200e      	movs	r0, #14
 80020da:	f000 f883 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020de:	2009      	movs	r0, #9
 80020e0:	f000 f880 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80020e4:	204e      	movs	r0, #78	; 0x4e
 80020e6:	f000 f87d 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020ea:	2078      	movs	r0, #120	; 0x78
 80020ec:	f000 f87a 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80020f0:	203c      	movs	r0, #60	; 0x3c
 80020f2:	f000 f877 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020f6:	2009      	movs	r0, #9
 80020f8:	f000 f874 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80020fc:	2013      	movs	r0, #19
 80020fe:	f000 f871 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002102:	2005      	movs	r0, #5
 8002104:	f000 f86e 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002108:	2017      	movs	r0, #23
 800210a:	f000 f86b 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800210e:	2011      	movs	r0, #17
 8002110:	f000 f868 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f865 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800211a:	20e1      	movs	r0, #225	; 0xe1
 800211c:	f000 f855 	bl	80021ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f85f 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002126:	2016      	movs	r0, #22
 8002128:	f000 f85c 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800212c:	201b      	movs	r0, #27
 800212e:	f000 f859 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002132:	2004      	movs	r0, #4
 8002134:	f000 f856 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002138:	2011      	movs	r0, #17
 800213a:	f000 f853 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800213e:	2007      	movs	r0, #7
 8002140:	f000 f850 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002144:	2031      	movs	r0, #49	; 0x31
 8002146:	f000 f84d 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800214a:	2033      	movs	r0, #51	; 0x33
 800214c:	f000 f84a 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002150:	2042      	movs	r0, #66	; 0x42
 8002152:	f000 f847 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002156:	2005      	movs	r0, #5
 8002158:	f000 f844 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800215c:	200c      	movs	r0, #12
 800215e:	f000 f841 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002162:	200a      	movs	r0, #10
 8002164:	f000 f83e 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002168:	2028      	movs	r0, #40	; 0x28
 800216a:	f000 f83b 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800216e:	202f      	movs	r0, #47	; 0x2f
 8002170:	f000 f838 	bl	80021e4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002174:	200f      	movs	r0, #15
 8002176:	f000 f835 	bl	80021e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800217a:	2011      	movs	r0, #17
 800217c:	f000 f825 	bl	80021ca <ili9341_WriteReg>
  LCD_Delay(200);
 8002180:	20c8      	movs	r0, #200	; 0xc8
 8002182:	f000 fa61 	bl	8002648 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002186:	2029      	movs	r0, #41	; 0x29
 8002188:	f000 f81f 	bl	80021ca <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f000 f81c 	bl	80021ca <ili9341_WriteReg>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}

08002196 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800219a:	f000 f967 	bl	800246c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800219e:	2103      	movs	r1, #3
 80021a0:	20d3      	movs	r0, #211	; 0xd3
 80021a2:	f000 f82c 	bl	80021fe <ili9341_ReadData>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29b      	uxth	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021b2:	2029      	movs	r0, #41	; 0x29
 80021b4:	f000 f809 	bl	80021ca <ili9341_WriteReg>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021c0:	2028      	movs	r0, #40	; 0x28
 80021c2:	f000 f802 	bl	80021ca <ili9341_WriteReg>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}

080021ca <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f9e2 	bl	80025a0 <LCD_IO_WriteReg>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f9b3 	bl	800255c <LCD_IO_WriteData>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	460a      	mov	r2, r1
 8002208:	80fb      	strh	r3, [r7, #6]
 800220a:	4613      	mov	r3, r2
 800220c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800220e:	797a      	ldrb	r2, [r7, #5]
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9e5 	bl	80025e4 <LCD_IO_ReadData>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002228:	23f0      	movs	r3, #240	; 0xf0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002238:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10e      	bne.n	8002276 <BSP_LED_Init+0x2e>
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <BSP_LED_Init+0x9c>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <BSP_LED_Init+0x9c>)
 8002262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <BSP_LED_Init+0x9c>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	e010      	b.n	8002298 <BSP_LED_Init+0x50>
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10d      	bne.n	8002298 <BSP_LED_Init+0x50>
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <BSP_LED_Init+0x9c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <BSP_LED_Init+0x9c>)
 8002286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228a:	6313      	str	r3, [r2, #48]	; 0x30
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <BSP_LED_Init+0x9c>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <BSP_LED_Init+0xa0>)
 800229c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <BSP_LED_Init+0xa4>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	f107 0214 	add.w	r2, r7, #20
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 f96d 	bl	800459c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a09      	ldr	r2, [pc, #36]	; (80022ec <BSP_LED_Init+0xa4>)
 80022c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <BSP_LED_Init+0xa0>)
 80022ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	f002 fc19 	bl	8004b0c <HAL_GPIO_WritePin>
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08009e5c 	.word	0x08009e5c
 80022ec:	2000003c 	.word	0x2000003c

080022f0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80022f4:	4819      	ldr	r0, [pc, #100]	; (800235c <SPIx_Init+0x6c>)
 80022f6:	f005 fe88 	bl	800800a <HAL_SPI_GetState>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12b      	bne.n	8002358 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <SPIx_Init+0x6c>)
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <SPIx_Init+0x70>)
 8002304:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <SPIx_Init+0x6c>)
 8002308:	2218      	movs	r2, #24
 800230a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <SPIx_Init+0x6c>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <SPIx_Init+0x6c>)
 8002314:	2200      	movs	r2, #0
 8002316:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <SPIx_Init+0x6c>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <SPIx_Init+0x6c>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <SPIx_Init+0x6c>)
 8002326:	2207      	movs	r2, #7
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <SPIx_Init+0x6c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <SPIx_Init+0x6c>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <SPIx_Init+0x6c>)
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <SPIx_Init+0x6c>)
 8002340:	2200      	movs	r2, #0
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SPIx_Init+0x6c>)
 8002346:	f44f 7282 	mov.w	r2, #260	; 0x104
 800234a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <SPIx_Init+0x6c>)
 800234e:	f000 f853 	bl	80023f8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002352:	4802      	ldr	r0, [pc, #8]	; (800235c <SPIx_Init+0x6c>)
 8002354:	f005 f9b9 	bl	80076ca <HAL_SPI_Init>
  } 
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200006ac 	.word	0x200006ac
 8002360:	40015000 	.word	0x40015000

08002364 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	b29a      	uxth	r2, r3
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <SPIx_Read+0x38>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f107 0108 	add.w	r1, r7, #8
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <SPIx_Read+0x3c>)
 8002380:	f005 fb90 	bl	8007aa4 <HAL_SPI_Receive>
 8002384:	4603      	mov	r3, r0
 8002386:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800238e:	f000 f827 	bl	80023e0 <SPIx_Error>
  }
  
  return readvalue;
 8002392:	68bb      	ldr	r3, [r7, #8]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000044 	.word	0x20000044
 80023a0:	200006ac 	.word	0x200006ac

080023a4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <SPIx_Write+0x34>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1db9      	adds	r1, r7, #6
 80023b8:	2201      	movs	r2, #1
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <SPIx_Write+0x38>)
 80023bc:	f005 fa36 	bl	800782c <HAL_SPI_Transmit>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80023ca:	f000 f809 	bl	80023e0 <SPIx_Error>
  }
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000044 	.word	0x20000044
 80023dc:	200006ac 	.word	0x200006ac

080023e0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <SPIx_Error+0x14>)
 80023e6:	f005 f9f9 	bl	80077dc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80023ea:	f7ff ff81 	bl	80022f0 <SPIx_Init>
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200006ac 	.word	0x200006ac

080023f8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <SPIx_MspInit+0x6c>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	4a16      	ldr	r2, [pc, #88]	; (8002464 <SPIx_MspInit+0x6c>)
 800240a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240e:	6453      	str	r3, [r2, #68]	; 0x44
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <SPIx_MspInit+0x6c>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <SPIx_MspInit+0x6c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <SPIx_MspInit+0x6c>)
 8002426:	f043 0320 	orr.w	r3, r3, #32
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <SPIx_MspInit+0x6c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002438:	f44f 7360 	mov.w	r3, #896	; 0x380
 800243c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002442:	2302      	movs	r3, #2
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002446:	2301      	movs	r3, #1
 8002448:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800244a:	2305      	movs	r3, #5
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <SPIx_MspInit+0x70>)
 8002456:	f002 f8a1 	bl	800459c <HAL_GPIO_Init>
}
 800245a:	bf00      	nop
 800245c:	3728      	adds	r7, #40	; 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40021400 	.word	0x40021400

0800246c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <LCD_IO_Init+0xe0>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d164      	bne.n	8002544 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <LCD_IO_Init+0xe0>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <LCD_IO_Init+0xe4>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <LCD_IO_Init+0xe4>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <LCD_IO_Init+0xe4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800249c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	4619      	mov	r1, r3
 80024b4:	4827      	ldr	r0, [pc, #156]	; (8002554 <LCD_IO_Init+0xe8>)
 80024b6:	f002 f871 	bl	800459c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <LCD_IO_Init+0xe4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <LCD_IO_Init+0xe4>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <LCD_IO_Init+0xe4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80024d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	4619      	mov	r1, r3
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <LCD_IO_Init+0xe8>)
 80024f0:	f002 f854 	bl	800459c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <LCD_IO_Init+0xe4>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <LCD_IO_Init+0xe4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6313      	str	r3, [r2, #48]	; 0x30
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <LCD_IO_Init+0xe4>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002510:	2304      	movs	r3, #4
 8002512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4619      	mov	r1, r3
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <LCD_IO_Init+0xec>)
 8002528:	f002 f838 	bl	800459c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800252c:	2200      	movs	r2, #0
 800252e:	2104      	movs	r1, #4
 8002530:	4809      	ldr	r0, [pc, #36]	; (8002558 <LCD_IO_Init+0xec>)
 8002532:	f002 faeb 	bl	8004b0c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002536:	2201      	movs	r2, #1
 8002538:	2104      	movs	r1, #4
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <LCD_IO_Init+0xec>)
 800253c:	f002 fae6 	bl	8004b0c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002540:	f7ff fed6 	bl	80022f0 <SPIx_Init>
  }
}
 8002544:	bf00      	nop
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000704 	.word	0x20000704
 8002550:	40023800 	.word	0x40023800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40020800 	.word	0x40020800

0800255c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256c:	480a      	ldr	r0, [pc, #40]	; (8002598 <LCD_IO_WriteData+0x3c>)
 800256e:	f002 facd 	bl	8004b0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002572:	2200      	movs	r2, #0
 8002574:	2104      	movs	r1, #4
 8002576:	4809      	ldr	r0, [pc, #36]	; (800259c <LCD_IO_WriteData+0x40>)
 8002578:	f002 fac8 	bl	8004b0c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff10 	bl	80023a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002584:	2201      	movs	r2, #1
 8002586:	2104      	movs	r1, #4
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <LCD_IO_WriteData+0x40>)
 800258a:	f002 fabf 	bl	8004b0c <HAL_GPIO_WritePin>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40020800 	.word	0x40020800

080025a0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80025aa:	2200      	movs	r2, #0
 80025ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b0:	480a      	ldr	r0, [pc, #40]	; (80025dc <LCD_IO_WriteReg+0x3c>)
 80025b2:	f002 faab 	bl	8004b0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80025b6:	2200      	movs	r2, #0
 80025b8:	2104      	movs	r1, #4
 80025ba:	4809      	ldr	r0, [pc, #36]	; (80025e0 <LCD_IO_WriteReg+0x40>)
 80025bc:	f002 faa6 	bl	8004b0c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff feed 	bl	80023a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80025ca:	2201      	movs	r2, #1
 80025cc:	2104      	movs	r1, #4
 80025ce:	4804      	ldr	r0, [pc, #16]	; (80025e0 <LCD_IO_WriteReg+0x40>)
 80025d0:	f002 fa9c 	bl	8004b0c <HAL_GPIO_WritePin>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40020800 	.word	0x40020800

080025e4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	460a      	mov	r2, r1
 80025ee:	80fb      	strh	r3, [r7, #6]
 80025f0:	4613      	mov	r3, r2
 80025f2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80025f8:	2200      	movs	r2, #0
 80025fa:	2104      	movs	r1, #4
 80025fc:	4810      	ldr	r0, [pc, #64]	; (8002640 <LCD_IO_ReadData+0x5c>)
 80025fe:	f002 fa85 	bl	8004b0c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002608:	480e      	ldr	r0, [pc, #56]	; (8002644 <LCD_IO_ReadData+0x60>)
 800260a:	f002 fa7f 	bl	8004b0c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fec7 	bl	80023a4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fea3 	bl	8002364 <SPIx_Read>
 800261e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <LCD_IO_ReadData+0x60>)
 8002628:	f002 fa70 	bl	8004b0c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800262c:	2201      	movs	r2, #1
 800262e:	2104      	movs	r1, #4
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <LCD_IO_ReadData+0x5c>)
 8002632:	f002 fa6b 	bl	8004b0c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020800 	.word	0x40020800
 8002644:	40020c00 	.word	0x40020c00

08002648 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f001 fa37 	bl	8003ac4 <HAL_Delay>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <BSP_LCD_Init+0xbc>)
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <BSP_LCD_Init+0xc0>)
 8002668:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <BSP_LCD_Init+0xbc>)
 800266c:	2209      	movs	r2, #9
 800266e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <BSP_LCD_Init+0xbc>)
 8002672:	2201      	movs	r2, #1
 8002674:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <BSP_LCD_Init+0xbc>)
 8002678:	221d      	movs	r2, #29
 800267a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <BSP_LCD_Init+0xbc>)
 800267e:	2203      	movs	r2, #3
 8002680:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <BSP_LCD_Init+0xbc>)
 8002684:	f240 120d 	movw	r2, #269	; 0x10d
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <BSP_LCD_Init+0xbc>)
 800268c:	f240 1243 	movw	r2, #323	; 0x143
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <BSP_LCD_Init+0xbc>)
 8002694:	f240 1217 	movw	r2, #279	; 0x117
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <BSP_LCD_Init+0xbc>)
 800269c:	f240 1247 	movw	r2, #327	; 0x147
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <BSP_LCD_Init+0xbc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <BSP_LCD_Init+0xbc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <BSP_LCD_Init+0xbc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <BSP_LCD_Init+0xc4>)
 80026bc:	2208      	movs	r2, #8
 80026be:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <BSP_LCD_Init+0xc4>)
 80026c2:	22c0      	movs	r2, #192	; 0xc0
 80026c4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <BSP_LCD_Init+0xc4>)
 80026c8:	2204      	movs	r2, #4
 80026ca:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <BSP_LCD_Init+0xc4>)
 80026ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80026d4:	4813      	ldr	r0, [pc, #76]	; (8002724 <BSP_LCD_Init+0xc4>)
 80026d6:	f004 fda7 	bl	8007228 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <BSP_LCD_Init+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <BSP_LCD_Init+0xbc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <BSP_LCD_Init+0xbc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <BSP_LCD_Init+0xbc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80026f2:	f000 fa5f 	bl	8002bb4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80026f6:	4809      	ldr	r0, [pc, #36]	; (800271c <BSP_LCD_Init+0xbc>)
 80026f8:	f003 fdac 	bl	8006254 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <BSP_LCD_Init+0xc8>)
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <BSP_LCD_Init+0xcc>)
 8002700:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <BSP_LCD_Init+0xc8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800270a:	f000 fc41 	bl	8002f90 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800270e:	4808      	ldr	r0, [pc, #32]	; (8002730 <BSP_LCD_Init+0xd0>)
 8002710:	f000 f8ce 	bl	80028b0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002714:	2300      	movs	r3, #0
}  
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000708 	.word	0x20000708
 8002720:	40016800 	.word	0x40016800
 8002724:	200007f0 	.word	0x200007f0
 8002728:	2000083c 	.word	0x2000083c
 800272c:	20000004 	.word	0x20000004
 8002730:	20000048 	.word	0x20000048

08002734 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <BSP_LCD_GetXSize+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	4798      	blx	r3
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000083c 	.word	0x2000083c

0800274c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <BSP_LCD_GetYSize+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	4798      	blx	r3
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000083c 	.word	0x2000083c

08002764 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002764:	b580      	push	{r7, lr}
 8002766:	b090      	sub	sp, #64	; 0x40
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002774:	f7ff ffde 	bl	8002734 <BSP_LCD_GetXSize>
 8002778:	4603      	mov	r3, r0
 800277a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002780:	f7ff ffe4 	bl	800274c <BSP_LCD_GetYSize>
 8002784:	4603      	mov	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002790:	23ff      	movs	r3, #255	; 0xff
 8002792:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027b0:	2307      	movs	r3, #7
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80027b4:	f7ff ffbe 	bl	8002734 <BSP_LCD_GetXSize>
 80027b8:	4603      	mov	r3, r0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80027bc:	f7ff ffc6 	bl	800274c <BSP_LCD_GetYSize>
 80027c0:	4603      	mov	r3, r0
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	4814      	ldr	r0, [pc, #80]	; (8002820 <BSP_LCD_LayerDefaultInit+0xbc>)
 80027ce:	f003 fe11 	bl	80063f4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	4913      	ldr	r1, [pc, #76]	; (8002824 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3304      	adds	r3, #4
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	490e      	ldr	r1, [pc, #56]	; (8002824 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3308      	adds	r3, #8
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <BSP_LCD_LayerDefaultInit+0xc4>)
 80027fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	4909      	ldr	r1, [pc, #36]	; (8002824 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800280e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002812:	f003 fe2d 	bl	8006470 <HAL_LTDC_EnableDither>
}
 8002816:	bf00      	nop
 8002818:	3740      	adds	r7, #64	; 0x40
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000708 	.word	0x20000708
 8002824:	20000824 	.word	0x20000824
 8002828:	20000048 	.word	0x20000048

0800282c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <BSP_LCD_SelectLayer+0x1c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000820 	.word	0x20000820

0800284c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <BSP_LCD_SetTextColor+0x28>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <BSP_LCD_SetTextColor+0x2c>)
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000820 	.word	0x20000820
 8002878:	20000824 	.word	0x20000824

0800287c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <BSP_LCD_SetBackColor+0x2c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4908      	ldr	r1, [pc, #32]	; (80028ac <BSP_LCD_SetBackColor+0x30>)
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3304      	adds	r3, #4
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000820 	.word	0x20000820
 80028ac:	20000824 	.word	0x20000824

080028b0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <BSP_LCD_SetFont+0x2c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <BSP_LCD_SetFont+0x30>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3308      	adds	r3, #8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000820 	.word	0x20000820
 80028e0:	20000824 	.word	0x20000824

080028e4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <BSP_LCD_GetFont+0x24>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <BSP_LCD_GetFont+0x28>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3308      	adds	r3, #8
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000820 	.word	0x20000820
 800290c:	20000824 	.word	0x20000824

08002910 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002912:	b085      	sub	sp, #20
 8002914:	af02      	add	r7, sp, #8
 8002916:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <BSP_LCD_Clear+0x48>)
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <BSP_LCD_Clear+0x48>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <BSP_LCD_Clear+0x4c>)
 8002922:	2134      	movs	r1, #52	; 0x34
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	335c      	adds	r3, #92	; 0x5c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461e      	mov	r6, r3
 8002930:	f7ff ff00 	bl	8002734 <BSP_LCD_GetXSize>
 8002934:	4605      	mov	r5, r0
 8002936:	f7ff ff09 	bl	800274c <BSP_LCD_GetYSize>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2300      	movs	r3, #0
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	462a      	mov	r2, r5
 8002948:	4631      	mov	r1, r6
 800294a:	4620      	mov	r0, r4
 800294c:	f000 fae8 	bl	8002f20 <FillBuffer>
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002958:	20000820 	.word	0x20000820
 800295c:	20000708 	.word	0x20000708

08002960 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
 800296a:	460b      	mov	r3, r1
 800296c:	80bb      	strh	r3, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <BSP_LCD_DisplayChar+0x80>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	491b      	ldr	r1, [pc, #108]	; (80029e4 <BSP_LCD_DisplayChar+0x84>)
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3308      	adds	r3, #8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <BSP_LCD_DisplayChar+0x80>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4c14      	ldr	r4, [pc, #80]	; (80029e4 <BSP_LCD_DisplayChar+0x84>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4423      	add	r3, r4
 800299e:	3308      	adds	r3, #8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029a4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <BSP_LCD_DisplayChar+0x80>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <BSP_LCD_DisplayChar+0x84>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4423      	add	r3, r4
 80029b8:	3308      	adds	r3, #8
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	889b      	ldrh	r3, [r3, #4]
 80029be:	3307      	adds	r3, #7
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da00      	bge.n	80029c6 <BSP_LCD_DisplayChar+0x66>
 80029c4:	3307      	adds	r3, #7
 80029c6:	10db      	asrs	r3, r3, #3
 80029c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029cc:	18ca      	adds	r2, r1, r3
 80029ce:	88b9      	ldrh	r1, [r7, #4]
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9ea 	bl	8002dac <DrawChar>
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	20000820 	.word	0x20000820
 80029e4:	20000824 	.word	0x20000824

080029e8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60ba      	str	r2, [r7, #8]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	81fb      	strh	r3, [r7, #14]
 80029f6:	460b      	mov	r3, r1
 80029f8:	81bb      	strh	r3, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80029fe:	2301      	movs	r3, #1
 8002a00:	83fb      	strh	r3, [r7, #30]
 8002a02:	2300      	movs	r3, #0
 8002a04:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a12:	e002      	b.n	8002a1a <BSP_LCD_DisplayStringAt+0x32>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	617a      	str	r2, [r7, #20]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f6      	bne.n	8002a14 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a26:	f7ff fe85 	bl	8002734 <BSP_LCD_GetXSize>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	484b      	ldr	r0, [pc, #300]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4403      	add	r3, r0
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	889b      	ldrh	r3, [r3, #4]
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d01c      	beq.n	8002a88 <BSP_LCD_DisplayStringAt+0xa0>
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	dc33      	bgt.n	8002aba <BSP_LCD_DisplayStringAt+0xd2>
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d002      	beq.n	8002a5c <BSP_LCD_DisplayStringAt+0x74>
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d019      	beq.n	8002a8e <BSP_LCD_DisplayStringAt+0xa6>
 8002a5a:	e02e      	b.n	8002aba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	1ad1      	subs	r1, r2, r3
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	483e      	ldr	r0, [pc, #248]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	3308      	adds	r3, #8
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	4413      	add	r3, r2
 8002a84:	83fb      	strh	r3, [r7, #30]
      break;
 8002a86:	e01b      	b.n	8002ac0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	83fb      	strh	r3, [r7, #30]
      break;
 8002a8c:	e018      	b.n	8002ac0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	b299      	uxth	r1, r3
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4831      	ldr	r0, [pc, #196]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4403      	add	r3, r0
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	fb11 f303 	smulbb	r3, r1, r3
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ab8:	e002      	b.n	8002ac0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	83fb      	strh	r3, [r7, #30]
      break;
 8002abe:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ac0:	e01a      	b.n	8002af8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	89b9      	ldrh	r1, [r7, #12]
 8002ac8:	8bfb      	ldrh	r3, [r7, #30]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff48 	bl	8002960 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4922      	ldr	r1, [pc, #136]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	889a      	ldrh	r2, [r3, #4]
 8002ae6:	8bfb      	ldrh	r3, [r7, #30]
 8002ae8:	4413      	add	r3, r2
 8002aea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3301      	adds	r3, #1
 8002af0:	60bb      	str	r3, [r7, #8]
    i++;
 8002af2:	8bbb      	ldrh	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2dc      	uxtb	r4, r3
 8002b06:	f7ff fe15 	bl	8002734 <BSP_LCD_GetXSize>
 8002b0a:	8bb9      	ldrh	r1, [r7, #28]
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4d13      	ldr	r5, [pc, #76]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	442b      	add	r3, r5
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	889b      	ldrh	r3, [r3, #4]
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	1ac3      	subs	r3, r0, r3
 8002b28:	b299      	uxth	r1, r3
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <BSP_LCD_DisplayStringAt+0x174>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	480c      	ldr	r0, [pc, #48]	; (8002b60 <BSP_LCD_DisplayStringAt+0x178>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4403      	add	r3, r0
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	889b      	ldrh	r3, [r3, #4]
 8002b40:	4299      	cmp	r1, r3
 8002b42:	bf2c      	ite	cs
 8002b44:	2301      	movcs	r3, #1
 8002b46:	2300      	movcc	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4023      	ands	r3, r4
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1b7      	bne.n	8002ac2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5c:	20000820 	.word	0x20000820
 8002b60:	20000824 	.word	0x20000824

08002b64 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b70:	f7ff feb8 	bl	80028e4 <BSP_LCD_GetFont>
 8002b74:	4603      	mov	r3, r0
 8002b76:	88db      	ldrh	r3, [r3, #6]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	fb12 f303 	smulbb	r3, r2, r3
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	2303      	movs	r3, #3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ff2f 	bl	80029e8 <BSP_LCD_DisplayStringAt>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <BSP_LCD_DisplayOn+0x1c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002ba2:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <BSP_LCD_DisplayOn+0x1c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4798      	blx	r3
  }
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000083c 	.word	0x2000083c

08002bb4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a60      	ldr	r2, [pc, #384]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a59      	ldr	r2, [pc, #356]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002be0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a3d      	ldr	r2, [pc, #244]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c6c:	f043 0320 	orr.w	r3, r3, #32
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <BSP_LCD_MspInit+0x190>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002c9a:	f641 0358 	movw	r3, #6232	; 0x1858
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002cac:	230e      	movs	r3, #14
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4824      	ldr	r0, [pc, #144]	; (8002d48 <BSP_LCD_MspInit+0x194>)
 8002cb8:	f001 fc70 	bl	800459c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002cbc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4820      	ldr	r0, [pc, #128]	; (8002d4c <BSP_LCD_MspInit+0x198>)
 8002cca:	f001 fc67 	bl	800459c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002cce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	481d      	ldr	r0, [pc, #116]	; (8002d50 <BSP_LCD_MspInit+0x19c>)
 8002cdc:	f001 fc5e 	bl	800459c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002ce0:	2348      	movs	r3, #72	; 0x48
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481a      	ldr	r0, [pc, #104]	; (8002d54 <BSP_LCD_MspInit+0x1a0>)
 8002cec:	f001 fc56 	bl	800459c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4816      	ldr	r0, [pc, #88]	; (8002d58 <BSP_LCD_MspInit+0x1a4>)
 8002cfe:	f001 fc4d 	bl	800459c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002d02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4813      	ldr	r0, [pc, #76]	; (8002d5c <BSP_LCD_MspInit+0x1a8>)
 8002d10:	f001 fc44 	bl	800459c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d14:	2303      	movs	r3, #3
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002d18:	2309      	movs	r3, #9
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	480a      	ldr	r0, [pc, #40]	; (8002d4c <BSP_LCD_MspInit+0x198>)
 8002d24:	f001 fc3a 	bl	800459c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002d28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d32:	4619      	mov	r1, r3
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <BSP_LCD_MspInit+0x1a8>)
 8002d36:	f001 fc31 	bl	800459c <HAL_GPIO_Init>
}
 8002d3a:	bf00      	nop
 8002d3c:	3738      	adds	r7, #56	; 0x38
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021400 	.word	0x40021400
 8002d5c:	40021800 	.word	0x40021800

08002d60 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	603a      	str	r2, [r7, #0]
 8002d6a:	80fb      	strh	r3, [r7, #6]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <BSP_LCD_DrawPixel+0x44>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <BSP_LCD_DrawPixel+0x48>)
 8002d76:	2134      	movs	r1, #52	; 0x34
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	681c      	ldr	r4, [r3, #0]
 8002d82:	88bd      	ldrh	r5, [r7, #4]
 8002d84:	f7ff fcd6 	bl	8002734 <BSP_LCD_GetXSize>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	fb03 f205 	mul.w	r2, r3, r5
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4423      	add	r3, r4
 8002d96:	461a      	mov	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	20000820 	.word	0x20000820
 8002da8:	20000708 	.word	0x20000708

08002dac <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	603a      	str	r2, [r7, #0]
 8002db6:	80fb      	strh	r3, [r7, #6]
 8002db8:	460b      	mov	r3, r1
 8002dba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <DrawChar+0x16c>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4953      	ldr	r1, [pc, #332]	; (8002f1c <DrawChar+0x170>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3308      	adds	r3, #8
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	88db      	ldrh	r3, [r3, #6]
 8002dde:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002de0:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <DrawChar+0x16c>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	494d      	ldr	r1, [pc, #308]	; (8002f1c <DrawChar+0x170>)
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3308      	adds	r3, #8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	889b      	ldrh	r3, [r3, #4]
 8002df6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002df8:	8a3b      	ldrh	r3, [r7, #16]
 8002dfa:	3307      	adds	r3, #7
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da00      	bge.n	8002e02 <DrawChar+0x56>
 8002e00:	3307      	adds	r3, #7
 8002e02:	10db      	asrs	r3, r3, #3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8a3b      	ldrh	r3, [r7, #16]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e076      	b.n	8002f06 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002e18:	8a3b      	ldrh	r3, [r7, #16]
 8002e1a:	3307      	adds	r3, #7
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da00      	bge.n	8002e22 <DrawChar+0x76>
 8002e20:	3307      	adds	r3, #7
 8002e22:	10db      	asrs	r3, r3, #3
 8002e24:	461a      	mov	r2, r3
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002e32:	8a3b      	ldrh	r3, [r7, #16]
 8002e34:	3307      	adds	r3, #7
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da00      	bge.n	8002e3c <DrawChar+0x90>
 8002e3a:	3307      	adds	r3, #7
 8002e3c:	10db      	asrs	r3, r3, #3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d002      	beq.n	8002e48 <DrawChar+0x9c>
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d004      	beq.n	8002e50 <DrawChar+0xa4>
 8002e46:	e00c      	b.n	8002e62 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	e016      	b.n	8002e7e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	3201      	adds	r2, #1
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	e00d      	b.n	8002e7e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	041a      	lsls	r2, r3, #16
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	4313      	orrs	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	3202      	adds	r2, #2
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
      break;
 8002e7c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e036      	b.n	8002ef2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002e84:	8a3a      	ldrh	r2, [r7, #16]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b298      	uxth	r0, r3
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <DrawChar+0x16c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	491b      	ldr	r1, [pc, #108]	; (8002f1c <DrawChar+0x170>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7ff ff4e 	bl	8002d60 <BSP_LCD_DrawPixel>
 8002ec4:	e012      	b.n	8002eec <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b298      	uxth	r0, r3
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <DrawChar+0x16c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4911      	ldr	r1, [pc, #68]	; (8002f1c <DrawChar+0x170>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	88bb      	ldrh	r3, [r7, #4]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7ff ff3a 	bl	8002d60 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	8a3b      	ldrh	r3, [r7, #16]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3c4      	bcc.n	8002e84 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002efa:	88bb      	ldrh	r3, [r7, #4]
 8002efc:	3301      	adds	r3, #1
 8002efe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	8a7b      	ldrh	r3, [r7, #18]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d384      	bcc.n	8002e18 <DrawChar+0x6c>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000820 	.word	0x20000820
 8002f1c:	20000824 	.word	0x20000824

08002f20 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <FillBuffer+0x68>)
 8002f30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f34:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <FillBuffer+0x68>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002f3c:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <FillBuffer+0x68>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <FillBuffer+0x68>)
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <FillBuffer+0x6c>)
 8002f46:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002f48:	480f      	ldr	r0, [pc, #60]	; (8002f88 <FillBuffer+0x68>)
 8002f4a:	f001 f89b 	bl	8004084 <HAL_DMA2D_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	480c      	ldr	r0, [pc, #48]	; (8002f88 <FillBuffer+0x68>)
 8002f58:	f001 f9f2 	bl	8004340 <HAL_DMA2D_ConfigLayer>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69f9      	ldr	r1, [r7, #28]
 8002f6c:	4806      	ldr	r0, [pc, #24]	; (8002f88 <FillBuffer+0x68>)
 8002f6e:	f001 f8d2 	bl	8004116 <HAL_DMA2D_Start>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d103      	bne.n	8002f80 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002f78:	210a      	movs	r1, #10
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <FillBuffer+0x68>)
 8002f7c:	f001 f8f6 	bl	800416c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200007b0 	.word	0x200007b0
 8002f8c:	4002b000 	.word	0x4002b000

08002f90 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <BSP_SDRAM_Init+0xb0>)
 8002f98:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fa8:	2204      	movs	r2, #4
 8002faa:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fae:	2207      	movs	r2, #7
 8002fb0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fd8:	2210      	movs	r2, #16
 8002fda:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fe4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002fe8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <BSP_SDRAM_Init+0xac>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <BSP_SDRAM_Init+0xac>)
 8003000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003006:	2100      	movs	r1, #0
 8003008:	480c      	ldr	r0, [pc, #48]	; (800303c <BSP_SDRAM_Init+0xac>)
 800300a:	f000 f87f 	bl	800310c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800300e:	490d      	ldr	r1, [pc, #52]	; (8003044 <BSP_SDRAM_Init+0xb4>)
 8003010:	480a      	ldr	r0, [pc, #40]	; (800303c <BSP_SDRAM_Init+0xac>)
 8003012:	f004 fac9 	bl	80075a8 <HAL_SDRAM_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <BSP_SDRAM_Init+0xb8>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e002      	b.n	800302a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <BSP_SDRAM_Init+0xb8>)
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800302a:	f240 506a 	movw	r0, #1386	; 0x56a
 800302e:	f000 f80d 	bl	800304c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <BSP_SDRAM_Init+0xb8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000840 	.word	0x20000840
 8003040:	a0000140 	.word	0xa0000140
 8003044:	20000874 	.word	0x20000874
 8003048:	20000050 	.word	0x20000050

0800304c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003060:	2208      	movs	r2, #8
 8003062:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003066:	2201      	movs	r2, #1
 8003068:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4923      	ldr	r1, [pc, #140]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003076:	4824      	ldr	r0, [pc, #144]	; (8003108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003078:	f004 faca 	bl	8007610 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800307c:	2001      	movs	r0, #1
 800307e:	f000 fd21 	bl	8003ac4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003084:	2202      	movs	r2, #2
 8003086:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800308a:	2208      	movs	r2, #8
 800308c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003090:	2201      	movs	r2, #1
 8003092:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800309a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309e:	4919      	ldr	r1, [pc, #100]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030a0:	4819      	ldr	r0, [pc, #100]	; (8003108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030a2:	f004 fab5 	bl	8007610 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030a8:	2203      	movs	r2, #3
 80030aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ae:	2208      	movs	r2, #8
 80030b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030b4:	2204      	movs	r2, #4
 80030b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80030be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c2:	4910      	ldr	r1, [pc, #64]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030c4:	4810      	ldr	r0, [pc, #64]	; (8003108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030c6:	f004 faa3 	bl	8007610 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80030ca:	f44f 730c 	mov.w	r3, #560	; 0x230
 80030ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030d2:	2204      	movs	r2, #4
 80030d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030d8:	2208      	movs	r2, #8
 80030da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030de:	2201      	movs	r2, #1
 80030e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80030e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ec:	4905      	ldr	r1, [pc, #20]	; (8003104 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ee:	4806      	ldr	r0, [pc, #24]	; (8003108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030f0:	f004 fa8e 	bl	8007610 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030f8:	f004 fabf 	bl	800767a <HAL_SDRAM_ProgramRefreshRate>
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000890 	.word	0x20000890
 8003108:	20000840 	.word	0x20000840

0800310c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b090      	sub	sp, #64	; 0x40
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80ec 	beq.w	80032f6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
 8003122:	4b77      	ldr	r3, [pc, #476]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a76      	ldr	r2, [pc, #472]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6393      	str	r3, [r2, #56]	; 0x38
 800312e:	4b74      	ldr	r3, [pc, #464]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	4b70      	ldr	r3, [pc, #448]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a6f      	ldr	r2, [pc, #444]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	4b69      	ldr	r3, [pc, #420]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a68      	ldr	r2, [pc, #416]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b66      	ldr	r3, [pc, #408]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	4b62      	ldr	r3, [pc, #392]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a61      	ldr	r2, [pc, #388]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031b4:	f043 0310 	orr.w	r3, r3, #16
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b51      	ldr	r3, [pc, #324]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a4c      	ldr	r2, [pc, #304]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a45      	ldr	r2, [pc, #276]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <BSP_SDRAM_MspInit+0x1f4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003202:	2302      	movs	r3, #2
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800320a:	230c      	movs	r3, #12
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800320e:	2360      	movs	r3, #96	; 0x60
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4619      	mov	r1, r3
 8003218:	483a      	ldr	r0, [pc, #232]	; (8003304 <BSP_SDRAM_MspInit+0x1f8>)
 800321a:	f001 f9bf 	bl	800459c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800321e:	2301      	movs	r3, #1
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003226:	4619      	mov	r1, r3
 8003228:	4837      	ldr	r0, [pc, #220]	; (8003308 <BSP_SDRAM_MspInit+0x1fc>)
 800322a:	f001 f9b7 	bl	800459c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800322e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003238:	4619      	mov	r1, r3
 800323a:	4834      	ldr	r0, [pc, #208]	; (800330c <BSP_SDRAM_MspInit+0x200>)
 800323c:	f001 f9ae 	bl	800459c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003240:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800324a:	4619      	mov	r1, r3
 800324c:	4830      	ldr	r0, [pc, #192]	; (8003310 <BSP_SDRAM_MspInit+0x204>)
 800324e:	f001 f9a5 	bl	800459c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003252:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325c:	4619      	mov	r1, r3
 800325e:	482d      	ldr	r0, [pc, #180]	; (8003314 <BSP_SDRAM_MspInit+0x208>)
 8003260:	f001 f99c 	bl	800459c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003264:	f248 1333 	movw	r3, #33075	; 0x8133
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800326a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326e:	4619      	mov	r1, r3
 8003270:	4829      	ldr	r0, [pc, #164]	; (8003318 <BSP_SDRAM_MspInit+0x20c>)
 8003272:	f001 f993 	bl	800459c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 800328c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003290:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 8003294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003298:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 800329c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ae:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032b8:	2203      	movs	r2, #3
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032be:	2200      	movs	r2, #0
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <BSP_SDRAM_MspInit+0x214>)
 80032cc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80032da:	4810      	ldr	r0, [pc, #64]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032dc:	f000 fdc2 	bl	8003e64 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80032e0:	480e      	ldr	r0, [pc, #56]	; (800331c <BSP_SDRAM_MspInit+0x210>)
 80032e2:	f000 fd11 	bl	8003d08 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	210f      	movs	r1, #15
 80032ea:	2038      	movs	r0, #56	; 0x38
 80032ec:	f000 fcc6 	bl	8003c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80032f0:	2038      	movs	r0, #56	; 0x38
 80032f2:	f000 fcdf 	bl	8003cb4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80032f6:	bf00      	nop
 80032f8:	3740      	adds	r7, #64	; 0x40
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40020400 	.word	0x40020400
 8003308:	40020800 	.word	0x40020800
 800330c:	40020c00 	.word	0x40020c00
 8003310:	40021000 	.word	0x40021000
 8003314:	40021400 	.word	0x40021400
 8003318:	40021800 	.word	0x40021800
 800331c:	200008a0 	.word	0x200008a0
 8003320:	40026410 	.word	0x40026410

08003324 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	; 0x40
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <nRF24_CSN_L+0x18>)
 800332e:	f001 fbed 	bl	8004b0c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003332:	2002      	movs	r0, #2
 8003334:	f000 fbc6 	bl	8003ac4 <HAL_Delay>
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8003344:	2201      	movs	r2, #1
 8003346:	2140      	movs	r1, #64	; 0x40
 8003348:	4803      	ldr	r0, [pc, #12]	; (8003358 <nRF24_CSN_H+0x18>)
 800334a:	f001 fbdf 	bl	8004b0c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800334e:	2002      	movs	r0, #2
 8003350:	f000 fbb8 	bl	8003ac4 <HAL_Delay>
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000

0800335c <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 8003366:	f107 020f 	add.w	r2, r7, #15
 800336a:	1df9      	adds	r1, r7, #7
 800336c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2301      	movs	r3, #1
 8003374:	4806      	ldr	r0, [pc, #24]	; (8003390 <nRF24_LL_RW+0x34>)
 8003376:	f004 fca6 	bl	8007cc6 <HAL_SPI_TransmitReceive>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <nRF24_LL_RW+0x28>
        Error_Handler();
 8003380:	f7fd fd48 	bl	8000e14 <Error_Handler>
    return result;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200001bc 	.word	0x200001bc

08003394 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800339e:	f7ff ffc1 	bl	8003324 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffd6 	bl	800335c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80033b0:	20ff      	movs	r0, #255	; 0xff
 80033b2:	f7ff ffd3 	bl	800335c <nRF24_LL_RW>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80033ba:	f7ff ffc1 	bl	8003340 <nRF24_CSN_H>

	return value;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80033d8:	f7ff ffa4 	bl	8003324 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	2b1f      	cmp	r3, #31
 80033e0:	d810      	bhi.n	8003404 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	f043 0320 	orr.w	r3, r3, #32
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffb1 	bl	800335c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ffad 	bl	800335c <nRF24_LL_RW>
 8003402:	e013      	b.n	800342c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffa8 	bl	800335c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2be1      	cmp	r3, #225	; 0xe1
 8003410:	d00c      	beq.n	800342c <nRF24_WriteReg+0x64>
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2be2      	cmp	r3, #226	; 0xe2
 8003416:	d009      	beq.n	800342c <nRF24_WriteReg+0x64>
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2be3      	cmp	r3, #227	; 0xe3
 800341c:	d006      	beq.n	800342c <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	2bff      	cmp	r3, #255	; 0xff
 8003422:	d003      	beq.n	800342c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8003424:	79bb      	ldrb	r3, [r7, #6]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff98 	bl	800335c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800342c:	f7ff ff88 	bl	8003340 <nRF24_CSN_H>
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
 8003444:	4613      	mov	r3, r2
 8003446:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003448:	f7ff ff6c 	bl	8003324 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff84 	bl	800335c <nRF24_LL_RW>
	while (count--) {
 8003454:	e007      	b.n	8003466 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003456:	683c      	ldr	r4, [r7, #0]
 8003458:	1c63      	adds	r3, r4, #1
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	20ff      	movs	r0, #255	; 0xff
 800345e:	f7ff ff7d 	bl	800335c <nRF24_LL_RW>
 8003462:	4603      	mov	r3, r0
 8003464:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8003466:	79bb      	ldrb	r3, [r7, #6]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	71ba      	strb	r2, [r7, #6]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f2      	bne.n	8003456 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8003470:	f7ff ff66 	bl	8003340 <nRF24_CSN_H>
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
 8003488:	4613      	mov	r3, r2
 800348a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800348c:	f7ff ff4a 	bl	8003324 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff62 	bl	800335c <nRF24_LL_RW>
	while (count--) {
 8003498:	e006      	b.n	80034a8 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	603a      	str	r2, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff5a 	bl	800335c <nRF24_LL_RW>
	while (count--) {
 80034a8:	79bb      	ldrb	r3, [r7, #6]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	71ba      	strb	r2, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f3      	bne.n	800349a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80034b2:	f7ff ff45 	bl	8003340 <nRF24_CSN_H>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80034c2:	2108      	movs	r1, #8
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7ff ff7f 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80034ca:	213f      	movs	r1, #63	; 0x3f
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7ff ff7b 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80034d2:	2103      	movs	r1, #3
 80034d4:	2002      	movs	r0, #2
 80034d6:	f7ff ff77 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80034da:	2103      	movs	r1, #3
 80034dc:	2003      	movs	r0, #3
 80034de:	f7ff ff73 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80034e2:	2103      	movs	r1, #3
 80034e4:	2004      	movs	r0, #4
 80034e6:	f7ff ff6f 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80034ea:	2102      	movs	r1, #2
 80034ec:	2005      	movs	r0, #5
 80034ee:	f7ff ff6b 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80034f2:	210e      	movs	r1, #14
 80034f4:	2006      	movs	r0, #6
 80034f6:	f7ff ff67 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80034fa:	2100      	movs	r1, #0
 80034fc:	2007      	movs	r0, #7
 80034fe:	f7ff ff63 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	2011      	movs	r0, #17
 8003506:	f7ff ff5f 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800350a:	2100      	movs	r1, #0
 800350c:	2012      	movs	r0, #18
 800350e:	f7ff ff5b 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8003512:	2100      	movs	r1, #0
 8003514:	2013      	movs	r0, #19
 8003516:	f7ff ff57 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800351a:	2100      	movs	r1, #0
 800351c:	2014      	movs	r0, #20
 800351e:	f7ff ff53 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8003522:	2100      	movs	r1, #0
 8003524:	2015      	movs	r0, #21
 8003526:	f7ff ff4f 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	2016      	movs	r0, #22
 800352e:	f7ff ff4b 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8003532:	2100      	movs	r1, #0
 8003534:	201c      	movs	r0, #28
 8003536:	f7ff ff47 	bl	80033c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800353a:	2100      	movs	r1, #0
 800353c:	201d      	movs	r0, #29
 800353e:	f7ff ff43 	bl	80033c8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8003542:	f000 f9e3 	bl	800390c <nRF24_FlushRX>
	nRF24_FlushTX();
 8003546:	f000 f9d9 	bl	80038fc <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800354a:	f000 f9e7 	bl	800391c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800354e:	f7ff fef7 	bl	8003340 <nRF24_CSN_H>
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <nRF24_Check+0x58>)
 8003560:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8003562:	2205      	movs	r2, #5
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	2030      	movs	r0, #48	; 0x30
 8003568:	f7ff ff88 	bl	800347c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800356c:	463b      	mov	r3, r7
 800356e:	2205      	movs	r2, #5
 8003570:	4619      	mov	r1, r3
 8003572:	2010      	movs	r0, #16
 8003574:	f7ff ff60 	bl	8003438 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e00f      	b.n	800359e <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3310      	adds	r3, #16
 8003582:	443b      	add	r3, r7
 8003584:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <nRF24_Check+0x40>
 8003594:	2300      	movs	r3, #0
 8003596:	e006      	b.n	80035a6 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	3301      	adds	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d9ec      	bls.n	800357e <nRF24_Check+0x26>
	}

	return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	08009e38 	.word	0x08009e38

080035b4 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7ff fee8 	bl	8003394 <nRF24_ReadReg>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d104      	bne.n	80035d8 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e003      	b.n	80035e0 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	f023 0302 	bic.w	r3, r3, #2
 80035de:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	4619      	mov	r1, r3
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7ff feef 	bl	80033c8 <nRF24_WriteReg>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7ff fec9 	bl	8003394 <nRF24_ReadReg>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	b25a      	sxtb	r2, r3
 8003618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361c:	4313      	orrs	r3, r2
 800361e:	b25b      	sxtb	r3, r3
 8003620:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	4619      	mov	r1, r3
 8003626:	2000      	movs	r0, #0
 8003628:	f7ff fece 	bl	80033c8 <nRF24_WriteReg>
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800363e:	201d      	movs	r0, #29
 8003640:	f7ff fea8 	bl	8003394 <nRF24_ReadReg>
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	201d      	movs	r0, #29
 800365a:	f7ff feb5 	bl	80033c8 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 800365e:	211f      	movs	r1, #31
 8003660:	201c      	movs	r0, #28
 8003662:	f7ff feb1 	bl	80033c8 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8003666:	e00b      	b.n	8003680 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	201d      	movs	r0, #29
 8003674:	f7ff fea8 	bl	80033c8 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8003678:	2100      	movs	r1, #0
 800367a:	201c      	movs	r0, #28
 800367c:	f7ff fea4 	bl	80033c8 <nRF24_WriteReg>
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8003692:	201d      	movs	r0, #29
 8003694:	f7ff fe7e 	bl	8003394 <nRF24_ReadReg>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	201d      	movs	r0, #29
 80036ae:	f7ff fe8b 	bl	80033c8 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 80036b2:	e007      	b.n	80036c4 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	f023 0302 	bic.w	r3, r3, #2
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	201d      	movs	r0, #29
 80036c0:	f7ff fe82 	bl	80033c8 <nRF24_WriteReg>
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7ff fe5c 	bl	8003394 <nRF24_ReadReg>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	f023 030c 	bic.w	r3, r3, #12
 80036e6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	b25a      	sxtb	r2, r3
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	4619      	mov	r1, r3
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff fe61 	bl	80033c8 <nRF24_WriteReg>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	4619      	mov	r1, r3
 800371c:	2005      	movs	r0, #5
 800371e:	f7ff fe53 	bl	80033c8 <nRF24_WriteReg>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	460a      	mov	r2, r1
 8003734:	71fb      	strb	r3, [r7, #7]
 8003736:	4613      	mov	r3, r2
 8003738:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	b25a      	sxtb	r2, r3
 8003740:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	b25b      	sxtb	r3, r3
 800374a:	4313      	orrs	r3, r2
 800374c:	b25b      	sxtb	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	2004      	movs	r0, #4
 8003754:	f7ff fe38 	bl	80033c8 <nRF24_WriteReg>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	3b02      	subs	r3, #2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4619      	mov	r1, r3
 8003772:	2003      	movs	r0, #3
 8003774:	f7ff fe28 	bl	80033c8 <nRF24_WriteReg>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d00a      	beq.n	80037a8 <nRF24_SetAddr+0x28>
 8003792:	2b06      	cmp	r3, #6
 8003794:	dc36      	bgt.n	8003804 <nRF24_SetAddr+0x84>
 8003796:	2b01      	cmp	r3, #1
 8003798:	dc02      	bgt.n	80037a0 <nRF24_SetAddr+0x20>
 800379a:	2b00      	cmp	r3, #0
 800379c:	da04      	bge.n	80037a8 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800379e:	e031      	b.n	8003804 <nRF24_SetAddr+0x84>
 80037a0:	3b02      	subs	r3, #2
	switch (pipe) {
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d82e      	bhi.n	8003804 <nRF24_SetAddr+0x84>
 80037a6:	e023      	b.n	80037f0 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80037a8:	2003      	movs	r0, #3
 80037aa:	f7ff fdf3 	bl	8003394 <nRF24_ReadReg>
 80037ae:	4603      	mov	r3, r0
 80037b0:	3301      	adds	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80037bc:	f7ff fdb2 	bl	8003324 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <nRF24_SetAddr+0x90>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	f043 0320 	orr.w	r3, r3, #32
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fdc5 	bl	800335c <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	603a      	str	r2, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fdbe 	bl	800335c <nRF24_LL_RW>
			} while (addr_width--);
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	73fa      	strb	r2, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f3      	bne.n	80037d2 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80037ea:	f7ff fda9 	bl	8003340 <nRF24_CSN_H>
			break;
 80037ee:	e00a      	b.n	8003806 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <nRF24_SetAddr+0x90>)
 80037f4:	5cd2      	ldrb	r2, [r2, r3]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7ff fde3 	bl	80033c8 <nRF24_WriteReg>
			break;
 8003802:	e000      	b.n	8003806 <nRF24_SetAddr+0x86>
			break;
 8003804:	bf00      	nop
	}
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	0800b920 	.word	0x0800b920

08003814 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800381e:	2006      	movs	r0, #6
 8003820:	f7ff fdb8 	bl	8003394 <nRF24_ReadReg>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	f023 0306 	bic.w	r3, r3, #6
 800382e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4313      	orrs	r3, r2
 8003836:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4619      	mov	r1, r3
 800383c:	2006      	movs	r0, #6
 800383e:	f7ff fdc3 	bl	80033c8 <nRF24_WriteReg>
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003854:	2006      	movs	r0, #6
 8003856:	f7ff fd9d 	bl	8003394 <nRF24_ReadReg>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003864:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4313      	orrs	r3, r2
 800386c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	4619      	mov	r1, r3
 8003872:	2006      	movs	r0, #6
 8003874:	f7ff fda8 	bl	80033c8 <nRF24_WriteReg>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800388a:	2001      	movs	r0, #1
 800388c:	f7ff fd82 	bl	8003394 <nRF24_ReadReg>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2201      	movs	r2, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	b25a      	sxtb	r2, r3
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4619      	mov	r1, r3
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7ff fd8b 	bl	80033c8 <nRF24_WriteReg>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80038ba:	b580      	push	{r7, lr}
 80038bc:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80038be:	2007      	movs	r0, #7
 80038c0:	f7ff fd68 	bl	8003394 <nRF24_ReadReg>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	bd80      	pop	{r7, pc}

080038ca <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 80038ce:	2008      	movs	r0, #8
 80038d0:	f7ff fd60 	bl	8003394 <nRF24_ReadReg>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	bd80      	pop	{r7, pc}

080038da <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 80038e0:	2005      	movs	r0, #5
 80038e2:	f7ff fd57 	bl	8003394 <nRF24_ReadReg>
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4619      	mov	r1, r3
 80038ee:	2005      	movs	r0, #5
 80038f0:	f7ff fd6a 	bl	80033c8 <nRF24_WriteReg>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8003900:	21ff      	movs	r1, #255	; 0xff
 8003902:	20e1      	movs	r0, #225	; 0xe1
 8003904:	f7ff fd60 	bl	80033c8 <nRF24_WriteReg>
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8003910:	21ff      	movs	r1, #255	; 0xff
 8003912:	20e2      	movs	r0, #226	; 0xe2
 8003914:	f7ff fd58 	bl	80033c8 <nRF24_WriteReg>
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8003922:	2007      	movs	r0, #7
 8003924:	f7ff fd36 	bl	8003394 <nRF24_ReadReg>
 8003928:	4603      	mov	r3, r0
 800392a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003932:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	4619      	mov	r1, r3
 8003938:	2007      	movs	r0, #7
 800393a:	f7ff fd45 	bl	80033c8 <nRF24_WriteReg>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	461a      	mov	r2, r3
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	20a0      	movs	r0, #160	; 0xa0
 800395a:	f7ff fd8f 	bl	800347c <nRF24_WriteMBReg>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800396c:	f7ff fcda 	bl	8003324 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8003970:	2060      	movs	r0, #96	; 0x60
 8003972:	f7ff fcf3 	bl	800335c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003976:	20ff      	movs	r0, #255	; 0xff
 8003978:	f7ff fcf0 	bl	800335c <nRF24_LL_RW>
 800397c:	4603      	mov	r3, r0
 800397e:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8003980:	f7ff fcde 	bl	8003340 <nRF24_CSN_H>

	return value;
 8003984:	79fb      	ldrb	r3, [r7, #7]

}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800399e:	2007      	movs	r0, #7
 80039a0:	f7ff fcf8 	bl	8003394 <nRF24_ReadReg>
 80039a4:	4603      	mov	r3, r0
 80039a6:	105b      	asrs	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d829      	bhi.n	8003a0a <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00f      	beq.n	80039dc <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 80039bc:	f7ff ffd3 	bl	8003966 <nRF24_GetRxDplPayloadWidth>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d90f      	bls.n	80039f0 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80039d6:	f7ff ff99 	bl	800390c <nRF24_FlushRX>
 80039da:	e009      	b.n	80039f0 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <nRF24_ReadPayloadGeneric+0x8c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fcd6 	bl	8003394 <nRF24_ReadReg>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d006      	beq.n	8003a06 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	2061      	movs	r0, #97	; 0x61
 8003a02:	f7ff fd19 	bl	8003438 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	e003      	b.n	8003a12 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8003a10:	23ff      	movs	r3, #255	; 0xff
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800b918 	.word	0x0800b918

08003a20 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ffae 	bl	8003990 <nRF24_ReadPayloadGeneric>
 8003a34:	4603      	mov	r3, r0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 f8fc 	bl	8003c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	200f      	movs	r0, #15
 8003a70:	f7fe f950 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7fd fd12 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_IncTick+0x20>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_IncTick+0x24>)
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000058 	.word	0x20000058
 8003aa8:	20000900 	.word	0x20000900

08003aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_GetTick+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000900 	.word	0x20000900

08003ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7ff ffee 	bl	8003aac <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d005      	beq.n	8003aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_Delay+0x44>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aea:	bf00      	nop
 8003aec:	f7ff ffde 	bl	8003aac <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d8f7      	bhi.n	8003aec <HAL_Delay+0x28>
  {
  }
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000058 	.word	0x20000058

08003b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <__NVIC_GetPriorityGrouping+0x18>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0307 	and.w	r3, r3, #7
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0b      	blt.n	8003b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__NVIC_EnableIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db0a      	blt.n	8003bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <__NVIC_SetPriority+0x4c>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd4:	e00a      	b.n	8003bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4908      	ldr	r1, [pc, #32]	; (8003bfc <__NVIC_SetPriority+0x50>)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3b04      	subs	r3, #4
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	761a      	strb	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f1c3 0307 	rsb	r3, r3, #7
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	bf28      	it	cs
 8003c1e:	2304      	movcs	r3, #4
 8003c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d902      	bls.n	8003c30 <NVIC_EncodePriority+0x30>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3b03      	subs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <NVIC_EncodePriority+0x32>
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	4313      	orrs	r3, r2
         );
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff4c 	bl	8003b0c <__NVIC_SetPriorityGrouping>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c8e:	f7ff ff61 	bl	8003b54 <__NVIC_GetPriorityGrouping>
 8003c92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	6978      	ldr	r0, [r7, #20]
 8003c9a:	f7ff ffb1 	bl	8003c00 <NVIC_EncodePriority>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff80 	bl	8003bac <__NVIC_SetPriority>
}
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff54 	bl	8003b70 <__NVIC_EnableIRQ>
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00e      	b.n	8003d00 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	795b      	ldrb	r3, [r3, #5]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fbfa 	bl	80014ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7ff feca 	bl	8003aac <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e099      	b.n	8003e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d44:	e00f      	b.n	8003d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d46:	f7ff feb1 	bl	8003aac <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d908      	bls.n	8003d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e078      	b.n	8003e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e8      	bne.n	8003d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_DMA_Init+0x158>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d117      	bne.n	8003e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8bd 	bl	8003f8c <DMA_CheckFifoParam>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e26:	2301      	movs	r3, #1
 8003e28:	e016      	b.n	8003e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f874 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	223f      	movs	r2, #63	; 0x3f
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	f010803f 	.word	0xf010803f

08003e64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e050      	b.n	8003f18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d101      	bne.n	8003e86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	e048      	b.n	8003f18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f82a 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	223f      	movs	r2, #63	; 0x3f
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	3b10      	subs	r3, #16
 8003f30:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <DMA_CalcBaseAndBitshift+0x64>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <DMA_CalcBaseAndBitshift+0x68>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d909      	bls.n	8003f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f60:	e007      	b.n	8003f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	aaaaaaab 	.word	0xaaaaaaab
 8003f88:	0800b928 	.word	0x0800b928

08003f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d856      	bhi.n	800405a <DMA_CheckFifoParam+0xce>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <DMA_CheckFifoParam+0x28>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fd7 	.word	0x08003fd7
 8003fbc:	08003fc5 	.word	0x08003fc5
 8003fc0:	0800405b 	.word	0x0800405b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d046      	beq.n	800405e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd4:	e043      	b.n	800405e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fde:	d140      	bne.n	8004062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e03d      	b.n	8004062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d121      	bne.n	8004034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d837      	bhi.n	8004066 <DMA_CheckFifoParam+0xda>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <DMA_CheckFifoParam+0x70>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	08004013 	.word	0x08004013
 8004004:	0800400d 	.word	0x0800400d
 8004008:	08004025 	.word	0x08004025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e030      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d025      	beq.n	800406a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e022      	b.n	800406a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402c:	d11f      	bne.n	800406e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004032:	e01c      	b.n	800406e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d903      	bls.n	8004042 <DMA_CheckFifoParam+0xb6>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d003      	beq.n	8004048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004040:	e018      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
      break;
 8004046:	e015      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e00b      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 800405a:	bf00      	nop
 800405c:	e00a      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e008      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004062:	bf00      	nop
 8004064:	e006      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004066:	bf00      	nop
 8004068:	e004      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;   
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <DMA_CheckFifoParam+0xe8>
      break;
 8004072:	bf00      	nop
    }
  } 
  
  return status; 
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03b      	b.n	800410e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fa40 	bl	8001530 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	f023 0107 	bic.w	r1, r3, #7
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68d1      	ldr	r1, [r2, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af02      	add	r7, sp, #8
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_DMA2D_Start+0x1c>
 800412e:	2302      	movs	r3, #2
 8004130:	e018      	b.n	8004164 <HAL_DMA2D_Start+0x4e>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f989 	bl	8004464 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d056      	beq.n	8004236 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004188:	f7ff fc90 	bl	8003aac <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800418e:	e04b      	b.n	8004228 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b0:	f043 0202 	orr.w	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	f043 0201 	orr.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2221      	movs	r2, #33	; 0x21
 80041d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0a5      	b.n	8004336 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7ff fc5b 	bl	8003aac <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <HAL_DMA2D_PollForTransfer+0x9c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10f      	bne.n	8004228 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e086      	b.n	8004336 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ac      	beq.n	8004190 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d061      	beq.n	800431c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004258:	f7ff fc28 	bl	8003aac <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800425e:	e056      	b.n	800430e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02e      	beq.n	80042d0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	f043 0202 	orr.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2229      	movs	r2, #41	; 0x29
 80042ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e032      	b.n	8004336 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d01a      	beq.n	800430e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042d8:	f7ff fbe8 	bl	8003aac <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <HAL_DMA2D_PollForTransfer+0x182>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2203      	movs	r2, #3
 80042fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e013      	b.n	8004336 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0a1      	beq.n	8004260 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2212      	movs	r2, #18
 8004322:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_DMA2D_ConfigLayer+0x20>
 800435c:	2302      	movs	r3, #2
 800435e:	e079      	b.n	8004454 <HAL_DMA2D_ConfigLayer+0x114>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3318      	adds	r3, #24
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800438a:	4b35      	ldr	r3, [pc, #212]	; (8004460 <HAL_DMA2D_ConfigLayer+0x120>)
 800438c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b0a      	cmp	r3, #10
 8004394:	d003      	beq.n	800439e <HAL_DMA2D_ConfigLayer+0x5e>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b09      	cmp	r3, #9
 800439c:	d107      	bne.n	80043ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e005      	b.n	80043ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d120      	bne.n	8004402 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	ea02 0103 	and.w	r1, r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b0a      	cmp	r3, #10
 80043e8:	d003      	beq.n	80043f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d127      	bne.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004400:	e01f      	b.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	ea02 0103 	and.w	r1, r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	430a      	orrs	r2, r1
 8004418:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b0a      	cmp	r3, #10
 800442a:	d003      	beq.n	8004434 <HAL_DMA2D_ConfigLayer+0xf4>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b09      	cmp	r3, #9
 8004432:	d106      	bne.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004440:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	ff03000f 	.word	0xff03000f

08004464 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	041a      	lsls	r2, r3, #16
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800449c:	d174      	bne.n	8004588 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d108      	bne.n	80044d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	e053      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e048      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d111      	bne.n	8004518 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	0cdb      	lsrs	r3, r3, #19
 80044f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	0a9b      	lsrs	r3, r3, #10
 80044fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	08db      	lsrs	r3, r3, #3
 8004504:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	02db      	lsls	r3, r3, #11
 800450e:	4313      	orrs	r3, r2
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	e032      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d117      	bne.n	8004550 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	0fdb      	lsrs	r3, r3, #31
 8004524:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	0cdb      	lsrs	r3, r3, #19
 800452a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	431a      	orrs	r2, r3
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	03db      	lsls	r3, r3, #15
 8004546:	4313      	orrs	r3, r2
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	e016      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	0f1b      	lsrs	r3, r3, #28
 8004554:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	0d1b      	lsrs	r3, r3, #20
 800455a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	0b1b      	lsrs	r3, r3, #12
 8004560:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	431a      	orrs	r2, r3
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004586:	e003      	b.n	8004590 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	60da      	str	r2, [r3, #12]
}
 8004590:	bf00      	nop
 8004592:	372c      	adds	r7, #44	; 0x2c
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e177      	b.n	80048a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045b8:	2201      	movs	r2, #1
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	f040 8166 	bne.w	80048a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d005      	beq.n	80045ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d130      	bne.n	8004650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004624:	2201      	movs	r2, #1
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 0201 	and.w	r2, r3, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b03      	cmp	r3, #3
 800465a:	d017      	beq.n	800468c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	2203      	movs	r2, #3
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d123      	bne.n	80046e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	08da      	lsrs	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3208      	adds	r2, #8
 80046a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	220f      	movs	r2, #15
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	08da      	lsrs	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3208      	adds	r2, #8
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0203 	and.w	r2, r3, #3
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80c0 	beq.w	80048a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_GPIO_Init+0x324>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4a65      	ldr	r2, [pc, #404]	; (80048c0 <HAL_GPIO_Init+0x324>)
 800472c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004730:	6453      	str	r3, [r2, #68]	; 0x44
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_GPIO_Init+0x324>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473e:	4a61      	ldr	r2, [pc, #388]	; (80048c4 <HAL_GPIO_Init+0x328>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <HAL_GPIO_Init+0x32c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d037      	beq.n	80047da <HAL_GPIO_Init+0x23e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_GPIO_Init+0x330>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_GPIO_Init+0x23a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a56      	ldr	r2, [pc, #344]	; (80048d0 <HAL_GPIO_Init+0x334>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d02b      	beq.n	80047d2 <HAL_GPIO_Init+0x236>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a55      	ldr	r2, [pc, #340]	; (80048d4 <HAL_GPIO_Init+0x338>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d025      	beq.n	80047ce <HAL_GPIO_Init+0x232>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a54      	ldr	r2, [pc, #336]	; (80048d8 <HAL_GPIO_Init+0x33c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <HAL_GPIO_Init+0x22e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a53      	ldr	r2, [pc, #332]	; (80048dc <HAL_GPIO_Init+0x340>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d019      	beq.n	80047c6 <HAL_GPIO_Init+0x22a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_GPIO_Init+0x344>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_GPIO_Init+0x226>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a51      	ldr	r2, [pc, #324]	; (80048e4 <HAL_GPIO_Init+0x348>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00d      	beq.n	80047be <HAL_GPIO_Init+0x222>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a50      	ldr	r2, [pc, #320]	; (80048e8 <HAL_GPIO_Init+0x34c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <HAL_GPIO_Init+0x21e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4f      	ldr	r2, [pc, #316]	; (80048ec <HAL_GPIO_Init+0x350>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_GPIO_Init+0x21a>
 80047b2:	2309      	movs	r3, #9
 80047b4:	e012      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047b6:	230a      	movs	r3, #10
 80047b8:	e010      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ba:	2308      	movs	r3, #8
 80047bc:	e00e      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047be:	2307      	movs	r3, #7
 80047c0:	e00c      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047c2:	2306      	movs	r3, #6
 80047c4:	e00a      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047c6:	2305      	movs	r3, #5
 80047c8:	e008      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ca:	2304      	movs	r3, #4
 80047cc:	e006      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e004      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e002      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047da:	2300      	movs	r3, #0
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	f002 0203 	and.w	r2, r2, #3
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	4093      	lsls	r3, r2
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ec:	4935      	ldr	r1, [pc, #212]	; (80048c4 <HAL_GPIO_Init+0x328>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <HAL_GPIO_Init+0x354>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800481e:	4a34      	ldr	r2, [pc, #208]	; (80048f0 <HAL_GPIO_Init+0x354>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <HAL_GPIO_Init+0x354>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004848:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <HAL_GPIO_Init+0x354>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_GPIO_Init+0x354>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004872:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <HAL_GPIO_Init+0x354>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_GPIO_Init+0x354>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <HAL_GPIO_Init+0x354>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	f67f ae84 	bls.w	80045b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40013800 	.word	0x40013800
 80048c8:	40020000 	.word	0x40020000
 80048cc:	40020400 	.word	0x40020400
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020c00 	.word	0x40020c00
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40021400 	.word	0x40021400
 80048e0:	40021800 	.word	0x40021800
 80048e4:	40021c00 	.word	0x40021c00
 80048e8:	40022000 	.word	0x40022000
 80048ec:	40022400 	.word	0x40022400
 80048f0:	40013c00 	.word	0x40013c00

080048f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e0d9      	b.n	8004ac4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004910:	2201      	movs	r2, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	f040 80c9 	bne.w	8004abe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800492c:	4a6b      	ldr	r2, [pc, #428]	; (8004adc <HAL_GPIO_DeInit+0x1e8>)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	220f      	movs	r2, #15
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a63      	ldr	r2, [pc, #396]	; (8004ae0 <HAL_GPIO_DeInit+0x1ec>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d037      	beq.n	80049c6 <HAL_GPIO_DeInit+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a62      	ldr	r2, [pc, #392]	; (8004ae4 <HAL_GPIO_DeInit+0x1f0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_GPIO_DeInit+0xce>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a61      	ldr	r2, [pc, #388]	; (8004ae8 <HAL_GPIO_DeInit+0x1f4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02b      	beq.n	80049be <HAL_GPIO_DeInit+0xca>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a60      	ldr	r2, [pc, #384]	; (8004aec <HAL_GPIO_DeInit+0x1f8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d025      	beq.n	80049ba <HAL_GPIO_DeInit+0xc6>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <HAL_GPIO_DeInit+0x1fc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01f      	beq.n	80049b6 <HAL_GPIO_DeInit+0xc2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <HAL_GPIO_DeInit+0x200>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d019      	beq.n	80049b2 <HAL_GPIO_DeInit+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <HAL_GPIO_DeInit+0x204>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_GPIO_DeInit+0xba>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a5c      	ldr	r2, [pc, #368]	; (8004afc <HAL_GPIO_DeInit+0x208>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00d      	beq.n	80049aa <HAL_GPIO_DeInit+0xb6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a5b      	ldr	r2, [pc, #364]	; (8004b00 <HAL_GPIO_DeInit+0x20c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <HAL_GPIO_DeInit+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <HAL_GPIO_DeInit+0x210>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_GPIO_DeInit+0xae>
 800499e:	2309      	movs	r3, #9
 80049a0:	e012      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049a2:	230a      	movs	r3, #10
 80049a4:	e010      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049a6:	2308      	movs	r3, #8
 80049a8:	e00e      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049aa:	2307      	movs	r3, #7
 80049ac:	e00c      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049ae:	2306      	movs	r3, #6
 80049b0:	e00a      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049b2:	2305      	movs	r3, #5
 80049b4:	e008      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e006      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e004      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049be:	2302      	movs	r3, #2
 80049c0:	e002      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_GPIO_DeInit+0xd4>
 80049c6:	2300      	movs	r3, #0
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	f002 0203 	and.w	r2, r2, #3
 80049ce:	0092      	lsls	r2, r2, #2
 80049d0:	4093      	lsls	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d132      	bne.n	8004a3e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80049d8:	4b4b      	ldr	r3, [pc, #300]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43db      	mvns	r3, r3
 80049e0:	4949      	ldr	r1, [pc, #292]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80049e6:	4b48      	ldr	r3, [pc, #288]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	4946      	ldr	r1, [pc, #280]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80049f4:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	4942      	ldr	r1, [pc, #264]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	493f      	ldr	r1, [pc, #252]	; (8004b08 <HAL_GPIO_DeInit+0x214>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	220f      	movs	r2, #15
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004a20:	4a2e      	ldr	r2, [pc, #184]	; (8004adc <HAL_GPIO_DeInit+0x1e8>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	482a      	ldr	r0, [pc, #168]	; (8004adc <HAL_GPIO_DeInit+0x1e8>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	400a      	ands	r2, r1
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2103      	movs	r1, #3
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	08da      	lsrs	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3208      	adds	r2, #8
 8004a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	08d2      	lsrs	r2, r2, #3
 8004a74:	4019      	ands	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3208      	adds	r2, #8
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2103      	movs	r1, #3
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	f67f af22 	bls.w	8004910 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	40020800 	.word	0x40020800
 8004aec:	40020c00 	.word	0x40020c00
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40021400 	.word	0x40021400
 8004af8:	40021800 	.word	0x40021800
 8004afc:	40021c00 	.word	0x40021c00
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40022400 	.word	0x40022400
 8004b08:	40013c00 	.word	0x40013c00

08004b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b1c:	787b      	ldrb	r3, [r7, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b28:	e003      	b.n	8004b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	041a      	lsls	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	619a      	str	r2, [r3, #24]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b50:	887a      	ldrh	r2, [r7, #2]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4013      	ands	r3, r2
 8004b56:	041a      	lsls	r2, r3, #16
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	43d9      	mvns	r1, r3
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	400b      	ands	r3, r1
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b74:	b08f      	sub	sp, #60	; 0x3c
 8004b76:	af0a      	add	r7, sp, #40	; 0x28
 8004b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e054      	b.n	8004c2e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc ffbe 	bl	8001b20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 fd1f 	bl	8009606 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	687e      	ldr	r6, [r7, #4]
 8004bd0:	466d      	mov	r5, sp
 8004bd2:	f106 0410 	add.w	r4, r6, #16
 8004bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004be6:	1d33      	adds	r3, r6, #4
 8004be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	f004 fcaa 	bl	8009544 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 fd16 	bl	8009628 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	687e      	ldr	r6, [r7, #4]
 8004c04:	466d      	mov	r5, sp
 8004c06:	f106 0410 	add.w	r4, r6, #16
 8004c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c1a:	1d33      	adds	r3, r6, #4
 8004c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1e:	6838      	ldr	r0, [r7, #0]
 8004c20:	f004 fe60 	bl	80098e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c36 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 fe06 	bl	800985e <USB_GetMode>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 80f6 	bne.w	8004e46 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f004 fdea 	bl	8009838 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80ec 	beq.w	8004e44 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f004 fde1 	bl	8009838 <USB_ReadInterrupts>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c80:	d104      	bne.n	8004c8c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c8a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f004 fdd1 	bl	8009838 <USB_ReadInterrupts>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca0:	d104      	bne.n	8004cac <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004caa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 fdc1 	bl	8009838 <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cc0:	d104      	bne.n	8004ccc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 fdb1 	bl	8009838 <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d103      	bne.n	8004ce8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 fda3 	bl	8009838 <USB_ReadInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfc:	d11c      	bne.n	8004d38 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d06:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004d18:	2110      	movs	r1, #16
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f004 fcd0 	bl	80096c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004d20:	6938      	ldr	r0, [r7, #16]
 8004d22:	f004 fd01 	bl	8009728 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f004 fe99 	bl	8009a64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f89e 	bl	8004e74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fd7b 	bl	8009838 <USB_ReadInterrupts>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d4c:	d102      	bne.n	8004d54 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 f84c 	bl	8005dec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 fd6d 	bl	8009838 <USB_ReadInterrupts>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d106      	bne.n	8004d76 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f86f 	bl	8004e4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2208      	movs	r2, #8
 8004d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 fd5c 	bl	8009838 <USB_ReadInterrupts>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d101      	bne.n	8004d8e <HAL_HCD_IRQHandler+0x158>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_HCD_IRQHandler+0x15a>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0210 	bic.w	r2, r2, #16
 8004da2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 ff4f 	bl	8005c48 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0210 	orr.w	r2, r2, #16
 8004db8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 fd3a 	bl	8009838 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dce:	d13a      	bne.n	8004e46 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 fe7f 	bl	8009ad8 <USB_HC_ReadInterrupt>
 8004dda:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e025      	b.n	8004e2e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d106      	bne.n	8004e1c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f859 	bl	8004ecc <HCD_HC_IN_IRQHandler>
 8004e1a:	e005      	b.n	8004e28 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fba7 	bl	8005576 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3d4      	bcc.n	8004de2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e40:	615a      	str	r2, [r3, #20]
 8004e42:	e000      	b.n	8004e46 <HAL_HCD_IRQHandler+0x210>
      return;
 8004e44:	bf00      	nop
    }
  }
}
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d11a      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	212c      	movs	r1, #44	; 0x2c
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	3361      	adds	r3, #97	; 0x61
 8004f1c:	2206      	movs	r2, #6
 8004f1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 fde5 	bl	8009afa <USB_HC_Halt>
 8004f30:	e0af      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f48:	d11b      	bne.n	8004f82 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	461a      	mov	r2, r3
 8004f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3361      	adds	r3, #97	; 0x61
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fdbd 	bl	8009afa <USB_HC_Halt>
 8004f80:	e087      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d109      	bne.n	8004fac <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	6093      	str	r3, [r2, #8]
 8004faa:	e072      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d11a      	bne.n	8004ff8 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3361      	adds	r3, #97	; 0x61
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f004 fd82 	bl	8009afa <USB_HC_Halt>
 8004ff6:	e04c      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d11b      	bne.n	8005048 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3361      	adds	r3, #97	; 0x61
 8005032:	2208      	movs	r2, #8
 8005034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f004 fd5a 	bl	8009afa <USB_HC_Halt>
 8005046:	e024      	b.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d119      	bne.n	8005092 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	3361      	adds	r3, #97	; 0x61
 800507e:	2206      	movs	r2, #6
 8005080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f004 fd34 	bl	8009afa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d112      	bne.n	80050d0 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f004 fd20 	bl	8009afa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050cc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80050ce:	e24e      	b.n	800556e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	f040 80df 	bne.w	80052a6 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d019      	beq.n	8005124 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3348      	adds	r3, #72	; 0x48
 80050fe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	440b      	add	r3, r1
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	202c      	movs	r0, #44	; 0x2c
 800511a:	fb00 f303 	mul.w	r3, r0, r3
 800511e:	440b      	add	r3, r1
 8005120:	3350      	adds	r3, #80	; 0x50
 8005122:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3361      	adds	r3, #97	; 0x61
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	335c      	adds	r3, #92	; 0x5c
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	461a      	mov	r2, r3
 8005156:	2301      	movs	r3, #1
 8005158:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	212c      	movs	r1, #44	; 0x2c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	333f      	adds	r3, #63	; 0x3f
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	212c      	movs	r1, #44	; 0x2c
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	333f      	adds	r3, #63	; 0x3f
 800517c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800517e:	2b02      	cmp	r3, #2
 8005180:	d111      	bne.n	80051a6 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f004 fcb4 	bl	8009afa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	461a      	mov	r2, r3
 80051a0:	2310      	movs	r3, #16
 80051a2:	6093      	str	r3, [r2, #8]
 80051a4:	e03a      	b.n	800521c <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	212c      	movs	r1, #44	; 0x2c
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	4413      	add	r3, r2
 80051b2:	333f      	adds	r3, #63	; 0x3f
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d009      	beq.n	80051ce <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	212c      	movs	r1, #44	; 0x2c
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	4413      	add	r3, r2
 80051c6:	333f      	adds	r3, #63	; 0x3f
 80051c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d126      	bne.n	800521c <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	3360      	adds	r3, #96	; 0x60
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	b2d9      	uxtb	r1, r3
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	202c      	movs	r0, #44	; 0x2c
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	4413      	add	r3, r2
 8005210:	3360      	adds	r3, #96	; 0x60
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff fe4a 	bl	8004eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d12b      	bne.n	800527c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3348      	adds	r3, #72	; 0x48
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	202c      	movs	r0, #44	; 0x2c
 800523a:	fb00 f202 	mul.w	r2, r0, r2
 800523e:	440a      	add	r2, r1
 8005240:	3240      	adds	r2, #64	; 0x40
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	fbb3 f3f2 	udiv	r3, r3, r2
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 818e 	beq.w	800556e <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	3354      	adds	r3, #84	; 0x54
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f083 0301 	eor.w	r3, r3, #1
 8005266:	b2d8      	uxtb	r0, r3
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	212c      	movs	r1, #44	; 0x2c
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	3354      	adds	r3, #84	; 0x54
 8005276:	4602      	mov	r2, r0
 8005278:	701a      	strb	r2, [r3, #0]
}
 800527a:	e178      	b.n	800556e <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	212c      	movs	r1, #44	; 0x2c
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	4413      	add	r3, r2
 8005288:	3354      	adds	r3, #84	; 0x54
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f083 0301 	eor.w	r3, r3, #1
 8005290:	b2d8      	uxtb	r0, r3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	3354      	adds	r3, #84	; 0x54
 80052a0:	4602      	mov	r2, r0
 80052a2:	701a      	strb	r2, [r3, #0]
}
 80052a4:	e163      	b.n	800556e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	f040 80f6 	bne.w	80054aa <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	212c      	movs	r1, #44	; 0x2c
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	4413      	add	r3, r2
 80052ca:	3361      	adds	r3, #97	; 0x61
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d109      	bne.n	80052e6 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	4413      	add	r3, r2
 80052de:	3360      	adds	r3, #96	; 0x60
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e0c9      	b.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	212c      	movs	r1, #44	; 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3361      	adds	r3, #97	; 0x61
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d109      	bne.n	800530e <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	212c      	movs	r1, #44	; 0x2c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	3360      	adds	r3, #96	; 0x60
 8005308:	2205      	movs	r2, #5
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e0b5      	b.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	212c      	movs	r1, #44	; 0x2c
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	3361      	adds	r3, #97	; 0x61
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d009      	beq.n	8005336 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	212c      	movs	r1, #44	; 0x2c
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	4413      	add	r3, r2
 800532e:	3361      	adds	r3, #97	; 0x61
 8005330:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005332:	2b08      	cmp	r3, #8
 8005334:	d150      	bne.n	80053d8 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	212c      	movs	r1, #44	; 0x2c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	335c      	adds	r3, #92	; 0x5c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	202c      	movs	r0, #44	; 0x2c
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	440b      	add	r3, r1
 8005354:	335c      	adds	r3, #92	; 0x5c
 8005356:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	335c      	adds	r3, #92	; 0x5c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d912      	bls.n	8005392 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	335c      	adds	r3, #92	; 0x5c
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	212c      	movs	r1, #44	; 0x2c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	3360      	adds	r3, #96	; 0x60
 800538c:	2204      	movs	r2, #4
 800538e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005390:	e073      	b.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	3360      	adds	r3, #96	; 0x60
 80053a0:	2202      	movs	r2, #2
 80053a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053d6:	e050      	b.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3361      	adds	r3, #97	; 0x61
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d122      	bne.n	8005432 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	212c      	movs	r1, #44	; 0x2c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	3360      	adds	r3, #96	; 0x60
 80053fa:	2202      	movs	r2, #2
 80053fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005414:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800541c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	461a      	mov	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e023      	b.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	212c      	movs	r1, #44	; 0x2c
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	3361      	adds	r3, #97	; 0x61
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b07      	cmp	r3, #7
 8005444:	d119      	bne.n	800547a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	212c      	movs	r1, #44	; 0x2c
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	335c      	adds	r3, #92	; 0x5c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	202c      	movs	r0, #44	; 0x2c
 800545e:	fb00 f303 	mul.w	r3, r0, r3
 8005462:	440b      	add	r3, r1
 8005464:	335c      	adds	r3, #92	; 0x5c
 8005466:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	212c      	movs	r1, #44	; 0x2c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	3360      	adds	r3, #96	; 0x60
 8005476:	2204      	movs	r2, #4
 8005478:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	2302      	movs	r3, #2
 800548a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	b2d9      	uxtb	r1, r3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	202c      	movs	r0, #44	; 0x2c
 8005496:	fb00 f303 	mul.w	r3, r0, r3
 800549a:	4413      	add	r3, r2
 800549c:	3360      	adds	r3, #96	; 0x60
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd04 	bl	8004eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054a8:	e061      	b.n	800556e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d156      	bne.n	800556e <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	212c      	movs	r1, #44	; 0x2c
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	333f      	adds	r3, #63	; 0x3f
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d111      	bne.n	80054f8 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	212c      	movs	r1, #44	; 0x2c
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	335c      	adds	r3, #92	; 0x5c
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f004 fb02 	bl	8009afa <USB_HC_Halt>
 80054f6:	e031      	b.n	800555c <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	333f      	adds	r3, #63	; 0x3f
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	333f      	adds	r3, #63	; 0x3f
 800551a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800551c:	2b02      	cmp	r3, #2
 800551e:	d11d      	bne.n	800555c <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	212c      	movs	r1, #44	; 0x2c
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	335c      	adds	r3, #92	; 0x5c
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d110      	bne.n	800555c <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	212c      	movs	r1, #44	; 0x2c
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	3361      	adds	r3, #97	; 0x61
 8005548:	2203      	movs	r2, #3
 800554a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f004 facf 	bl	8009afa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	2310      	movs	r3, #16
 800556c:	6093      	str	r3, [r2, #8]
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b088      	sub	sp, #32
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d11a      	bne.n	80055dc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	2304      	movs	r3, #4
 80055b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3361      	adds	r3, #97	; 0x61
 80055c6:	2206      	movs	r2, #6
 80055c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f004 fa90 	bl	8009afa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80055da:	e331      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d12e      	bne.n	8005650 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	461a      	mov	r2, r3
 8005600:	2320      	movs	r3, #32
 8005602:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	212c      	movs	r1, #44	; 0x2c
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	4413      	add	r3, r2
 8005610:	333d      	adds	r3, #61	; 0x3d
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 8313 	bne.w	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	212c      	movs	r1, #44	; 0x2c
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	333d      	adds	r3, #61	; 0x3d
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3360      	adds	r3, #96	; 0x60
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f004 fa56 	bl	8009afa <USB_HC_Halt>
}
 800564e:	e2f7      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005666:	d112      	bne.n	800568e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f004 fa37 	bl	8009afa <USB_HC_Halt>
}
 800568c:	e2d8      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d140      	bne.n	8005726 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	212c      	movs	r1, #44	; 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	335c      	adds	r3, #92	; 0x5c
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d111      	bne.n	80056f0 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	333d      	adds	r3, #61	; 0x3d
 80056da:	2201      	movs	r2, #1
 80056dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	461a      	mov	r2, r3
 80056fe:	2301      	movs	r3, #1
 8005700:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	212c      	movs	r1, #44	; 0x2c
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	4413      	add	r3, r2
 800570e:	3361      	adds	r3, #97	; 0x61
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f004 f9eb 	bl	8009afa <USB_HC_Halt>
}
 8005724:	e28c      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d12c      	bne.n	8005796 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	3361      	adds	r3, #97	; 0x61
 800574a:	2204      	movs	r2, #4
 800574c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	212c      	movs	r1, #44	; 0x2c
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	333d      	adds	r3, #61	; 0x3d
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	212c      	movs	r1, #44	; 0x2c
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	335c      	adds	r3, #92	; 0x5c
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f004 f9bc 	bl	8009afa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	461a      	mov	r2, r3
 8005790:	2340      	movs	r3, #64	; 0x40
 8005792:	6093      	str	r3, [r2, #8]
}
 8005794:	e254      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d11a      	bne.n	80057e2 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	2308      	movs	r3, #8
 80057bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	3361      	adds	r3, #97	; 0x61
 80057cc:	2205      	movs	r2, #5
 80057ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f004 f98d 	bl	8009afa <USB_HC_Halt>
}
 80057e0:	e22e      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d140      	bne.n	800587a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	212c      	movs	r1, #44	; 0x2c
 80057fe:	fb01 f303 	mul.w	r3, r1, r3
 8005802:	4413      	add	r3, r2
 8005804:	335c      	adds	r3, #92	; 0x5c
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	212c      	movs	r1, #44	; 0x2c
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	4413      	add	r3, r2
 8005816:	3361      	adds	r3, #97	; 0x61
 8005818:	2203      	movs	r2, #3
 800581a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	212c      	movs	r1, #44	; 0x2c
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	333d      	adds	r3, #61	; 0x3d
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d112      	bne.n	8005856 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	212c      	movs	r1, #44	; 0x2c
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	333c      	adds	r3, #60	; 0x3c
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	333d      	adds	r3, #61	; 0x3d
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f004 f94a 	bl	8009afa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	461a      	mov	r2, r3
 8005874:	2310      	movs	r3, #16
 8005876:	6093      	str	r3, [r2, #8]
}
 8005878:	e1e2      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d164      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d111      	bne.n	80058bc <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	212c      	movs	r1, #44	; 0x2c
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	3361      	adds	r3, #97	; 0x61
 80058a6:	2206      	movs	r2, #6
 80058a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f004 f920 	bl	8009afa <USB_HC_Halt>
 80058ba:	e044      	b.n	8005946 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	212c      	movs	r1, #44	; 0x2c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	335c      	adds	r3, #92	; 0x5c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	202c      	movs	r0, #44	; 0x2c
 80058d4:	fb00 f303 	mul.w	r3, r0, r3
 80058d8:	440b      	add	r3, r1
 80058da:	335c      	adds	r3, #92	; 0x5c
 80058dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	212c      	movs	r1, #44	; 0x2c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	335c      	adds	r3, #92	; 0x5c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d920      	bls.n	8005934 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	212c      	movs	r1, #44	; 0x2c
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	4413      	add	r3, r2
 80058fe:	335c      	adds	r3, #92	; 0x5c
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	3360      	adds	r3, #96	; 0x60
 8005912:	2204      	movs	r2, #4
 8005914:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	b2d9      	uxtb	r1, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	202c      	movs	r0, #44	; 0x2c
 8005920:	fb00 f303 	mul.w	r3, r0, r3
 8005924:	4413      	add	r3, r2
 8005926:	3360      	adds	r3, #96	; 0x60
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fabf 	bl	8004eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005932:	e008      	b.n	8005946 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	212c      	movs	r1, #44	; 0x2c
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	3360      	adds	r3, #96	; 0x60
 8005942:	2202      	movs	r2, #2
 8005944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	461a      	mov	r2, r3
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	6093      	str	r3, [r2, #8]
}
 8005958:	e172      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d11b      	bne.n	80059aa <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	212c      	movs	r1, #44	; 0x2c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	3361      	adds	r3, #97	; 0x61
 8005980:	2208      	movs	r2, #8
 8005982:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f004 f8b3 	bl	8009afa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a6:	6093      	str	r3, [r2, #8]
}
 80059a8:	e14a      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	f040 813f 	bne.w	8005c40 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	212c      	movs	r1, #44	; 0x2c
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	3361      	adds	r3, #97	; 0x61
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d17d      	bne.n	8005ad2 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	212c      	movs	r1, #44	; 0x2c
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	3360      	adds	r3, #96	; 0x60
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	212c      	movs	r1, #44	; 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	333f      	adds	r3, #63	; 0x3f
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d00a      	beq.n	8005a12 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	333f      	adds	r3, #63	; 0x3f
 8005a0a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	f040 8100 	bne.w	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d113      	bne.n	8005a42 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	212c      	movs	r1, #44	; 0x2c
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	3355      	adds	r3, #85	; 0x55
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	f083 0301 	eor.w	r3, r3, #1
 8005a2e:	b2d8      	uxtb	r0, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	212c      	movs	r1, #44	; 0x2c
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3355      	adds	r3, #85	; 0x55
 8005a3e:	4602      	mov	r2, r0
 8005a40:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f040 80e3 	bne.w	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	334c      	adds	r3, #76	; 0x4c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80d8 	beq.w	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	334c      	adds	r3, #76	; 0x4c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	202c      	movs	r0, #44	; 0x2c
 8005a78:	fb00 f202 	mul.w	r2, r0, r2
 8005a7c:	440a      	add	r2, r1
 8005a7e:	3240      	adds	r2, #64	; 0x40
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	4413      	add	r3, r2
 8005a84:	3b01      	subs	r3, #1
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	202c      	movs	r0, #44	; 0x2c
 8005a8c:	fb00 f202 	mul.w	r2, r0, r2
 8005a90:	440a      	add	r2, r1
 8005a92:	3240      	adds	r2, #64	; 0x40
 8005a94:	8812      	ldrh	r2, [r2, #0]
 8005a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80b5 	beq.w	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	212c      	movs	r1, #44	; 0x2c
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3355      	adds	r3, #85	; 0x55
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	f083 0301 	eor.w	r3, r3, #1
 8005abc:	b2d8      	uxtb	r0, r3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	212c      	movs	r1, #44	; 0x2c
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	3355      	adds	r3, #85	; 0x55
 8005acc:	4602      	mov	r2, r0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e09f      	b.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	212c      	movs	r1, #44	; 0x2c
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	3361      	adds	r3, #97	; 0x61
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d109      	bne.n	8005afa <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	212c      	movs	r1, #44	; 0x2c
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	3360      	adds	r3, #96	; 0x60
 8005af4:	2202      	movs	r2, #2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e08b      	b.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	212c      	movs	r1, #44	; 0x2c
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	4413      	add	r3, r2
 8005b06:	3361      	adds	r3, #97	; 0x61
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d109      	bne.n	8005b22 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	212c      	movs	r1, #44	; 0x2c
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	3360      	adds	r3, #96	; 0x60
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e077      	b.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	212c      	movs	r1, #44	; 0x2c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3361      	adds	r3, #97	; 0x61
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d109      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	3360      	adds	r3, #96	; 0x60
 8005b44:	2205      	movs	r2, #5
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e063      	b.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	212c      	movs	r1, #44	; 0x2c
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	3361      	adds	r3, #97	; 0x61
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d009      	beq.n	8005b72 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	212c      	movs	r1, #44	; 0x2c
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3361      	adds	r3, #97	; 0x61
 8005b6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d14f      	bne.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	212c      	movs	r1, #44	; 0x2c
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	335c      	adds	r3, #92	; 0x5c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	202c      	movs	r0, #44	; 0x2c
 8005b8a:	fb00 f303 	mul.w	r3, r0, r3
 8005b8e:	440b      	add	r3, r1
 8005b90:	335c      	adds	r3, #92	; 0x5c
 8005b92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	212c      	movs	r1, #44	; 0x2c
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	335c      	adds	r3, #92	; 0x5c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d912      	bls.n	8005bce <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	212c      	movs	r1, #44	; 0x2c
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	335c      	adds	r3, #92	; 0x5c
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	212c      	movs	r1, #44	; 0x2c
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3360      	adds	r3, #96	; 0x60
 8005bc8:	2204      	movs	r2, #4
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e021      	b.n	8005c12 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	212c      	movs	r1, #44	; 0x2c
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	3360      	adds	r3, #96	; 0x60
 8005bdc:	2202      	movs	r2, #2
 8005bde:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfe:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2302      	movs	r3, #2
 8005c22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	b2d9      	uxtb	r1, r3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	202c      	movs	r0, #44	; 0x2c
 8005c2e:	fb00 f303 	mul.w	r3, r0, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3360      	adds	r3, #96	; 0x60
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff f938 	bl	8004eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c40:	bf00      	nop
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	0c5b      	lsrs	r3, r3, #17
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c7c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d004      	beq.n	8005c8e <HCD_RXQLVL_IRQHandler+0x46>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b05      	cmp	r3, #5
 8005c88:	f000 80a9 	beq.w	8005dde <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c8c:	e0aa      	b.n	8005de4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a6 	beq.w	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	212c      	movs	r1, #44	; 0x2c
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3344      	adds	r3, #68	; 0x44
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 809b 	beq.w	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3350      	adds	r3, #80	; 0x50
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	441a      	add	r2, r3
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	202c      	movs	r0, #44	; 0x2c
 8005cc6:	fb00 f303 	mul.w	r3, r0, r3
 8005cca:	440b      	add	r3, r1
 8005ccc:	334c      	adds	r3, #76	; 0x4c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d87a      	bhi.n	8005dca <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	212c      	movs	r1, #44	; 0x2c
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3344      	adds	r3, #68	; 0x44
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	b292      	uxth	r2, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	f003 fd4b 	bl	8009788 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	212c      	movs	r1, #44	; 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3344      	adds	r3, #68	; 0x44
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	441a      	add	r2, r3
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	202c      	movs	r0, #44	; 0x2c
 8005d0c:	fb00 f303 	mul.w	r3, r0, r3
 8005d10:	440b      	add	r3, r1
 8005d12:	3344      	adds	r3, #68	; 0x44
 8005d14:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	212c      	movs	r1, #44	; 0x2c
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	3350      	adds	r3, #80	; 0x50
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	441a      	add	r2, r3
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	202c      	movs	r0, #44	; 0x2c
 8005d30:	fb00 f303 	mul.w	r3, r0, r3
 8005d34:	440b      	add	r3, r1
 8005d36:	3350      	adds	r3, #80	; 0x50
 8005d38:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	0cdb      	lsrs	r3, r3, #19
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	212c      	movs	r1, #44	; 0x2c
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3340      	adds	r3, #64	; 0x40
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d13c      	bne.n	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d039      	beq.n	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	212c      	movs	r1, #44	; 0x2c
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	4413      	add	r3, r2
 8005dac:	3354      	adds	r3, #84	; 0x54
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f083 0301 	eor.w	r3, r3, #1
 8005db4:	b2d8      	uxtb	r0, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	212c      	movs	r1, #44	; 0x2c
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3354      	adds	r3, #84	; 0x54
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	701a      	strb	r2, [r3, #0]
      break;
 8005dc8:	e00b      	b.n	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	212c      	movs	r1, #44	; 0x2c
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3360      	adds	r3, #96	; 0x60
 8005dd8:	2204      	movs	r2, #4
 8005dda:	701a      	strb	r2, [r3, #0]
      break;
 8005ddc:	e001      	b.n	8005de2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005dde:	bf00      	nop
 8005de0:	e000      	b.n	8005de4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005de2:	bf00      	nop
  }
}
 8005de4:	bf00      	nop
 8005de6:	3728      	adds	r7, #40	; 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d10b      	bne.n	8005e3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d102      	bne.n	8005e34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff f816 	bl	8004e60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f043 0302 	orr.w	r3, r3, #2
 8005e3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d132      	bne.n	8005eac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d126      	bne.n	8005ea6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d113      	bne.n	8005e88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e6a:	d106      	bne.n	8005e7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2102      	movs	r1, #2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f003 fdf6 	bl	8009a64 <USB_InitFSLSPClkSel>
 8005e78:	e011      	b.n	8005e9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4618      	mov	r0, r3
 8005e82:	f003 fdef 	bl	8009a64 <USB_InitFSLSPClkSel>
 8005e86:	e00a      	b.n	8005e9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d106      	bne.n	8005e9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	461a      	mov	r2, r3
 8005e98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fe fff2 	bl	8004e88 <HAL_HCD_PortEnabled_Callback>
 8005ea4:	e002      	b.n	8005eac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fe fff8 	bl	8004e9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d103      	bne.n	8005ebe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f043 0320 	orr.w	r3, r3, #32
 8005ebc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6013      	str	r3, [r2, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e12b      	b.n	800613e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fb fb3a 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	; 0x24
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f38:	f001 f91c 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4a81      	ldr	r2, [pc, #516]	; (8006148 <HAL_I2C_Init+0x274>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d807      	bhi.n	8005f58 <HAL_I2C_Init+0x84>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a80      	ldr	r2, [pc, #512]	; (800614c <HAL_I2C_Init+0x278>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf94      	ite	ls
 8005f50:	2301      	movls	r3, #1
 8005f52:	2300      	movhi	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e006      	b.n	8005f66 <HAL_I2C_Init+0x92>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a7d      	ldr	r2, [pc, #500]	; (8006150 <HAL_I2C_Init+0x27c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	bf94      	ite	ls
 8005f60:	2301      	movls	r3, #1
 8005f62:	2300      	movhi	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0e7      	b.n	800613e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a78      	ldr	r2, [pc, #480]	; (8006154 <HAL_I2C_Init+0x280>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0c9b      	lsrs	r3, r3, #18
 8005f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a6a      	ldr	r2, [pc, #424]	; (8006148 <HAL_I2C_Init+0x274>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d802      	bhi.n	8005fa8 <HAL_I2C_Init+0xd4>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	e009      	b.n	8005fbc <HAL_I2C_Init+0xe8>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	4a69      	ldr	r2, [pc, #420]	; (8006158 <HAL_I2C_Init+0x284>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	099b      	lsrs	r3, r3, #6
 8005fba:	3301      	adds	r3, #1
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	495c      	ldr	r1, [pc, #368]	; (8006148 <HAL_I2C_Init+0x274>)
 8005fd8:	428b      	cmp	r3, r1
 8005fda:	d819      	bhi.n	8006010 <HAL_I2C_Init+0x13c>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1e59      	subs	r1, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ff0:	400b      	ands	r3, r1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_I2C_Init+0x138>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1e59      	subs	r1, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	fbb1 f3f3 	udiv	r3, r1, r3
 8006004:	3301      	adds	r3, #1
 8006006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600a:	e051      	b.n	80060b0 <HAL_I2C_Init+0x1dc>
 800600c:	2304      	movs	r3, #4
 800600e:	e04f      	b.n	80060b0 <HAL_I2C_Init+0x1dc>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d111      	bne.n	800603c <HAL_I2C_Init+0x168>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1e58      	subs	r0, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	440b      	add	r3, r1
 8006026:	fbb0 f3f3 	udiv	r3, r0, r3
 800602a:	3301      	adds	r3, #1
 800602c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	e012      	b.n	8006062 <HAL_I2C_Init+0x18e>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	1e58      	subs	r0, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	0099      	lsls	r1, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006052:	3301      	adds	r3, #1
 8006054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf0c      	ite	eq
 800605c:	2301      	moveq	r3, #1
 800605e:	2300      	movne	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Init+0x196>
 8006066:	2301      	movs	r3, #1
 8006068:	e022      	b.n	80060b0 <HAL_I2C_Init+0x1dc>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10e      	bne.n	8006090 <HAL_I2C_Init+0x1bc>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1e58      	subs	r0, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	440b      	add	r3, r1
 8006080:	fbb0 f3f3 	udiv	r3, r0, r3
 8006084:	3301      	adds	r3, #1
 8006086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	e00f      	b.n	80060b0 <HAL_I2C_Init+0x1dc>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1e58      	subs	r0, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	0099      	lsls	r1, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a6:	3301      	adds	r3, #1
 80060a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	6809      	ldr	r1, [r1, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6911      	ldr	r1, [r2, #16]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68d2      	ldr	r2, [r2, #12]
 80060ea:	4311      	orrs	r1, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	430b      	orrs	r3, r1
 80060f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	000186a0 	.word	0x000186a0
 800614c:	001e847f 	.word	0x001e847f
 8006150:	003d08ff 	.word	0x003d08ff
 8006154:	431bde83 	.word	0x431bde83
 8006158:	10624dd3 	.word	0x10624dd3

0800615c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b20      	cmp	r3, #32
 8006170:	d129      	bne.n	80061c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2224      	movs	r2, #36	; 0x24
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0210 	bic.w	r2, r2, #16
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d12a      	bne.n	8006244 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2224      	movs	r2, #36	; 0x24
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	f023 030f 	bic.w	r3, r3, #15
 8006214:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	b29a      	uxth	r2, r3
 800621a:	89fb      	ldrh	r3, [r7, #14]
 800621c:	4313      	orrs	r3, r2
 800621e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	89fa      	ldrh	r2, [r7, #14]
 8006226:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e000      	b.n	8006246 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0bf      	b.n	80063e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb f9e4 	bl	8001648 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006296:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6899      	ldr	r1, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <HAL_LTDC_Init+0x19c>)
 80062c8:	400b      	ands	r3, r1
 80062ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	041b      	lsls	r3, r3, #16
 80062d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6899      	ldr	r1, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68d9      	ldr	r1, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <HAL_LTDC_Init+0x19c>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68d9      	ldr	r1, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6919      	ldr	r1, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <HAL_LTDC_Init+0x19c>)
 8006324:	400b      	ands	r3, r1
 8006326:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6919      	ldr	r1, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6959      	ldr	r1, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <HAL_LTDC_Init+0x19c>)
 8006352:	400b      	ands	r3, r1
 8006354:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6959      	ldr	r1, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0206 	orr.w	r2, r2, #6
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	f000f800 	.word	0xf000f800

080063f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063f4:	b5b0      	push	{r4, r5, r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_LTDC_ConfigLayer+0x1a>
 800640a:	2302      	movs	r3, #2
 800640c:	e02c      	b.n	8006468 <HAL_LTDC_ConfigLayer+0x74>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2134      	movs	r1, #52	; 0x34
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	4413      	add	r3, r2
 800642a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f83b 	bl	80064c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bdb0      	pop	{r4, r5, r7, pc}

08006470 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_LTDC_EnableDither+0x16>
 8006482:	2302      	movs	r3, #2
 8006484:	e016      	b.n	80064b4 <HAL_LTDC_EnableDither+0x44>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <HAL_LTDC_EnableDither+0x50>)
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <HAL_LTDC_EnableDither+0x50>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40016800 	.word	0x40016800

080064c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e0:	4413      	add	r3, r2
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	4413      	add	r3, r2
 80064f2:	3384      	adds	r3, #132	; 0x84
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	4611      	mov	r1, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	01d2      	lsls	r2, r2, #7
 8006500:	440a      	add	r2, r1
 8006502:	3284      	adds	r2, #132	; 0x84
 8006504:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006508:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800651a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800651c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	01db      	lsls	r3, r3, #7
 8006528:	440b      	add	r3, r1
 800652a:	3384      	adds	r3, #132	; 0x84
 800652c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006532:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006542:	4413      	add	r3, r2
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	; 0x84
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	4611      	mov	r1, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	01d2      	lsls	r2, r2, #7
 8006562:	440a      	add	r2, r1
 8006564:	3284      	adds	r2, #132	; 0x84
 8006566:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800656a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657a:	4413      	add	r3, r2
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	440b      	add	r3, r1
 800658a:	3384      	adds	r3, #132	; 0x84
 800658c:	4619      	mov	r1, r3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4313      	orrs	r3, r2
 8006592:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	01db      	lsls	r3, r3, #7
 800659e:	4413      	add	r3, r2
 80065a0:	3384      	adds	r3, #132	; 0x84
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4611      	mov	r1, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	01d2      	lsls	r2, r2, #7
 80065ae:	440a      	add	r2, r1
 80065b0:	3284      	adds	r2, #132	; 0x84
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	01db      	lsls	r3, r3, #7
 80065c2:	4413      	add	r3, r2
 80065c4:	3384      	adds	r3, #132	; 0x84
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	061b      	lsls	r3, r3, #24
 80065e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	01db      	lsls	r3, r3, #7
 80065f4:	4413      	add	r3, r2
 80065f6:	3384      	adds	r3, #132	; 0x84
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	4413      	add	r3, r2
 8006606:	3384      	adds	r3, #132	; 0x84
 8006608:	461a      	mov	r2, r3
 800660a:	2300      	movs	r3, #0
 800660c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006614:	461a      	mov	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	431a      	orrs	r2, r3
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	01db      	lsls	r3, r3, #7
 8006628:	440b      	add	r3, r1
 800662a:	3384      	adds	r3, #132	; 0x84
 800662c:	4619      	mov	r1, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	01db      	lsls	r3, r3, #7
 800663e:	4413      	add	r3, r2
 8006640:	3384      	adds	r3, #132	; 0x84
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	4611      	mov	r1, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	01d2      	lsls	r2, r2, #7
 800664e:	440a      	add	r2, r1
 8006650:	3284      	adds	r2, #132	; 0x84
 8006652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006656:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	01db      	lsls	r3, r3, #7
 8006662:	4413      	add	r3, r2
 8006664:	3384      	adds	r3, #132	; 0x84
 8006666:	461a      	mov	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	01db      	lsls	r3, r3, #7
 8006678:	4413      	add	r3, r2
 800667a:	3384      	adds	r3, #132	; 0x84
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	4611      	mov	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	01d2      	lsls	r2, r2, #7
 8006688:	440a      	add	r2, r1
 800668a:	3284      	adds	r2, #132	; 0x84
 800668c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	6809      	ldr	r1, [r1, #0]
 80066a2:	4608      	mov	r0, r1
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	01c9      	lsls	r1, r1, #7
 80066a8:	4401      	add	r1, r0
 80066aa:	3184      	adds	r1, #132	; 0x84
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	01db      	lsls	r3, r3, #7
 80066ba:	4413      	add	r3, r2
 80066bc:	3384      	adds	r3, #132	; 0x84
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	4413      	add	r3, r2
 80066cc:	3384      	adds	r3, #132	; 0x84
 80066ce:	461a      	mov	r2, r3
 80066d0:	2300      	movs	r3, #0
 80066d2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	01db      	lsls	r3, r3, #7
 80066de:	4413      	add	r3, r2
 80066e0:	3384      	adds	r3, #132	; 0x84
 80066e2:	461a      	mov	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066f2:	2304      	movs	r3, #4
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e01b      	b.n	8006730 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d102      	bne.n	8006706 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006700:	2303      	movs	r3, #3
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e014      	b.n	8006730 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b04      	cmp	r3, #4
 800670c:	d00b      	beq.n	8006726 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006712:	2b02      	cmp	r3, #2
 8006714:	d007      	beq.n	8006726 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800671a:	2b03      	cmp	r3, #3
 800671c:	d003      	beq.n	8006726 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006722:	2b07      	cmp	r3, #7
 8006724:	d102      	bne.n	800672c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006726:	2302      	movs	r3, #2
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e001      	b.n	8006730 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800672c:	2301      	movs	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	01db      	lsls	r3, r3, #7
 800673a:	4413      	add	r3, r2
 800673c:	3384      	adds	r3, #132	; 0x84
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	4611      	mov	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	01d2      	lsls	r2, r2, #7
 800674a:	440a      	add	r2, r1
 800674c:	3284      	adds	r2, #132	; 0x84
 800674e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006752:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1acb      	subs	r3, r1, r3
 800676a:	69f9      	ldr	r1, [r7, #28]
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6809      	ldr	r1, [r1, #0]
 8006776:	4608      	mov	r0, r1
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	01c9      	lsls	r1, r1, #7
 800677c:	4401      	add	r1, r0
 800677e:	3184      	adds	r1, #132	; 0x84
 8006780:	4313      	orrs	r3, r2
 8006782:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	01db      	lsls	r3, r3, #7
 800678e:	4413      	add	r3, r2
 8006790:	3384      	adds	r3, #132	; 0x84
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	4611      	mov	r1, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	01d2      	lsls	r2, r2, #7
 800679e:	440a      	add	r2, r1
 80067a0:	3284      	adds	r2, #132	; 0x84
 80067a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	01db      	lsls	r3, r3, #7
 80067b6:	4413      	add	r3, r2
 80067b8:	3384      	adds	r3, #132	; 0x84
 80067ba:	461a      	mov	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	01db      	lsls	r3, r3, #7
 80067cc:	4413      	add	r3, r2
 80067ce:	3384      	adds	r3, #132	; 0x84
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	4611      	mov	r1, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	01d2      	lsls	r2, r2, #7
 80067dc:	440a      	add	r2, r1
 80067de:	3284      	adds	r2, #132	; 0x84
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6013      	str	r3, [r2, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3724      	adds	r7, #36	; 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <HAL_PWREx_EnableOverDrive+0x90>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <HAL_PWREx_EnableOverDrive+0x90>)
 8006808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680c:	6413      	str	r3, [r2, #64]	; 0x40
 800680e:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <HAL_PWREx_EnableOverDrive+0x90>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800681a:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <HAL_PWREx_EnableOverDrive+0x94>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006820:	f7fd f944 	bl	8003aac <HAL_GetTick>
 8006824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006826:	e009      	b.n	800683c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006828:	f7fd f940 	bl	8003aac <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006836:	d901      	bls.n	800683c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e01f      	b.n	800687c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <HAL_PWREx_EnableOverDrive+0x98>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d1ee      	bne.n	8006828 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006850:	f7fd f92c 	bl	8003aac <HAL_GetTick>
 8006854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006856:	e009      	b.n	800686c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006858:	f7fd f928 	bl	8003aac <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006866:	d901      	bls.n	800686c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e007      	b.n	800687c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <HAL_PWREx_EnableOverDrive+0x98>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006878:	d1ee      	bne.n	8006858 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40023800 	.word	0x40023800
 8006888:	420e0040 	.word	0x420e0040
 800688c:	40007000 	.word	0x40007000
 8006890:	420e0044 	.word	0x420e0044

08006894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e267      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d075      	beq.n	800699e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068b2:	4b88      	ldr	r3, [pc, #544]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d00c      	beq.n	80068d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068be:	4b85      	ldr	r3, [pc, #532]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d112      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ca:	4b82      	ldr	r3, [pc, #520]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d6:	d10b      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	4b7e      	ldr	r3, [pc, #504]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05b      	beq.n	800699c <HAL_RCC_OscConfig+0x108>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d157      	bne.n	800699c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e242      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f8:	d106      	bne.n	8006908 <HAL_RCC_OscConfig+0x74>
 80068fa:	4b76      	ldr	r3, [pc, #472]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a75      	ldr	r2, [pc, #468]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e01d      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006910:	d10c      	bne.n	800692c <HAL_RCC_OscConfig+0x98>
 8006912:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6f      	ldr	r2, [pc, #444]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b6d      	ldr	r3, [pc, #436]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6c      	ldr	r2, [pc, #432]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e00b      	b.n	8006944 <HAL_RCC_OscConfig+0xb0>
 800692c:	4b69      	ldr	r3, [pc, #420]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	4b66      	ldr	r3, [pc, #408]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a65      	ldr	r2, [pc, #404]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 800693e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fd f8ae 	bl	8003aac <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006954:	f7fd f8aa 	bl	8003aac <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e207      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0xc0>
 8006972:	e014      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006974:	f7fd f89a 	bl	8003aac <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697c:	f7fd f896 	bl	8003aac <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	; 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e1f3      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698e:	4b51      	ldr	r3, [pc, #324]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f0      	bne.n	800697c <HAL_RCC_OscConfig+0xe8>
 800699a:	e000      	b.n	800699e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d063      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 030c 	and.w	r3, r3, #12
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b6:	4b47      	ldr	r3, [pc, #284]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d11c      	bne.n	80069fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c2:	4b44      	ldr	r3, [pc, #272]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d116      	bne.n	80069fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ce:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_RCC_OscConfig+0x152>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d001      	beq.n	80069e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e1c7      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e6:	4b3b      	ldr	r3, [pc, #236]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4937      	ldr	r1, [pc, #220]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fa:	e03a      	b.n	8006a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d020      	beq.n	8006a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a04:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <HAL_RCC_OscConfig+0x244>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fd f84f 	bl	8003aac <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a12:	f7fd f84b 	bl	8003aac <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e1a8      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a24:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a30:	4b28      	ldr	r3, [pc, #160]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	4925      	ldr	r1, [pc, #148]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	600b      	str	r3, [r1, #0]
 8006a44:	e015      	b.n	8006a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <HAL_RCC_OscConfig+0x244>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fd f82e 	bl	8003aac <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a54:	f7fd f82a 	bl	8003aac <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e187      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a66:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d036      	beq.n	8006aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <HAL_RCC_OscConfig+0x248>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fd f80e 	bl	8003aac <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a94:	f7fd f80a 	bl	8003aac <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e167      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x200>
 8006ab2:	e01b      	b.n	8006aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCC_OscConfig+0x248>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aba:	f7fc fff7 	bl	8003aac <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac0:	e00e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac2:	f7fc fff3 	bl	8003aac <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d907      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e150      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	42470000 	.word	0x42470000
 8006adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae0:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ea      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8097 	beq.w	8006c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afe:	4b81      	ldr	r3, [pc, #516]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	4b7d      	ldr	r3, [pc, #500]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	4a7c      	ldr	r2, [pc, #496]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1a:	4b7a      	ldr	r3, [pc, #488]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2a:	4b77      	ldr	r3, [pc, #476]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d118      	bne.n	8006b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b36:	4b74      	ldr	r3, [pc, #464]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a73      	ldr	r2, [pc, #460]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b42:	f7fc ffb3 	bl	8003aac <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4a:	f7fc ffaf 	bl	8003aac <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e10c      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5c:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <HAL_RCC_OscConfig+0x474>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x2ea>
 8006b70:	4b64      	ldr	r3, [pc, #400]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	4a63      	ldr	r2, [pc, #396]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7c:	e01c      	b.n	8006bb8 <HAL_RCC_OscConfig+0x324>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x30c>
 8006b86:	4b5f      	ldr	r3, [pc, #380]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	4a5e      	ldr	r2, [pc, #376]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	6713      	str	r3, [r2, #112]	; 0x70
 8006b92:	4b5c      	ldr	r3, [pc, #368]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9e:	e00b      	b.n	8006bb8 <HAL_RCC_OscConfig+0x324>
 8006ba0:	4b58      	ldr	r3, [pc, #352]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	4a57      	ldr	r2, [pc, #348]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70
 8006bac:	4b55      	ldr	r3, [pc, #340]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	4a54      	ldr	r2, [pc, #336]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006bb2:	f023 0304 	bic.w	r3, r3, #4
 8006bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc0:	f7fc ff74 	bl	8003aac <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc8:	f7fc ff70 	bl	8003aac <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0cb      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bde:	4b49      	ldr	r3, [pc, #292]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0ee      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x334>
 8006bea:	e014      	b.n	8006c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bec:	f7fc ff5e 	bl	8003aac <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf4:	f7fc ff5a 	bl	8003aac <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e0b5      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0a:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ee      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1c:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	4a38      	ldr	r2, [pc, #224]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80a1 	beq.w	8006d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c32:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d05c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d141      	bne.n	8006cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fc ff2e 	bl	8003aac <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fc ff2a 	bl	8003aac <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e087      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	061b      	lsls	r3, r3, #24
 8006c96:	491b      	ldr	r1, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca2:	f7fc ff03 	bl	8003aac <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006caa:	f7fc feff 	bl	8003aac <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e05c      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x416>
 8006cc8:	e054      	b.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <HAL_RCC_OscConfig+0x478>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7fc feec 	bl	8003aac <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fc fee8 	bl	8003aac <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e045      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCC_OscConfig+0x470>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x444>
 8006cf6:	e03d      	b.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e038      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <HAL_RCC_OscConfig+0x4ec>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d028      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d121      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d11a      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d111      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800

08006d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0cc      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d98:	4b68      	ldr	r3, [pc, #416]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90c      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da6:	4b65      	ldr	r3, [pc, #404]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dae:	4b63      	ldr	r3, [pc, #396]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0b8      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd8:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4a58      	ldr	r2, [pc, #352]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006df0:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4a52      	ldr	r2, [pc, #328]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dfc:	4b50      	ldr	r3, [pc, #320]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	494d      	ldr	r1, [pc, #308]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d044      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d107      	bne.n	8006e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e22:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d119      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e07f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d003      	beq.n	8006e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d107      	bne.n	8006e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e42:	4b3f      	ldr	r3, [pc, #252]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e06f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e52:	4b3b      	ldr	r3, [pc, #236]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e067      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 0203 	bic.w	r2, r3, #3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4934      	ldr	r1, [pc, #208]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e74:	f7fc fe1a 	bl	8003aac <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e7c:	f7fc fe16 	bl	8003aac <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e04f      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 020c 	and.w	r2, r3, #12
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d1eb      	bne.n	8006e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d20c      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e032      	b.n	8006f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	4916      	ldr	r1, [pc, #88]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	490e      	ldr	r1, [pc, #56]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f0a:	f000 f821 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	490a      	ldr	r1, [pc, #40]	; (8006f44 <HAL_RCC_ClockConfig+0x1c0>)
 8006f1c:	5ccb      	ldrb	r3, [r1, r3]
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <HAL_RCC_ClockConfig+0x1c4>)
 8006f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_ClockConfig+0x1c8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fa fef2 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023c00 	.word	0x40023c00
 8006f40:	40023800 	.word	0x40023800
 8006f44:	08009e44 	.word	0x08009e44
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	20000054 	.word	0x20000054

08006f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b094      	sub	sp, #80	; 0x50
 8006f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f60:	2300      	movs	r3, #0
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f68:	4b79      	ldr	r3, [pc, #484]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d00d      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0x40>
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	f200 80e1 	bhi.w	800713c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_RCC_GetSysClockFreq+0x34>
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d003      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f82:	e0db      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b73      	ldr	r3, [pc, #460]	; (8007154 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f88:	e0db      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f8a:	4b73      	ldr	r3, [pc, #460]	; (8007158 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f8e:	e0d8      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f90:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d063      	beq.n	800706e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	099b      	lsrs	r3, r3, #6
 8006fac:	2200      	movs	r2, #0
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fba:	2300      	movs	r3, #0
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	f04f 0000 	mov.w	r0, #0
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	0159      	lsls	r1, r3, #5
 8006fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fd4:	0150      	lsls	r0, r2, #5
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4621      	mov	r1, r4
 8006fdc:	1a51      	subs	r1, r2, r1
 8006fde:	6139      	str	r1, [r7, #16]
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	018b      	lsls	r3, r1, #6
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ffe:	4651      	mov	r1, sl
 8007000:	018a      	lsls	r2, r1, #6
 8007002:	4651      	mov	r1, sl
 8007004:	ebb2 0801 	subs.w	r8, r2, r1
 8007008:	4659      	mov	r1, fp
 800700a:	eb63 0901 	sbc.w	r9, r3, r1
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800701a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800701e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007022:	4690      	mov	r8, r2
 8007024:	4699      	mov	r9, r3
 8007026:	4623      	mov	r3, r4
 8007028:	eb18 0303 	adds.w	r3, r8, r3
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	462b      	mov	r3, r5
 8007030:	eb49 0303 	adc.w	r3, r9, r3
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007042:	4629      	mov	r1, r5
 8007044:	024b      	lsls	r3, r1, #9
 8007046:	4621      	mov	r1, r4
 8007048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800704c:	4621      	mov	r1, r4
 800704e:	024a      	lsls	r2, r1, #9
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	2200      	movs	r2, #0
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
 800705a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800705c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007060:	f7f9 f8cc 	bl	80001fc <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706c:	e058      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	099b      	lsrs	r3, r3, #6
 8007074:	2200      	movs	r2, #0
 8007076:	4618      	mov	r0, r3
 8007078:	4611      	mov	r1, r2
 800707a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
 8007084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	f04f 0000 	mov.w	r0, #0
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	0159      	lsls	r1, r3, #5
 8007096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800709a:	0150      	lsls	r0, r2, #5
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4641      	mov	r1, r8
 80070a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80070a6:	4649      	mov	r1, r9
 80070a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070c0:	ebb2 040a 	subs.w	r4, r2, sl
 80070c4:	eb63 050b 	sbc.w	r5, r3, fp
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	00eb      	lsls	r3, r5, #3
 80070d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d6:	00e2      	lsls	r2, r4, #3
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	4643      	mov	r3, r8
 80070de:	18e3      	adds	r3, r4, r3
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	464b      	mov	r3, r9
 80070e4:	eb45 0303 	adc.w	r3, r5, r3
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070f6:	4629      	mov	r1, r5
 80070f8:	028b      	lsls	r3, r1, #10
 80070fa:	4621      	mov	r1, r4
 80070fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007100:	4621      	mov	r1, r4
 8007102:	028a      	lsls	r2, r1, #10
 8007104:	4610      	mov	r0, r2
 8007106:	4619      	mov	r1, r3
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	2200      	movs	r2, #0
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	61fa      	str	r2, [r7, #28]
 8007110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007114:	f7f9 f872 	bl	80001fc <__aeabi_uldivmod>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4613      	mov	r3, r2
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <HAL_RCC_GetSysClockFreq+0x200>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	3301      	adds	r3, #1
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800713a:	e002      	b.n	8007142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetSysClockFreq+0x204>)
 800713e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007144:	4618      	mov	r0, r3
 8007146:	3750      	adds	r7, #80	; 0x50
 8007148:	46bd      	mov	sp, r7
 800714a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800
 8007154:	00f42400 	.word	0x00f42400
 8007158:	007a1200 	.word	0x007a1200

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <HAL_RCC_GetHCLKFreq+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000000 	.word	0x20000000

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007178:	f7ff fff0 	bl	800715c <HAL_RCC_GetHCLKFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0a9b      	lsrs	r3, r3, #10
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4903      	ldr	r1, [pc, #12]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40023800 	.word	0x40023800
 8007198:	08009e54 	.word	0x08009e54

0800719c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a0:	f7ff ffdc 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071a4:	4602      	mov	r2, r0
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	0b5b      	lsrs	r3, r3, #13
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	4903      	ldr	r1, [pc, #12]	; (80071c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b2:	5ccb      	ldrb	r3, [r1, r3]
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800
 80071c0:	08009e54 	.word	0x08009e54

080071c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220f      	movs	r2, #15
 80071d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_RCC_GetClockConfig+0x5c>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0203 	and.w	r2, r3, #3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_RCC_GetClockConfig+0x5c>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_RCC_GetClockConfig+0x5c>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_GetClockConfig+0x5c>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	08db      	lsrs	r3, r3, #3
 80071fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <HAL_RCC_GetClockConfig+0x60>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 020f 	and.w	r2, r3, #15
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	40023c00 	.word	0x40023c00

08007228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007258:	2b00      	cmp	r3, #0
 800725a:	d075      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800725c:	4b91      	ldr	r3, [pc, #580]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007262:	f7fc fc23 	bl	8003aac <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007268:	e008      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800726a:	f7fc fc1f 	bl	8003aac <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e189      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800727c:	4b8a      	ldr	r3, [pc, #552]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	019a      	lsls	r2, r3, #6
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	071b      	lsls	r3, r3, #28
 80072a0:	4981      	ldr	r1, [pc, #516]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072b4:	4b7c      	ldr	r3, [pc, #496]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ba:	0f1b      	lsrs	r3, r3, #28
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	019a      	lsls	r2, r3, #6
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	431a      	orrs	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	071b      	lsls	r3, r3, #28
 80072d4:	4974      	ldr	r1, [pc, #464]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072dc:	4b72      	ldr	r3, [pc, #456]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e2:	f023 021f 	bic.w	r2, r3, #31
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	496e      	ldr	r1, [pc, #440]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	019a      	lsls	r2, r3, #6
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	061b      	lsls	r3, r3, #24
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	071b      	lsls	r3, r3, #28
 8007314:	4964      	ldr	r1, [pc, #400]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800731c:	4b61      	ldr	r3, [pc, #388]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007322:	f7fc fbc3 	bl	8003aac <HAL_GetTick>
 8007326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007328:	e008      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800732a:	f7fc fbbf 	bl	8003aac <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e129      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800733c:	4b5a      	ldr	r3, [pc, #360]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800735c:	2b00      	cmp	r3, #0
 800735e:	d079      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007360:	4b52      	ldr	r3, [pc, #328]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007366:	f7fc fba1 	bl	8003aac <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800736e:	f7fc fb9d 	bl	8003aac <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e107      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007380:	4b49      	ldr	r3, [pc, #292]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800738c:	d0ef      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d020      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800739a:	4b43      	ldr	r3, [pc, #268]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	0f1b      	lsrs	r3, r3, #28
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	019a      	lsls	r2, r3, #6
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	061b      	lsls	r3, r3, #24
 80073b4:	431a      	orrs	r2, r3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	071b      	lsls	r3, r3, #28
 80073ba:	493b      	ldr	r1, [pc, #236]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80073c2:	4b39      	ldr	r3, [pc, #228]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	4934      	ldr	r1, [pc, #208]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01e      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073e8:	4b2f      	ldr	r3, [pc, #188]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	019a      	lsls	r2, r3, #6
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	061b      	lsls	r3, r3, #24
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	071b      	lsls	r3, r3, #28
 8007408:	4927      	ldr	r1, [pc, #156]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	4922      	ldr	r1, [pc, #136]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007420:	4313      	orrs	r3, r2
 8007422:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007426:	4b21      	ldr	r3, [pc, #132]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800742c:	f7fc fb3e 	bl	8003aac <HAL_GetTick>
 8007430:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007434:	f7fc fb3a 	bl	8003aac <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0a4      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007446:	4b18      	ldr	r3, [pc, #96]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800744e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007452:	d1ef      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 808b 	beq.w	8007578 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	4a0f      	ldr	r2, [pc, #60]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	6413      	str	r3, [r2, #64]	; 0x40
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a0b      	ldr	r2, [pc, #44]	; (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007488:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800748a:	f7fc fb0f 	bl	8003aac <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007490:	e010      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007492:	f7fc fb0b 	bl	8003aac <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d909      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e075      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80074a4:	42470068 	.word	0x42470068
 80074a8:	40023800 	.word	0x40023800
 80074ac:	42470070 	.word	0x42470070
 80074b0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074b4:	4b38      	ldr	r3, [pc, #224]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0e8      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074c0:	4b36      	ldr	r3, [pc, #216]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d02f      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d028      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e8:	4b2d      	ldr	r3, [pc, #180]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074ee:	4b2c      	ldr	r3, [pc, #176]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074f4:	4a29      	ldr	r2, [pc, #164]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074fa:	4b28      	ldr	r3, [pc, #160]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b01      	cmp	r3, #1
 8007504:	d114      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007506:	f7fc fad1 	bl	8003aac <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800750c:	e00a      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750e:	f7fc facd 	bl	8003aac <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	f241 3288 	movw	r2, #5000	; 0x1388
 800751c:	4293      	cmp	r3, r2
 800751e:	d901      	bls.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e035      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007524:	4b1d      	ldr	r3, [pc, #116]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0ee      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753c:	d10d      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800753e:	4b17      	ldr	r3, [pc, #92]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800754e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007552:	4912      	ldr	r1, [pc, #72]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007554:	4313      	orrs	r3, r2
 8007556:	608b      	str	r3, [r1, #8]
 8007558:	e005      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	4a0f      	ldr	r2, [pc, #60]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007560:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007564:	6093      	str	r3, [r2, #8]
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007572:	490a      	ldr	r1, [pc, #40]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007574:	4313      	orrs	r3, r2
 8007576:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800758c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40007000 	.word	0x40007000
 800759c:	40023800 	.word	0x40023800
 80075a0:	42470e40 	.word	0x42470e40
 80075a4:	424711e0 	.word	0x424711e0

080075a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e025      	b.n	8007608 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fa fb95 	bl	8001d00 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f001 fe91 	bl	8009310 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	f001 fee6 	bl	80093ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007622:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d101      	bne.n	800762e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800762a:	2302      	movs	r3, #2
 800762c:	e021      	b.n	8007672 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d002      	beq.n	800763a <HAL_SDRAM_SendCommand+0x2a>
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b05      	cmp	r3, #5
 8007638:	d118      	bne.n	800766c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2202      	movs	r2, #2
 800763e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f001 ff26 	bl	800949c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d104      	bne.n	8007662 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2205      	movs	r2, #5
 800765c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007660:	e006      	b.n	8007670 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800766a:	e001      	b.n	8007670 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d101      	bne.n	8007694 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
 8007692:	e016      	b.n	80076c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10f      	bne.n	80076c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 ff31 	bl	8009516 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e000      	b.n	80076c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e07b      	b.n	80077d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d108      	bne.n	80076f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ec:	d009      	beq.n	8007702 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	e005      	b.n	8007702 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fa f8bb 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007738:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	ea42 0103 	orr.w	r1, r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	f003 0104 	and.w	r1, r3, #4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	f003 0210 	and.w	r2, r3, #16
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e01a      	b.n	8007824 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007804:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fa f8e6 	bl	80019d8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4613      	mov	r3, r2
 800783a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_SPI_Transmit+0x22>
 800784a:	2302      	movs	r3, #2
 800784c:	e126      	b.n	8007a9c <HAL_SPI_Transmit+0x270>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007856:	f7fc f929 	bl	8003aac <HAL_GetTick>
 800785a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800786c:	2302      	movs	r3, #2
 800786e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007870:	e10b      	b.n	8007a8a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SPI_Transmit+0x52>
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007882:	e102      	b.n	8007a8a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2203      	movs	r2, #3
 8007888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	88fa      	ldrh	r2, [r7, #6]
 800789c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ca:	d10f      	bne.n	80078ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d007      	beq.n	800790a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007912:	d14b      	bne.n	80079ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_Transmit+0xf6>
 800791c:	8afb      	ldrh	r3, [r7, #22]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d13e      	bne.n	80079a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	881a      	ldrh	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007946:	e02b      	b.n	80079a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b02      	cmp	r3, #2
 8007954:	d112      	bne.n	800797c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	1c9a      	adds	r2, r3, #2
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	86da      	strh	r2, [r3, #54]	; 0x36
 800797a:	e011      	b.n	80079a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797c:	f7fc f896 	bl	8003aac <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d803      	bhi.n	8007994 <HAL_SPI_Transmit+0x168>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d102      	bne.n	800799a <HAL_SPI_Transmit+0x16e>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800799e:	e074      	b.n	8007a8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1ce      	bne.n	8007948 <HAL_SPI_Transmit+0x11c>
 80079aa:	e04c      	b.n	8007a46 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_SPI_Transmit+0x18e>
 80079b4:	8afb      	ldrh	r3, [r7, #22]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d140      	bne.n	8007a3c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079e0:	e02c      	b.n	8007a3c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d113      	bne.n	8007a18 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a16:	e011      	b.n	8007a3c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a18:	f7fc f848 	bl	8003aac <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d803      	bhi.n	8007a30 <HAL_SPI_Transmit+0x204>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d102      	bne.n	8007a36 <HAL_SPI_Transmit+0x20a>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a3a:	e026      	b.n	8007a8a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1cd      	bne.n	80079e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 fbda 	bl	8008204 <SPI_EndRxTxTransaction>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	e000      	b.n	8007a8a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac0:	d112      	bne.n	8007ae8 <HAL_SPI_Receive+0x44>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2204      	movs	r2, #4
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f8f1 	bl	8007cc6 <HAL_SPI_TransmitReceive>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	e0ea      	b.n	8007cbe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_SPI_Receive+0x52>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e0e3      	b.n	8007cbe <HAL_SPI_Receive+0x21a>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007afe:	f7fb ffd5 	bl	8003aac <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d002      	beq.n	8007b16 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
 8007b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b14:	e0ca      	b.n	8007cac <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_SPI_Receive+0x7e>
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b26:	e0c1      	b.n	8007cac <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	88fa      	ldrh	r2, [r7, #6]
 8007b46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6e:	d10f      	bne.n	8007b90 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d007      	beq.n	8007bae <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d162      	bne.n	8007c7c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bb6:	e02e      	b.n	8007c16 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d115      	bne.n	8007bf2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f103 020c 	add.w	r2, r3, #12
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bf0:	e011      	b.n	8007c16 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bf2:	f7fb ff5b 	bl	8003aac <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d803      	bhi.n	8007c0a <HAL_SPI_Receive+0x166>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d102      	bne.n	8007c10 <HAL_SPI_Receive+0x16c>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c14:	e04a      	b.n	8007cac <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1cb      	bne.n	8007bb8 <HAL_SPI_Receive+0x114>
 8007c20:	e031      	b.n	8007c86 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d113      	bne.n	8007c58 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c56:	e011      	b.n	8007c7c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c58:	f7fb ff28 	bl	8003aac <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d803      	bhi.n	8007c70 <HAL_SPI_Receive+0x1cc>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d102      	bne.n	8007c76 <HAL_SPI_Receive+0x1d2>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c7a:	e017      	b.n	8007cac <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1cd      	bne.n	8007c22 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fa54 	bl	8008138 <SPI_EndRxTransaction>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	e000      	b.n	8007cac <HAL_SPI_Receive+0x208>
  }

error :
 8007caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b08c      	sub	sp, #48	; 0x30
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_SPI_TransmitReceive+0x26>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e18a      	b.n	8008002 <HAL_SPI_TransmitReceive+0x33c>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf4:	f7fb feda 	bl	8003aac <HAL_GetTick>
 8007cf8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d0a:	887b      	ldrh	r3, [r7, #2]
 8007d0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d00f      	beq.n	8007d36 <HAL_SPI_TransmitReceive+0x70>
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d1c:	d107      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x68>
 8007d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d003      	beq.n	8007d36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d34:	e15b      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x82>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x82>
 8007d42:	887b      	ldrh	r3, [r7, #2]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d4e:	e14e      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d003      	beq.n	8007d64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2205      	movs	r2, #5
 8007d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	887a      	ldrh	r2, [r7, #2]
 8007d74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	887a      	ldrh	r2, [r7, #2]
 8007d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	887a      	ldrh	r2, [r7, #2]
 8007d86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d007      	beq.n	8007db8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc0:	d178      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x10a>
 8007dca:	8b7b      	ldrh	r3, [r7, #26]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d166      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	1c9a      	adds	r2, r3, #2
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007df4:	e053      	b.n	8007e9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d11b      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x176>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d016      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0x176>
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d113      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	881a      	ldrh	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d119      	bne.n	8007e7e <HAL_SPI_TransmitReceive+0x1b8>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d014      	beq.n	8007e7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	b292      	uxth	r2, r2
 8007e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	1c9a      	adds	r2, r3, #2
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e7e:	f7fb fe15 	bl	8003aac <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d807      	bhi.n	8007e9e <HAL_SPI_TransmitReceive+0x1d8>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e94:	d003      	beq.n	8007e9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e9c:	e0a7      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1a6      	bne.n	8007df6 <HAL_SPI_TransmitReceive+0x130>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1a1      	bne.n	8007df6 <HAL_SPI_TransmitReceive+0x130>
 8007eb2:	e07c      	b.n	8007fae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_SPI_TransmitReceive+0x1fc>
 8007ebc:	8b7b      	ldrh	r3, [r7, #26]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d16b      	bne.n	8007f9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	7812      	ldrb	r2, [r2, #0]
 8007ece:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ee8:	e057      	b.n	8007f9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d11c      	bne.n	8007f32 <HAL_SPI_TransmitReceive+0x26c>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d017      	beq.n	8007f32 <HAL_SPI_TransmitReceive+0x26c>
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d114      	bne.n	8007f32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	7812      	ldrb	r2, [r2, #0]
 8007f14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d119      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x2ae>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f70:	2301      	movs	r3, #1
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f74:	f7fb fd9a 	bl	8003aac <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d803      	bhi.n	8007f8c <HAL_SPI_TransmitReceive+0x2c6>
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d102      	bne.n	8007f92 <HAL_SPI_TransmitReceive+0x2cc>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f98:	e029      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1a2      	bne.n	8007eea <HAL_SPI_TransmitReceive+0x224>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d19d      	bne.n	8007eea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f926 	bl	8008204 <SPI_EndRxTxTransaction>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007fca:	e010      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	e000      	b.n	8007fee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008002:	4618      	mov	r0, r3
 8008004:	3730      	adds	r7, #48	; 0x30
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008018:	b2db      	uxtb	r3, r3
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
	...

08008028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	4613      	mov	r3, r2
 8008036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008038:	f7fb fd38 	bl	8003aac <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4413      	add	r3, r2
 8008046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008048:	f7fb fd30 	bl	8003aac <HAL_GetTick>
 800804c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	015b      	lsls	r3, r3, #5
 8008054:	0d1b      	lsrs	r3, r3, #20
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	fb02 f303 	mul.w	r3, r2, r3
 800805c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805e:	e054      	b.n	800810a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d050      	beq.n	800810a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008068:	f7fb fd20 	bl	8003aac <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	429a      	cmp	r2, r3
 8008076:	d902      	bls.n	800807e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d13d      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800808c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008096:	d111      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d004      	beq.n	80080ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080aa:	d107      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d10f      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e017      	b.n	800812a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	3b01      	subs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4013      	ands	r3, r2
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	429a      	cmp	r2, r3
 8008126:	d19b      	bne.n	8008060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000000 	.word	0x20000000

08008138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800814c:	d111      	bne.n	8008172 <SPI_EndRxTransaction+0x3a>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008156:	d004      	beq.n	8008162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008160:	d107      	bne.n	8008172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008170:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800817a:	d12a      	bne.n	80081d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008184:	d012      	beq.n	80081ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ff49 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d02d      	beq.n	80081f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	f043 0220 	orr.w	r2, r3, #32
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e026      	b.n	80081fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	2101      	movs	r1, #1
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff ff36 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01a      	beq.n	80081f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f043 0220 	orr.w	r2, r3, #32
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e013      	b.n	80081fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2200      	movs	r2, #0
 80081da:	2101      	movs	r1, #1
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff ff23 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e000      	b.n	80081fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008210:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <SPI_EndRxTxTransaction+0x7c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <SPI_EndRxTxTransaction+0x80>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	0d5b      	lsrs	r3, r3, #21
 800821c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800822e:	d112      	bne.n	8008256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff fef4 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e00f      	b.n	8008276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	3b01      	subs	r3, #1
 8008260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d0f2      	beq.n	8008256 <SPI_EndRxTxTransaction+0x52>
 8008270:	e000      	b.n	8008274 <SPI_EndRxTxTransaction+0x70>
        break;
 8008272:	bf00      	nop
  }

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000000 	.word	0x20000000
 8008284:	165e9f81 	.word	0x165e9f81

08008288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e041      	b.n	800831e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 fbcc 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f000 fa96 	bl	80087f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d001      	beq.n	8008340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e04e      	b.n	80083de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a23      	ldr	r2, [pc, #140]	; (80083ec <HAL_TIM_Base_Start_IT+0xc4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d022      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800836a:	d01d      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a1f      	ldr	r2, [pc, #124]	; (80083f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a1e      	ldr	r2, [pc, #120]	; (80083f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1c      	ldr	r2, [pc, #112]	; (80083f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1b      	ldr	r2, [pc, #108]	; (80083fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <HAL_TIM_Base_Start_IT+0xd8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <HAL_TIM_Base_Start_IT+0xdc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d111      	bne.n	80083cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b06      	cmp	r3, #6
 80083b8:	d010      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	e007      	b.n	80083dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010000 	.word	0x40010000
 80083f0:	40000400 	.word	0x40000400
 80083f4:	40000800 	.word	0x40000800
 80083f8:	40000c00 	.word	0x40000c00
 80083fc:	40010400 	.word	0x40010400
 8008400:	40014000 	.word	0x40014000
 8008404:	40001800 	.word	0x40001800

08008408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d122      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d11b      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0202 	mvn.w	r2, #2
 8008434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9b5 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9a7 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9b8 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b04      	cmp	r3, #4
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b04      	cmp	r3, #4
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0204 	mvn.w	r2, #4
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f98b 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f97d 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f98e 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0208 	mvn.w	r2, #8
 80084dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f961 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f953 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f964 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b10      	cmp	r3, #16
 8008518:	d122      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b10      	cmp	r3, #16
 8008526:	d11b      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0210 	mvn.w	r2, #16
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2208      	movs	r2, #8
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f937 	bl	80087ba <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f929 	bl	80087a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f93a 	bl	80087ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b01      	cmp	r3, #1
 800856c:	d10e      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b01      	cmp	r3, #1
 800857a:	d107      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0201 	mvn.w	r2, #1
 8008584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7f8 fc32 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d10e      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d107      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fae0 	bl	8008b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d10e      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d107      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8ff 	bl	80087e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d10e      	bne.n	8008610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d107      	bne.n	8008610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0220 	mvn.w	r2, #32
 8008608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 faaa 	bl	8008b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_TIM_ConfigClockSource+0x1c>
 8008630:	2302      	movs	r3, #2
 8008632:	e0b4      	b.n	800879e <HAL_TIM_ConfigClockSource+0x186>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800865a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800866c:	d03e      	beq.n	80086ec <HAL_TIM_ConfigClockSource+0xd4>
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	f200 8087 	bhi.w	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867a:	f000 8086 	beq.w	800878a <HAL_TIM_ConfigClockSource+0x172>
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	d87f      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b70      	cmp	r3, #112	; 0x70
 8008686:	d01a      	beq.n	80086be <HAL_TIM_ConfigClockSource+0xa6>
 8008688:	2b70      	cmp	r3, #112	; 0x70
 800868a:	d87b      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b60      	cmp	r3, #96	; 0x60
 800868e:	d050      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x11a>
 8008690:	2b60      	cmp	r3, #96	; 0x60
 8008692:	d877      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b50      	cmp	r3, #80	; 0x50
 8008696:	d03c      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0xfa>
 8008698:	2b50      	cmp	r3, #80	; 0x50
 800869a:	d873      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	d058      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x13a>
 80086a0:	2b40      	cmp	r3, #64	; 0x40
 80086a2:	d86f      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b30      	cmp	r3, #48	; 0x30
 80086a6:	d064      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086a8:	2b30      	cmp	r3, #48	; 0x30
 80086aa:	d86b      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d060      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d867      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d05c      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086b8:	2b10      	cmp	r3, #16
 80086ba:	d05a      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x15a>
 80086bc:	e062      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6899      	ldr	r1, [r3, #8]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f000 f9ad 	bl	8008a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
      break;
 80086ea:	e04f      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	6899      	ldr	r1, [r3, #8]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f000 f996 	bl	8008a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800870e:	609a      	str	r2, [r3, #8]
      break;
 8008710:	e03c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6859      	ldr	r1, [r3, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	461a      	mov	r2, r3
 8008720:	f000 f90a 	bl	8008938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2150      	movs	r1, #80	; 0x50
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f963 	bl	80089f6 <TIM_ITRx_SetConfig>
      break;
 8008730:	e02c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	461a      	mov	r2, r3
 8008740:	f000 f929 	bl	8008996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2160      	movs	r1, #96	; 0x60
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f953 	bl	80089f6 <TIM_ITRx_SetConfig>
      break;
 8008750:	e01c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	461a      	mov	r2, r3
 8008760:	f000 f8ea 	bl	8008938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2140      	movs	r1, #64	; 0x40
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f943 	bl	80089f6 <TIM_ITRx_SetConfig>
      break;
 8008770:	e00c      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f000 f93a 	bl	80089f6 <TIM_ITRx_SetConfig>
      break;
 8008782:	e003      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e000      	b.n	800878c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800878a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a40      	ldr	r2, [pc, #256]	; (800890c <TIM_Base_SetConfig+0x114>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d013      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a3d      	ldr	r2, [pc, #244]	; (8008910 <TIM_Base_SetConfig+0x118>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a3c      	ldr	r2, [pc, #240]	; (8008914 <TIM_Base_SetConfig+0x11c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a3b      	ldr	r2, [pc, #236]	; (8008918 <TIM_Base_SetConfig+0x120>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3a      	ldr	r2, [pc, #232]	; (800891c <TIM_Base_SetConfig+0x124>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d108      	bne.n	800884a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a2f      	ldr	r2, [pc, #188]	; (800890c <TIM_Base_SetConfig+0x114>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d02b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008858:	d027      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a2c      	ldr	r2, [pc, #176]	; (8008910 <TIM_Base_SetConfig+0x118>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d023      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2b      	ldr	r2, [pc, #172]	; (8008914 <TIM_Base_SetConfig+0x11c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01f      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2a      	ldr	r2, [pc, #168]	; (8008918 <TIM_Base_SetConfig+0x120>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d01b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a29      	ldr	r2, [pc, #164]	; (800891c <TIM_Base_SetConfig+0x124>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d017      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a28      	ldr	r2, [pc, #160]	; (8008920 <TIM_Base_SetConfig+0x128>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d013      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a27      	ldr	r2, [pc, #156]	; (8008924 <TIM_Base_SetConfig+0x12c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00f      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a26      	ldr	r2, [pc, #152]	; (8008928 <TIM_Base_SetConfig+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a25      	ldr	r2, [pc, #148]	; (800892c <TIM_Base_SetConfig+0x134>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d007      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a24      	ldr	r2, [pc, #144]	; (8008930 <TIM_Base_SetConfig+0x138>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a23      	ldr	r2, [pc, #140]	; (8008934 <TIM_Base_SetConfig+0x13c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a0a      	ldr	r2, [pc, #40]	; (800890c <TIM_Base_SetConfig+0x114>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_Base_SetConfig+0xf8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <TIM_Base_SetConfig+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	615a      	str	r2, [r3, #20]
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40010000 	.word	0x40010000
 8008910:	40000400 	.word	0x40000400
 8008914:	40000800 	.word	0x40000800
 8008918:	40000c00 	.word	0x40000c00
 800891c:	40010400 	.word	0x40010400
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800
 800892c:	40001800 	.word	0x40001800
 8008930:	40001c00 	.word	0x40001c00
 8008934:	40002000 	.word	0x40002000

08008938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f023 0201 	bic.w	r2, r3, #1
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 030a 	bic.w	r3, r3, #10
 8008974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f023 0210 	bic.w	r2, r3, #16
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	031b      	lsls	r3, r3, #12
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f043 0307 	orr.w	r3, r3, #7
 8008a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	609a      	str	r2, [r3, #8]
}
 8008a20:	bf00      	nop
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	021a      	lsls	r2, r3, #8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	609a      	str	r2, [r3, #8]
}
 8008a60:	bf00      	nop
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e05a      	b.n	8008b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d022      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad0:	d01d      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1d      	ldr	r2, [pc, #116]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d018      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d013      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00e      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d009      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10c      	bne.n	8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40010000 	.word	0x40010000
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	40000c00 	.word	0x40000c00
 8008b58:	40010400 	.word	0x40010400
 8008b5c:	40014000 	.word	0x40014000
 8008b60:	40001800 	.word	0x40001800

08008b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e03f      	b.n	8008c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 ff6c 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2224      	movs	r2, #36	; 0x24
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f929 	bl	8008e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695a      	ldr	r2, [r3, #20]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b08a      	sub	sp, #40	; 0x28
 8008c2a:	af02      	add	r7, sp, #8
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	603b      	str	r3, [r7, #0]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d17c      	bne.n	8008d40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_UART_Transmit+0x2c>
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e075      	b.n	8008d42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_UART_Transmit+0x3e>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e06e      	b.n	8008d42 <HAL_UART_Transmit+0x11c>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2221      	movs	r2, #33	; 0x21
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c7a:	f7fa ff17 	bl	8003aac <HAL_GetTick>
 8008c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	88fa      	ldrh	r2, [r7, #6]
 8008c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	d108      	bne.n	8008ca8 <HAL_UART_Transmit+0x82>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d104      	bne.n	8008ca8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	e003      	b.n	8008cb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cb8:	e02a      	b.n	8008d10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2180      	movs	r1, #128	; 0x80
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f840 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e036      	b.n	8008d42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	3302      	adds	r3, #2
 8008cee:	61bb      	str	r3, [r7, #24]
 8008cf0:	e007      	b.n	8008d02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1cf      	bne.n	8008cba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2200      	movs	r2, #0
 8008d22:	2140      	movs	r1, #64	; 0x40
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f810 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b090      	sub	sp, #64	; 0x40
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	4613      	mov	r3, r2
 8008d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5a:	e050      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d04c      	beq.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d6a:	f7fa fe9f 	bl	8003aac <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d241      	bcs.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d9a:	637a      	str	r2, [r7, #52]	; 0x34
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e5      	bne.n	8008d7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3314      	adds	r3, #20
 8008db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3314      	adds	r3, #20
 8008dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dce:	623a      	str	r2, [r7, #32]
 8008dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	69f9      	ldr	r1, [r7, #28]
 8008dd4:	6a3a      	ldr	r2, [r7, #32]
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e5      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e00f      	b.n	8008e1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4013      	ands	r3, r2
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d09f      	beq.n	8008d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3740      	adds	r7, #64	; 0x40
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e2c:	b0c0      	sub	sp, #256	; 0x100
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	68d9      	ldr	r1, [r3, #12]
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	ea40 0301 	orr.w	r3, r0, r1
 8008e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e80:	f021 010c 	bic.w	r1, r1, #12
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea2:	6999      	ldr	r1, [r3, #24]
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	ea40 0301 	orr.w	r3, r0, r1
 8008eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	4b8f      	ldr	r3, [pc, #572]	; (80090f4 <UART_SetConfig+0x2cc>)
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d005      	beq.n	8008ec8 <UART_SetConfig+0xa0>
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <UART_SetConfig+0x2d0>)
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d104      	bne.n	8008ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ec8:	f7fe f968 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8008ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ed0:	e003      	b.n	8008eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ed2:	f7fe f94f 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8008ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee4:	f040 810c 	bne.w	8009100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008efa:	4622      	mov	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	1891      	adds	r1, r2, r2
 8008f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f02:	415b      	adcs	r3, r3
 8008f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	eb12 0801 	adds.w	r8, r2, r1
 8008f10:	4629      	mov	r1, r5
 8008f12:	eb43 0901 	adc.w	r9, r3, r1
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f2a:	4690      	mov	r8, r2
 8008f2c:	4699      	mov	r9, r3
 8008f2e:	4623      	mov	r3, r4
 8008f30:	eb18 0303 	adds.w	r3, r8, r3
 8008f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f38:	462b      	mov	r3, r5
 8008f3a:	eb49 0303 	adc.w	r3, r9, r3
 8008f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f56:	460b      	mov	r3, r1
 8008f58:	18db      	adds	r3, r3, r3
 8008f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	eb42 0303 	adc.w	r3, r2, r3
 8008f62:	657b      	str	r3, [r7, #84]	; 0x54
 8008f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f6c:	f7f7 f946 	bl	80001fc <__aeabi_uldivmod>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4b61      	ldr	r3, [pc, #388]	; (80090fc <UART_SetConfig+0x2d4>)
 8008f76:	fba3 2302 	umull	r2, r3, r3, r2
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	011c      	lsls	r4, r3, #4
 8008f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f90:	4642      	mov	r2, r8
 8008f92:	464b      	mov	r3, r9
 8008f94:	1891      	adds	r1, r2, r2
 8008f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f98:	415b      	adcs	r3, r3
 8008f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fc0:	4692      	mov	sl, r2
 8008fc2:	469b      	mov	fp, r3
 8008fc4:	4643      	mov	r3, r8
 8008fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fec:	460b      	mov	r3, r1
 8008fee:	18db      	adds	r3, r3, r3
 8008ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	eb42 0303 	adc.w	r3, r2, r3
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009002:	f7f7 f8fb 	bl	80001fc <__aeabi_uldivmod>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4611      	mov	r1, r2
 800900c:	4b3b      	ldr	r3, [pc, #236]	; (80090fc <UART_SetConfig+0x2d4>)
 800900e:	fba3 2301 	umull	r2, r3, r3, r1
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	2264      	movs	r2, #100	; 0x64
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	1acb      	subs	r3, r1, r3
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009022:	4b36      	ldr	r3, [pc, #216]	; (80090fc <UART_SetConfig+0x2d4>)
 8009024:	fba3 2302 	umull	r2, r3, r3, r2
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009030:	441c      	add	r4, r3
 8009032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009036:	2200      	movs	r2, #0
 8009038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800903c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	1891      	adds	r1, r2, r2
 800904a:	63b9      	str	r1, [r7, #56]	; 0x38
 800904c:	415b      	adcs	r3, r3
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009054:	4641      	mov	r1, r8
 8009056:	1851      	adds	r1, r2, r1
 8009058:	6339      	str	r1, [r7, #48]	; 0x30
 800905a:	4649      	mov	r1, r9
 800905c:	414b      	adcs	r3, r1
 800905e:	637b      	str	r3, [r7, #52]	; 0x34
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	f04f 0300 	mov.w	r3, #0
 8009068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800906c:	4659      	mov	r1, fp
 800906e:	00cb      	lsls	r3, r1, #3
 8009070:	4651      	mov	r1, sl
 8009072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009076:	4651      	mov	r1, sl
 8009078:	00ca      	lsls	r2, r1, #3
 800907a:	4610      	mov	r0, r2
 800907c:	4619      	mov	r1, r3
 800907e:	4603      	mov	r3, r0
 8009080:	4642      	mov	r2, r8
 8009082:	189b      	adds	r3, r3, r2
 8009084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009088:	464b      	mov	r3, r9
 800908a:	460a      	mov	r2, r1
 800908c:	eb42 0303 	adc.w	r3, r2, r3
 8009090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090a8:	460b      	mov	r3, r1
 80090aa:	18db      	adds	r3, r3, r3
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ae:	4613      	mov	r3, r2
 80090b0:	eb42 0303 	adc.w	r3, r2, r3
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090be:	f7f7 f89d 	bl	80001fc <__aeabi_uldivmod>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <UART_SetConfig+0x2d4>)
 80090c8:	fba3 1302 	umull	r1, r3, r3, r2
 80090cc:	095b      	lsrs	r3, r3, #5
 80090ce:	2164      	movs	r1, #100	; 0x64
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	3332      	adds	r3, #50	; 0x32
 80090da:	4a08      	ldr	r2, [pc, #32]	; (80090fc <UART_SetConfig+0x2d4>)
 80090dc:	fba2 2303 	umull	r2, r3, r2, r3
 80090e0:	095b      	lsrs	r3, r3, #5
 80090e2:	f003 0207 	and.w	r2, r3, #7
 80090e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4422      	add	r2, r4
 80090ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090f0:	e105      	b.n	80092fe <UART_SetConfig+0x4d6>
 80090f2:	bf00      	nop
 80090f4:	40011000 	.word	0x40011000
 80090f8:	40011400 	.word	0x40011400
 80090fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009104:	2200      	movs	r2, #0
 8009106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800910a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800910e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	1891      	adds	r1, r2, r2
 8009118:	6239      	str	r1, [r7, #32]
 800911a:	415b      	adcs	r3, r3
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
 800911e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009122:	4641      	mov	r1, r8
 8009124:	1854      	adds	r4, r2, r1
 8009126:	4649      	mov	r1, r9
 8009128:	eb43 0501 	adc.w	r5, r3, r1
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	00eb      	lsls	r3, r5, #3
 8009136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800913a:	00e2      	lsls	r2, r4, #3
 800913c:	4614      	mov	r4, r2
 800913e:	461d      	mov	r5, r3
 8009140:	4643      	mov	r3, r8
 8009142:	18e3      	adds	r3, r4, r3
 8009144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009148:	464b      	mov	r3, r9
 800914a:	eb45 0303 	adc.w	r3, r5, r3
 800914e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800915e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800916e:	4629      	mov	r1, r5
 8009170:	008b      	lsls	r3, r1, #2
 8009172:	4621      	mov	r1, r4
 8009174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009178:	4621      	mov	r1, r4
 800917a:	008a      	lsls	r2, r1, #2
 800917c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009180:	f7f7 f83c 	bl	80001fc <__aeabi_uldivmod>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4b60      	ldr	r3, [pc, #384]	; (800930c <UART_SetConfig+0x4e4>)
 800918a:	fba3 2302 	umull	r2, r3, r3, r2
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	011c      	lsls	r4, r3, #4
 8009192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009196:	2200      	movs	r2, #0
 8009198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800919c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	1891      	adds	r1, r2, r2
 80091aa:	61b9      	str	r1, [r7, #24]
 80091ac:	415b      	adcs	r3, r3
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091b4:	4641      	mov	r1, r8
 80091b6:	1851      	adds	r1, r2, r1
 80091b8:	6139      	str	r1, [r7, #16]
 80091ba:	4649      	mov	r1, r9
 80091bc:	414b      	adcs	r3, r1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	f04f 0300 	mov.w	r3, #0
 80091c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091cc:	4659      	mov	r1, fp
 80091ce:	00cb      	lsls	r3, r1, #3
 80091d0:	4651      	mov	r1, sl
 80091d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091d6:	4651      	mov	r1, sl
 80091d8:	00ca      	lsls	r2, r1, #3
 80091da:	4610      	mov	r0, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	4603      	mov	r3, r0
 80091e0:	4642      	mov	r2, r8
 80091e2:	189b      	adds	r3, r3, r2
 80091e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091e8:	464b      	mov	r3, r9
 80091ea:	460a      	mov	r2, r1
 80091ec:	eb42 0303 	adc.w	r3, r2, r3
 80091f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80091fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800920c:	4649      	mov	r1, r9
 800920e:	008b      	lsls	r3, r1, #2
 8009210:	4641      	mov	r1, r8
 8009212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009216:	4641      	mov	r1, r8
 8009218:	008a      	lsls	r2, r1, #2
 800921a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800921e:	f7f6 ffed 	bl	80001fc <__aeabi_uldivmod>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4b39      	ldr	r3, [pc, #228]	; (800930c <UART_SetConfig+0x4e4>)
 8009228:	fba3 1302 	umull	r1, r3, r3, r2
 800922c:	095b      	lsrs	r3, r3, #5
 800922e:	2164      	movs	r1, #100	; 0x64
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	3332      	adds	r3, #50	; 0x32
 800923a:	4a34      	ldr	r2, [pc, #208]	; (800930c <UART_SetConfig+0x4e4>)
 800923c:	fba2 2303 	umull	r2, r3, r2, r3
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009246:	441c      	add	r4, r3
 8009248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800924c:	2200      	movs	r2, #0
 800924e:	673b      	str	r3, [r7, #112]	; 0x70
 8009250:	677a      	str	r2, [r7, #116]	; 0x74
 8009252:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009256:	4642      	mov	r2, r8
 8009258:	464b      	mov	r3, r9
 800925a:	1891      	adds	r1, r2, r2
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	415b      	adcs	r3, r3
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009266:	4641      	mov	r1, r8
 8009268:	1851      	adds	r1, r2, r1
 800926a:	6039      	str	r1, [r7, #0]
 800926c:	4649      	mov	r1, r9
 800926e:	414b      	adcs	r3, r1
 8009270:	607b      	str	r3, [r7, #4]
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800927e:	4659      	mov	r1, fp
 8009280:	00cb      	lsls	r3, r1, #3
 8009282:	4651      	mov	r1, sl
 8009284:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009288:	4651      	mov	r1, sl
 800928a:	00ca      	lsls	r2, r1, #3
 800928c:	4610      	mov	r0, r2
 800928e:	4619      	mov	r1, r3
 8009290:	4603      	mov	r3, r0
 8009292:	4642      	mov	r2, r8
 8009294:	189b      	adds	r3, r3, r2
 8009296:	66bb      	str	r3, [r7, #104]	; 0x68
 8009298:	464b      	mov	r3, r9
 800929a:	460a      	mov	r2, r1
 800929c:	eb42 0303 	adc.w	r3, r2, r3
 80092a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	663b      	str	r3, [r7, #96]	; 0x60
 80092ac:	667a      	str	r2, [r7, #100]	; 0x64
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80092ba:	4649      	mov	r1, r9
 80092bc:	008b      	lsls	r3, r1, #2
 80092be:	4641      	mov	r1, r8
 80092c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092c4:	4641      	mov	r1, r8
 80092c6:	008a      	lsls	r2, r1, #2
 80092c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80092cc:	f7f6 ff96 	bl	80001fc <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4b0d      	ldr	r3, [pc, #52]	; (800930c <UART_SetConfig+0x4e4>)
 80092d6:	fba3 1302 	umull	r1, r3, r3, r2
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	2164      	movs	r1, #100	; 0x64
 80092de:	fb01 f303 	mul.w	r3, r1, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	3332      	adds	r3, #50	; 0x32
 80092e8:	4a08      	ldr	r2, [pc, #32]	; (800930c <UART_SetConfig+0x4e4>)
 80092ea:	fba2 2303 	umull	r2, r3, r2, r3
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	f003 020f 	and.w	r2, r3, #15
 80092f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4422      	add	r2, r4
 80092fc:	609a      	str	r2, [r3, #8]
}
 80092fe:	bf00      	nop
 8009300:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009304:	46bd      	mov	sp, r7
 8009306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800930a:	bf00      	nop
 800930c:	51eb851f 	.word	0x51eb851f

08009310 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d123      	bne.n	800936a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800932a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	6851      	ldr	r1, [r2, #4]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	6892      	ldr	r2, [r2, #8]
 8009336:	4311      	orrs	r1, r2
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68d2      	ldr	r2, [r2, #12]
 800933c:	4311      	orrs	r1, r2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	6912      	ldr	r2, [r2, #16]
 8009342:	4311      	orrs	r1, r2
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	6952      	ldr	r2, [r2, #20]
 8009348:	4311      	orrs	r1, r2
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	6992      	ldr	r2, [r2, #24]
 800934e:	4311      	orrs	r1, r2
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	69d2      	ldr	r2, [r2, #28]
 8009354:	4311      	orrs	r1, r2
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	6a12      	ldr	r2, [r2, #32]
 800935a:	4311      	orrs	r1, r2
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009360:	430a      	orrs	r2, r1
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	e028      	b.n	80093bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	69d9      	ldr	r1, [r3, #28]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	4319      	orrs	r1, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	430b      	orrs	r3, r1
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	6851      	ldr	r1, [r2, #4]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	6892      	ldr	r2, [r2, #8]
 800939c:	4311      	orrs	r1, r2
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	68d2      	ldr	r2, [r2, #12]
 80093a2:	4311      	orrs	r1, r2
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	6912      	ldr	r2, [r2, #16]
 80093a8:	4311      	orrs	r1, r2
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	6952      	ldr	r2, [r2, #20]
 80093ae:	4311      	orrs	r1, r2
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	6992      	ldr	r2, [r2, #24]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d128      	bne.n	800942e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	1e59      	subs	r1, r3, #1
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	4319      	orrs	r1, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	4319      	orrs	r1, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	3b01      	subs	r3, #1
 8009404:	031b      	lsls	r3, r3, #12
 8009406:	4319      	orrs	r1, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	3b01      	subs	r3, #1
 800940e:	041b      	lsls	r3, r3, #16
 8009410:	4319      	orrs	r1, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	3b01      	subs	r3, #1
 8009418:	051b      	lsls	r3, r3, #20
 800941a:	4319      	orrs	r1, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	3b01      	subs	r3, #1
 8009422:	061b      	lsls	r3, r3, #24
 8009424:	430b      	orrs	r3, r1
 8009426:	431a      	orrs	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	609a      	str	r2, [r3, #8]
 800942c:	e02f      	b.n	800948e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	68d2      	ldr	r2, [r2, #12]
 800943e:	3a01      	subs	r2, #1
 8009440:	0311      	lsls	r1, r2, #12
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	6952      	ldr	r2, [r2, #20]
 8009446:	3a01      	subs	r2, #1
 8009448:	0512      	lsls	r2, r2, #20
 800944a:	430a      	orrs	r2, r1
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	1e59      	subs	r1, r3, #1
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	3b01      	subs	r3, #1
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	4319      	orrs	r1, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	3b01      	subs	r3, #1
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	4319      	orrs	r1, r3
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	3b01      	subs	r3, #1
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	4319      	orrs	r1, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	3b01      	subs	r3, #1
 8009484:	061b      	lsls	r3, r3, #24
 8009486:	430b      	orrs	r3, r1
 8009488:	431a      	orrs	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	0d9b      	lsrs	r3, r3, #22
 80094b2:	059b      	lsls	r3, r3, #22
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	6811      	ldr	r1, [r2, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	6852      	ldr	r2, [r2, #4]
 80094bc:	4311      	orrs	r1, r2
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	6892      	ldr	r2, [r2, #8]
 80094c2:	3a01      	subs	r2, #1
 80094c4:	0152      	lsls	r2, r2, #5
 80094c6:	4311      	orrs	r1, r2
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	68d2      	ldr	r2, [r2, #12]
 80094cc:	0252      	lsls	r2, r2, #9
 80094ce:	430a      	orrs	r2, r1
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80094d6:	f7fa fae9 	bl	8003aac <HAL_GetTick>
 80094da:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80094dc:	e010      	b.n	8009500 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d00c      	beq.n	8009500 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d007      	beq.n	80094fc <FMC_SDRAM_SendCommand+0x60>
 80094ec:	f7fa fade 	bl	8003aac <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d201      	bcs.n	8009500 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e006      	b.n	800950e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b20      	cmp	r3, #32
 800950a:	d0e8      	beq.n	80094de <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009528:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	0052      	lsls	r2, r2, #1
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009544:	b084      	sub	sp, #16
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	f107 001c 	add.w	r0, r7, #28
 8009552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d122      	bne.n	80095a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f970 	bl	800987c <USB_CoreReset>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e01a      	b.n	80095d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f964 	bl	800987c <USB_CoreReset>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	639a      	str	r2, [r3, #56]	; 0x38
 80095ca:	e005      	b.n	80095d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d10b      	bne.n	80095f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f043 0206 	orr.w	r2, r3, #6
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f043 0220 	orr.w	r2, r3, #32
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009602:	b004      	add	sp, #16
 8009604:	4770      	bx	lr

08009606 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d115      	bne.n	8009676 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009656:	2001      	movs	r0, #1
 8009658:	f7fa fa34 	bl	8003ac4 <HAL_Delay>
      ms++;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f8fb 	bl	800985e <USB_GetMode>
 8009668:	4603      	mov	r3, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	d01e      	beq.n	80096ac <USB_SetCurrentMode+0x84>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b31      	cmp	r3, #49	; 0x31
 8009672:	d9f0      	bls.n	8009656 <USB_SetCurrentMode+0x2e>
 8009674:	e01a      	b.n	80096ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d115      	bne.n	80096a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009688:	2001      	movs	r0, #1
 800968a:	f7fa fa1b 	bl	8003ac4 <HAL_Delay>
      ms++;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3301      	adds	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f8e2 	bl	800985e <USB_GetMode>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <USB_SetCurrentMode+0x84>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b31      	cmp	r3, #49	; 0x31
 80096a4:	d9f0      	bls.n	8009688 <USB_SetCurrentMode+0x60>
 80096a6:	e001      	b.n	80096ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e005      	b.n	80096b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b32      	cmp	r3, #50	; 0x32
 80096b0:	d101      	bne.n	80096b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a13      	ldr	r2, [pc, #76]	; (8009724 <USB_FlushTxFifo+0x64>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e01b      	b.n	8009718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	daf2      	bge.n	80096ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	019b      	lsls	r3, r3, #6
 80096f0:	f043 0220 	orr.w	r2, r3, #32
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a08      	ldr	r2, [pc, #32]	; (8009724 <USB_FlushTxFifo+0x64>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d901      	bls.n	800970a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e006      	b.n	8009718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d0f0      	beq.n	80096f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	00030d40 	.word	0x00030d40

08009728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3301      	adds	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a11      	ldr	r2, [pc, #68]	; (8009784 <USB_FlushRxFifo+0x5c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d901      	bls.n	8009746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e018      	b.n	8009778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	daf2      	bge.n	8009734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2210      	movs	r2, #16
 8009756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4a08      	ldr	r2, [pc, #32]	; (8009784 <USB_FlushRxFifo+0x5c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d901      	bls.n	800976a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e006      	b.n	8009778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b10      	cmp	r3, #16
 8009774:	d0f0      	beq.n	8009758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	00030d40 	.word	0x00030d40

08009788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009788:	b480      	push	{r7}
 800978a:	b08b      	sub	sp, #44	; 0x2c
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	089b      	lsrs	r3, r3, #2
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80097ae:	2300      	movs	r3, #0
 80097b0:	623b      	str	r3, [r7, #32]
 80097b2:	e014      	b.n	80097de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	601a      	str	r2, [r3, #0]
    pDest++;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	3301      	adds	r3, #1
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	3301      	adds	r3, #1
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	3301      	adds	r3, #1
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	3301      	adds	r3, #1
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	3301      	adds	r3, #1
 80097dc:	623b      	str	r3, [r7, #32]
 80097de:	6a3a      	ldr	r2, [r7, #32]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d3e6      	bcc.n	80097b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80097e6:	8bfb      	ldrh	r3, [r7, #30]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01e      	beq.n	800982a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f6:	461a      	mov	r2, r3
 80097f8:	f107 0310 	add.w	r3, r7, #16
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	fa22 f303 	lsr.w	r3, r2, r3
 800980c:	b2da      	uxtb	r2, r3
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	701a      	strb	r2, [r3, #0]
      i++;
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	3301      	adds	r3, #1
 8009816:	623b      	str	r3, [r7, #32]
      pDest++;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	3301      	adds	r3, #1
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800981e:	8bfb      	ldrh	r3, [r7, #30]
 8009820:	3b01      	subs	r3, #1
 8009822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009824:	8bfb      	ldrh	r3, [r7, #30]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1ea      	bne.n	8009800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800982c:	4618      	mov	r0, r3
 800982e:	372c      	adds	r7, #44	; 0x2c
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4013      	ands	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009850:	68fb      	ldr	r3, [r7, #12]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	f003 0301 	and.w	r3, r3, #1
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
	...

0800987c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a13      	ldr	r2, [pc, #76]	; (80098e0 <USB_CoreReset+0x64>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d901      	bls.n	800989a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e01b      	b.n	80098d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	daf2      	bge.n	8009888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f043 0201 	orr.w	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <USB_CoreReset+0x64>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d901      	bls.n	80098c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e006      	b.n	80098d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d0f0      	beq.n	80098b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	00030d40 	.word	0x00030d40

080098e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098e4:	b084      	sub	sp, #16
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b086      	sub	sp, #24
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80098f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009904:	461a      	mov	r2, r3
 8009906:	2300      	movs	r3, #0
 8009908:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10a      	bne.n	8009956 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800994e:	f043 0304 	orr.w	r3, r3, #4
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	e014      	b.n	8009980 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009964:	f023 0304 	bic.w	r3, r3, #4
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e009      	b.n	8009980 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800997a:	f023 0304 	bic.w	r3, r3, #4
 800997e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009980:	2110      	movs	r1, #16
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fe9c 	bl	80096c0 <USB_FlushTxFifo>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fec8 	bl	8009728 <USB_FlushRxFifo>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	e015      	b.n	80099d4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b4:	461a      	mov	r2, r3
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c8:	461a      	mov	r2, r3
 80099ca:	2300      	movs	r3, #0
 80099cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	613b      	str	r3, [r7, #16]
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d3e5      	bcc.n	80099a8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f04f 32ff 	mov.w	r2, #4294967295
 80099e8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a13      	ldr	r2, [pc, #76]	; (8009a50 <USB_HostInit+0x16c>)
 8009a02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a13      	ldr	r2, [pc, #76]	; (8009a54 <USB_HostInit+0x170>)
 8009a08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009a0c:	e009      	b.n	8009a22 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2280      	movs	r2, #128	; 0x80
 8009a12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a10      	ldr	r2, [pc, #64]	; (8009a58 <USB_HostInit+0x174>)
 8009a18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a0f      	ldr	r2, [pc, #60]	; (8009a5c <USB_HostInit+0x178>)
 8009a1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d105      	bne.n	8009a34 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	f043 0210 	orr.w	r2, r3, #16
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699a      	ldr	r2, [r3, #24]
 8009a38:	4b09      	ldr	r3, [pc, #36]	; (8009a60 <USB_HostInit+0x17c>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a4c:	b004      	add	sp, #16
 8009a4e:	4770      	bx	lr
 8009a50:	01000200 	.word	0x01000200
 8009a54:	00e00300 	.word	0x00e00300
 8009a58:	00600080 	.word	0x00600080
 8009a5c:	004000e0 	.word	0x004000e0
 8009a60:	a3200008 	.word	0xa3200008

08009a64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d107      	bne.n	8009ab6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aac:	461a      	mov	r2, r3
 8009aae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ab2:	6053      	str	r3, [r2, #4]
 8009ab4:	e009      	b.n	8009aca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d106      	bne.n	8009aca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f241 7370 	movw	r3, #6000	; 0x1770
 8009ac8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	b29b      	uxth	r3, r3
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b089      	sub	sp, #36	; 0x24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	0c9b      	lsrs	r3, r3, #18
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	0fdb      	lsrs	r3, r3, #31
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f003 0320 	and.w	r3, r3, #32
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d104      	bne.n	8009b54 <USB_HC_Halt+0x5a>
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e0c8      	b.n	8009ce6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <USB_HC_Halt+0x66>
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d163      	bne.n	8009c28 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	0151      	lsls	r1, r2, #5
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	440a      	add	r2, r1
 8009b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 80ab 	bne.w	8009ce4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d133      	bne.n	8009c02 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bb8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	0151      	lsls	r1, r2, #5
 8009bcc:	69fa      	ldr	r2, [r7, #28]
 8009bce:	440a      	add	r2, r1
 8009bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bd8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be6:	d81d      	bhi.n	8009c24 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bfe:	d0ec      	beq.n	8009bda <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c00:	e070      	b.n	8009ce4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c22:	e05f      	b.n	8009ce4 <USB_HC_Halt+0x1ea>
            break;
 8009c24:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c26:	e05d      	b.n	8009ce4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c46:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d133      	bne.n	8009cc0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c96:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ca4:	d81d      	bhi.n	8009ce2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cbc:	d0ec      	beq.n	8009c98 <USB_HC_Halt+0x19e>
 8009cbe:	e011      	b.n	8009ce4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69ba      	ldr	r2, [r7, #24]
 8009cd0:	0151      	lsls	r1, r2, #5
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	440a      	add	r2, r1
 8009cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	e000      	b.n	8009ce4 <USB_HC_Halt+0x1ea>
          break;
 8009ce2:	bf00      	nop
    }
  }

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3724      	adds	r7, #36	; 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
	...

08009cf4 <__libc_init_array>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4d0d      	ldr	r5, [pc, #52]	; (8009d2c <__libc_init_array+0x38>)
 8009cf8:	4c0d      	ldr	r4, [pc, #52]	; (8009d30 <__libc_init_array+0x3c>)
 8009cfa:	1b64      	subs	r4, r4, r5
 8009cfc:	10a4      	asrs	r4, r4, #2
 8009cfe:	2600      	movs	r6, #0
 8009d00:	42a6      	cmp	r6, r4
 8009d02:	d109      	bne.n	8009d18 <__libc_init_array+0x24>
 8009d04:	4d0b      	ldr	r5, [pc, #44]	; (8009d34 <__libc_init_array+0x40>)
 8009d06:	4c0c      	ldr	r4, [pc, #48]	; (8009d38 <__libc_init_array+0x44>)
 8009d08:	f000 f820 	bl	8009d4c <_init>
 8009d0c:	1b64      	subs	r4, r4, r5
 8009d0e:	10a4      	asrs	r4, r4, #2
 8009d10:	2600      	movs	r6, #0
 8009d12:	42a6      	cmp	r6, r4
 8009d14:	d105      	bne.n	8009d22 <__libc_init_array+0x2e>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1c:	4798      	blx	r3
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7ee      	b.n	8009d00 <__libc_init_array+0xc>
 8009d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d26:	4798      	blx	r3
 8009d28:	3601      	adds	r6, #1
 8009d2a:	e7f2      	b.n	8009d12 <__libc_init_array+0x1e>
 8009d2c:	0800b938 	.word	0x0800b938
 8009d30:	0800b938 	.word	0x0800b938
 8009d34:	0800b938 	.word	0x0800b938
 8009d38:	0800b93c 	.word	0x0800b93c

08009d3c <memset>:
 8009d3c:	4402      	add	r2, r0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d100      	bne.n	8009d46 <memset+0xa>
 8009d44:	4770      	bx	lr
 8009d46:	f803 1b01 	strb.w	r1, [r3], #1
 8009d4a:	e7f9      	b.n	8009d40 <memset+0x4>

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
